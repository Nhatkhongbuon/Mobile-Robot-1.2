
Mobile Robot 1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005110  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08005220  08005220  00006220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005420  08005420  000070bc  2**0
                  CONTENTS
  4 .ARM          00000000  08005420  08005420  000070bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005420  08005420  000070bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005420  08005420  00006420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005424  08005424  00006424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  08005428  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200000c0  080054e4  000070c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  080054e4  000073bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089f0  00000000  00000000  000070e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001855  00000000  00000000  0000fad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00011330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ed  00000000  00000000  00011d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a7a  00000000  00000000  00012565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9a5  00000000  00000000  00029fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c17  00000000  00000000  00035984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be59b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b4  00000000  00000000  000be5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000c1794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c0 	.word	0x200000c0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005208 	.word	0x08005208

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c4 	.word	0x200000c4
 800014c:	08005208 	.word	0x08005208

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <pulse_modulation>:
	double k_phi = 9.76e-3;
	double R_a = 4.35;

	double number = 0;

	void pulse_modulation(uint16_t *duty_cycle1, uint16_t *duty_cycle2) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, *duty_cycle1); // left
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	881a      	ldrh	r2, [r3, #0]
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <pulse_modulation+0x28>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, *duty_cycle2); // right
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	881a      	ldrh	r2, [r3, #0]
 8000a64:	4b03      	ldr	r3, [pc, #12]	@ (8000a74 <pulse_modulation+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	641a      	str	r2, [r3, #64]	@ 0x40
	}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	2000016c 	.word	0x2000016c

08000a78 <convert_v_to_pwm>:


	void convert_v_to_pwm(uint16_t *duty_cycle1, uint16_t *duty_cycle2, double voltage_left, double voltage_right) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	e9c7 2300 	strd	r2, r3, [r7]
		*duty_cycle1 = (int)((voltage_left / 12) * 1000);
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <convert_v_to_pwm+0x80>)
 8000a8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a90:	f7ff fe44 	bl	800071c <__aeabi_ddiv>
 8000a94:	4602      	mov	r2, r0
 8000a96:	460b      	mov	r3, r1
 8000a98:	4610      	mov	r0, r2
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <convert_v_to_pwm+0x84>)
 8000aa2:	f7ff fd11 	bl	80004c8 <__aeabi_dmul>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4619      	mov	r1, r3
 8000aae:	f7ff ffa5 	bl	80009fc <__aeabi_d2iz>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	801a      	strh	r2, [r3, #0]
		*duty_cycle2 = (int)((voltage_right / 12) * 1000);
 8000aba:	f04f 0200 	mov.w	r2, #0
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <convert_v_to_pwm+0x80>)
 8000ac0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ac4:	f7ff fe2a 	bl	800071c <__aeabi_ddiv>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	460b      	mov	r3, r1
 8000acc:	4610      	mov	r0, r2
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <convert_v_to_pwm+0x84>)
 8000ad6:	f7ff fcf7 	bl	80004c8 <__aeabi_dmul>
 8000ada:	4602      	mov	r2, r0
 8000adc:	460b      	mov	r3, r1
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f7ff ff8b 	bl	80009fc <__aeabi_d2iz>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	801a      	strh	r2, [r3, #0]
	}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40280000 	.word	0x40280000
 8000afc:	408f4000 	.word	0x408f4000

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b04:	b0a1      	sub	sp, #132	@ 0x84
 8000b06:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f001 fdf6 	bl	80026f8 <HAL_Init>

  /* USER CODE BEGIN Init */

      //Controller parameters
      matrix K;
      allocate_matrix(&K, 3 ,1);
 8000b0c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b10:	2201      	movs	r2, #1
 8000b12:	2103      	movs	r1, #3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fa51 	bl	8001fbc <allocate_matrix>
      K.index[0][0] = 1;
 8000b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	f04f 0200 	mov.w	r2, #0
 8000b22:	4b89      	ldr	r3, [pc, #548]	@ (8000d48 <main+0x248>)
 8000b24:	e9c1 2300 	strd	r2, r3, [r1]
      K.index[1][0] = 1;
 8000b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	6819      	ldr	r1, [r3, #0]
 8000b2e:	f04f 0200 	mov.w	r2, #0
 8000b32:	4b85      	ldr	r3, [pc, #532]	@ (8000d48 <main+0x248>)
 8000b34:	e9c1 2300 	strd	r2, r3, [r1]
      K.index[2][0] = 1;
 8000b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	6819      	ldr	r1, [r3, #0]
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	4b81      	ldr	r3, [pc, #516]	@ (8000d48 <main+0x248>)
 8000b44:	e9c1 2300 	strd	r2, r3, [r1]

      matrix K_4;
      allocate_matrix(&K_4, 2, 2);
 8000b48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fa33 	bl	8001fbc <allocate_matrix>
      K_4.index[0][0] = 1;
 8000b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b58:	6819      	ldr	r1, [r3, #0]
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	4b7a      	ldr	r3, [pc, #488]	@ (8000d48 <main+0x248>)
 8000b60:	e9c1 2300 	strd	r2, r3, [r1]
      K_4.index[1][1] = 1;
 8000b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b66:	3304      	adds	r3, #4
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f103 0108 	add.w	r1, r3, #8
 8000b6e:	f04f 0200 	mov.w	r2, #0
 8000b72:	4b75      	ldr	r3, [pc, #468]	@ (8000d48 <main+0x248>)
 8000b74:	e9c1 2300 	strd	r2, r3, [r1]
      //.

      matrix v;
      allocate_matrix(&v, 2, 1);
 8000b78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2102      	movs	r1, #2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fa1b 	bl	8001fbc <allocate_matrix>

      matrix v_c;
      allocate_matrix(&v_c, 2, 1);
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 fa14 	bl	8001fbc <allocate_matrix>

      matrix v_c_old;
      allocate_matrix(&v_c_old, 2, 1);
 8000b94:	f107 0318 	add.w	r3, r7, #24
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 fa0d 	bl	8001fbc <allocate_matrix>

      matrix u;
      allocate_matrix(&u, 2, 1);
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fa06 	bl	8001fbc <allocate_matrix>

      matrix tau;
      allocate_matrix(&tau, 2, 1);
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 f9ff 	bl	8001fbc <allocate_matrix>

      virtual_control(&v_c_old, &K, &v_c, e_x, e_y, e_theta, v_r, w_r);
 8000bbe:	4b63      	ldr	r3, [pc, #396]	@ (8000d4c <main+0x24c>)
 8000bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc4:	4962      	ldr	r1, [pc, #392]	@ (8000d50 <main+0x250>)
 8000bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bca:	4c62      	ldr	r4, [pc, #392]	@ (8000d54 <main+0x254>)
 8000bcc:	cc30      	ldmia	r4, {r4, r5}
 8000bce:	4e62      	ldr	r6, [pc, #392]	@ (8000d58 <main+0x258>)
 8000bd0:	e9d6 8900 	ldrd	r8, r9, [r6]
 8000bd4:	4e61      	ldr	r6, [pc, #388]	@ (8000d5c <main+0x25c>)
 8000bd6:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8000bda:	f107 0e20 	add.w	lr, r7, #32
 8000bde:	f107 0c38 	add.w	ip, r7, #56	@ 0x38
 8000be2:	f107 0618 	add.w	r6, r7, #24
 8000be6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8000bea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000bee:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000bf6:	e9cd 2300 	strd	r2, r3, [sp]
 8000bfa:	4672      	mov	r2, lr
 8000bfc:	4661      	mov	r1, ip
 8000bfe:	4630      	mov	r0, r6
 8000c00:	f000 fdfc 	bl	80017fc <virtual_control>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c04:	f000 fa68 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c08:	f000 fbb2 	bl	8001370 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c0c:	f000 faa0 	bl	8001150 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c10:	f000 faf6 	bl	8001200 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000c14:	f000 fb48 	bl	80012a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Motor left
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000c18:	2108      	movs	r1, #8
 8000c1a:	4851      	ldr	r0, [pc, #324]	@ (8000d60 <main+0x260>)
 8000c1c:	f002 fc64 	bl	80034e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2 | TIM_CHANNEL_1);
 8000c20:	2104      	movs	r1, #4
 8000c22:	4850      	ldr	r0, [pc, #320]	@ (8000d64 <main+0x264>)
 8000c24:	f002 fda4 	bl	8003770 <HAL_TIM_Encoder_Start>
  // Motor right
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000c28:	210c      	movs	r1, #12
 8000c2a:	484d      	ldr	r0, [pc, #308]	@ (8000d60 <main+0x260>)
 8000c2c:	f002 fc5c 	bl	80034e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000c30:	2104      	movs	r1, #4
 8000c32:	484d      	ldr	r0, [pc, #308]	@ (8000d68 <main+0x268>)
 8000c34:	f002 fd9c 	bl	8003770 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  present_time = HAL_GetTick();
 8000c38:	f001 fdb6 	bl	80027a8 <HAL_GetTick>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fbc8 	bl	80003d4 <__aeabi_ui2d>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4948      	ldr	r1, [pc, #288]	@ (8000d6c <main+0x26c>)
 8000c4a:	e9c1 2300 	strd	r2, r3, [r1]
  while (1)
  {
	  encoder_cnt1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000c4e:	4b45      	ldr	r3, [pc, #276]	@ (8000d64 <main+0x264>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fbbd 	bl	80003d4 <__aeabi_ui2d>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	4944      	ldr	r1, [pc, #272]	@ (8000d70 <main+0x270>)
 8000c60:	e9c1 2300 	strd	r2, r3, [r1]
	  double a = encoder_cnt1;
 8000c64:	4b42      	ldr	r3, [pc, #264]	@ (8000d70 <main+0x270>)
 8000c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	  encoder_cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d68 <main+0x268>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fbad 	bl	80003d4 <__aeabi_ui2d>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	493d      	ldr	r1, [pc, #244]	@ (8000d74 <main+0x274>)
 8000c80:	e9c1 2300 	strd	r2, r3, [r1]
	  double b = encoder_cnt2;
 8000c84:	4b3b      	ldr	r3, [pc, #236]	@ (8000d74 <main+0x274>)
 8000c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	  if(HAL_GetTick() - present_time > sample_time) {
 8000c8e:	f001 fd8b 	bl	80027a8 <HAL_GetTick>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fb9d 	bl	80003d4 <__aeabi_ui2d>
 8000c9a:	4b34      	ldr	r3, [pc, #208]	@ (8000d6c <main+0x26c>)
 8000c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca0:	f7ff fa5a 	bl	8000158 <__aeabi_dsub>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4610      	mov	r0, r2
 8000caa:	4619      	mov	r1, r3
 8000cac:	4b32      	ldr	r3, [pc, #200]	@ (8000d78 <main+0x278>)
 8000cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb2:	f7ff fe99 	bl	80009e8 <__aeabi_dcmpgt>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f000 81d7 	beq.w	800106c <main+0x56c>
		  	if(encoder_cnt1 - encoder1_previous < 0) {
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000d70 <main+0x270>)
 8000cc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d7c <main+0x27c>)
 8000cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cca:	f7ff fa45 	bl	8000158 <__aeabi_dsub>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f04f 0200 	mov.w	r2, #0
 8000cda:	f04f 0300 	mov.w	r3, #0
 8000cde:	f7ff fe65 	bl	80009ac <__aeabi_dcmplt>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d051      	beq.n	8000d8c <main+0x28c>
		  		left_angular_velocity = ((encoder_cnt1 - encoder1_previous + 65535) / 1320) * rate;
 8000ce8:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <main+0x270>)
 8000cea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cee:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <main+0x27c>)
 8000cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf4:	f7ff fa30 	bl	8000158 <__aeabi_dsub>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	a30f      	add	r3, pc, #60	@ (adr r3, 8000d40 <main+0x240>)
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	f7ff fa29 	bl	800015c <__adddf3>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <main+0x280>)
 8000d18:	f7ff fd00 	bl	800071c <__aeabi_ddiv>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4610      	mov	r0, r2
 8000d22:	4619      	mov	r1, r3
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <main+0x284>)
 8000d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2a:	f7ff fbcd 	bl	80004c8 <__aeabi_dmul>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	460b      	mov	r3, r1
 8000d32:	4915      	ldr	r1, [pc, #84]	@ (8000d88 <main+0x288>)
 8000d34:	e9c1 2300 	strd	r2, r3, [r1]
 8000d38:	e047      	b.n	8000dca <main+0x2ca>
 8000d3a:	bf00      	nop
 8000d3c:	f3af 8000 	nop.w
 8000d40:	00000000 	.word	0x00000000
 8000d44:	40efffe0 	.word	0x40efffe0
 8000d48:	3ff00000 	.word	0x3ff00000
 8000d4c:	200001f8 	.word	0x200001f8
 8000d50:	20000200 	.word	0x20000200
 8000d54:	20000208 	.word	0x20000208
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	2000016c 	.word	0x2000016c
 8000d64:	200000dc 	.word	0x200000dc
 8000d68:	20000124 	.word	0x20000124
 8000d6c:	20000260 	.word	0x20000260
 8000d70:	20000220 	.word	0x20000220
 8000d74:	20000228 	.word	0x20000228
 8000d78:	20000010 	.word	0x20000010
 8000d7c:	20000250 	.word	0x20000250
 8000d80:	4094a000 	.word	0x4094a000
 8000d84:	20000018 	.word	0x20000018
 8000d88:	200001d0 	.word	0x200001d0
		  	}
		  	else {
		  		left_angular_velocity = ((encoder_cnt1 - encoder1_previous) / 1320) * rate;
 8000d8c:	4b30      	ldr	r3, [pc, #192]	@ (8000e50 <main+0x350>)
 8000d8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d92:	4b30      	ldr	r3, [pc, #192]	@ (8000e54 <main+0x354>)
 8000d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d98:	f7ff f9de 	bl	8000158 <__aeabi_dsub>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4610      	mov	r0, r2
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e58 <main+0x358>)
 8000daa:	f7ff fcb7 	bl	800071c <__aeabi_ddiv>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	4b29      	ldr	r3, [pc, #164]	@ (8000e5c <main+0x35c>)
 8000db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbc:	f7ff fb84 	bl	80004c8 <__aeabi_dmul>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4926      	ldr	r1, [pc, #152]	@ (8000e60 <main+0x360>)
 8000dc6:	e9c1 2300 	strd	r2, r3, [r1]
		  	}

		  	if(encoder_cnt2 - encoder2_previous < 0) {
 8000dca:	4b26      	ldr	r3, [pc, #152]	@ (8000e64 <main+0x364>)
 8000dcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dd0:	4b25      	ldr	r3, [pc, #148]	@ (8000e68 <main+0x368>)
 8000dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd6:	f7ff f9bf 	bl	8000158 <__aeabi_dsub>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	460b      	mov	r3, r1
 8000dde:	4610      	mov	r0, r2
 8000de0:	4619      	mov	r1, r3
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	f7ff fddf 	bl	80009ac <__aeabi_dcmplt>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d03d      	beq.n	8000e70 <main+0x370>
		  		right_angular_velocity = ((encoder_cnt1 - encoder1_previous + 65535) / 1320) * rate;
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <main+0x350>)
 8000df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dfa:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <main+0x354>)
 8000dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e00:	f7ff f9aa 	bl	8000158 <__aeabi_dsub>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	4610      	mov	r0, r2
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	a30e      	add	r3, pc, #56	@ (adr r3, 8000e48 <main+0x348>)
 8000e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e12:	f7ff f9a3 	bl	800015c <__adddf3>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <main+0x358>)
 8000e24:	f7ff fc7a 	bl	800071c <__aeabi_ddiv>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <main+0x35c>)
 8000e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e36:	f7ff fb47 	bl	80004c8 <__aeabi_dmul>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	490b      	ldr	r1, [pc, #44]	@ (8000e6c <main+0x36c>)
 8000e40:	e9c1 2300 	strd	r2, r3, [r1]
 8000e44:	e033      	b.n	8000eae <main+0x3ae>
 8000e46:	bf00      	nop
 8000e48:	00000000 	.word	0x00000000
 8000e4c:	40efffe0 	.word	0x40efffe0
 8000e50:	20000220 	.word	0x20000220
 8000e54:	20000250 	.word	0x20000250
 8000e58:	4094a000 	.word	0x4094a000
 8000e5c:	20000018 	.word	0x20000018
 8000e60:	200001d0 	.word	0x200001d0
 8000e64:	20000228 	.word	0x20000228
 8000e68:	20000258 	.word	0x20000258
 8000e6c:	200001d8 	.word	0x200001d8
		  	}
		  	else {
		  		right_angular_velocity = ((encoder_cnt2 - encoder2_previous) / 1320) * rate;
 8000e70:	4b7f      	ldr	r3, [pc, #508]	@ (8001070 <main+0x570>)
 8000e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e76:	4b7f      	ldr	r3, [pc, #508]	@ (8001074 <main+0x574>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff f96c 	bl	8000158 <__aeabi_dsub>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	4b7a      	ldr	r3, [pc, #488]	@ (8001078 <main+0x578>)
 8000e8e:	f7ff fc45 	bl	800071c <__aeabi_ddiv>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4b78      	ldr	r3, [pc, #480]	@ (800107c <main+0x57c>)
 8000e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea0:	f7ff fb12 	bl	80004c8 <__aeabi_dmul>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4975      	ldr	r1, [pc, #468]	@ (8001080 <main+0x580>)
 8000eaa:	e9c1 2300 	strd	r2, r3, [r1]
		  	}

		  	encoder_test_1 = encoder_cnt1 - encoder1_previous;
 8000eae:	4b75      	ldr	r3, [pc, #468]	@ (8001084 <main+0x584>)
 8000eb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eb4:	4b74      	ldr	r3, [pc, #464]	@ (8001088 <main+0x588>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	f7ff f94d 	bl	8000158 <__aeabi_dsub>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4972      	ldr	r1, [pc, #456]	@ (800108c <main+0x58c>)
 8000ec4:	e9c1 2300 	strd	r2, r3, [r1]
		  	encoder_test_2 = encoder_cnt2 - encoder2_previous;
 8000ec8:	4b69      	ldr	r3, [pc, #420]	@ (8001070 <main+0x570>)
 8000eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ece:	4b69      	ldr	r3, [pc, #420]	@ (8001074 <main+0x574>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	f7ff f940 	bl	8000158 <__aeabi_dsub>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	496c      	ldr	r1, [pc, #432]	@ (8001090 <main+0x590>)
 8000ede:	e9c1 2300 	strd	r2, r3, [r1]
		  	encoder1_previous = encoder_cnt1;
 8000ee2:	4b68      	ldr	r3, [pc, #416]	@ (8001084 <main+0x584>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	4967      	ldr	r1, [pc, #412]	@ (8001088 <main+0x588>)
 8000eea:	e9c1 2300 	strd	r2, r3, [r1]
		  	encoder2_previous = encoder_cnt2;
 8000eee:	4b60      	ldr	r3, [pc, #384]	@ (8001070 <main+0x570>)
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	495f      	ldr	r1, [pc, #380]	@ (8001074 <main+0x574>)
 8000ef6:	e9c1 2300 	strd	r2, r3, [r1]

	  		velocity(&v, left_angular_velocity, right_angular_velocity);
 8000efa:	4b66      	ldr	r3, [pc, #408]	@ (8001094 <main+0x594>)
 8000efc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f00:	4b5f      	ldr	r3, [pc, #380]	@ (8001080 <main+0x580>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000f0a:	e9cd 2300 	strd	r2, r3, [sp]
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4620      	mov	r0, r4
 8000f14:	f000 ff7c 	bl	8001e10 <velocity>
	  		error(x, y, theta, x_r, y_r, theta_r, &e_x, &e_y, &e_theta);
 8000f18:	4b5f      	ldr	r3, [pc, #380]	@ (8001098 <main+0x598>)
 8000f1a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8000f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800109c <main+0x59c>)
 8000f20:	cb18      	ldmia	r3, {r3, r4}
 8000f22:	e9c7 3400 	strd	r3, r4, [r7]
 8000f26:	4b5e      	ldr	r3, [pc, #376]	@ (80010a0 <main+0x5a0>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	495d      	ldr	r1, [pc, #372]	@ (80010a4 <main+0x5a4>)
 8000f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f32:	4c5d      	ldr	r4, [pc, #372]	@ (80010a8 <main+0x5a8>)
 8000f34:	cc30      	ldmia	r4, {r4, r5}
 8000f36:	4e5d      	ldr	r6, [pc, #372]	@ (80010ac <main+0x5ac>)
 8000f38:	e9d6 8900 	ldrd	r8, r9, [r6]
 8000f3c:	4e5c      	ldr	r6, [pc, #368]	@ (80010b0 <main+0x5b0>)
 8000f3e:	960a      	str	r6, [sp, #40]	@ 0x28
 8000f40:	4e5c      	ldr	r6, [pc, #368]	@ (80010b4 <main+0x5b4>)
 8000f42:	9609      	str	r6, [sp, #36]	@ 0x24
 8000f44:	4e5c      	ldr	r6, [pc, #368]	@ (80010b8 <main+0x5b8>)
 8000f46:	9608      	str	r6, [sp, #32]
 8000f48:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000f4c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f54:	e9cd 2300 	strd	r2, r3, [sp]
 8000f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f5c:	4650      	mov	r0, sl
 8000f5e:	4659      	mov	r1, fp
 8000f60:	f000 fbcb 	bl	80016fa <error>
	  		virtual_control(&v_c, &K, &v_c_old, e_x, e_y, e_theta, v_r, w_r);
 8000f64:	4b54      	ldr	r3, [pc, #336]	@ (80010b8 <main+0x5b8>)
 8000f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6a:	4952      	ldr	r1, [pc, #328]	@ (80010b4 <main+0x5b4>)
 8000f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f70:	4c4f      	ldr	r4, [pc, #316]	@ (80010b0 <main+0x5b0>)
 8000f72:	cc30      	ldmia	r4, {r4, r5}
 8000f74:	4e51      	ldr	r6, [pc, #324]	@ (80010bc <main+0x5bc>)
 8000f76:	e9d6 8900 	ldrd	r8, r9, [r6]
 8000f7a:	4e51      	ldr	r6, [pc, #324]	@ (80010c0 <main+0x5c0>)
 8000f7c:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8000f80:	f107 0e18 	add.w	lr, r7, #24
 8000f84:	f107 0c38 	add.w	ip, r7, #56	@ 0x38
 8000f88:	f107 0620 	add.w	r6, r7, #32
 8000f8c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8000f90:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000f94:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000f98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f9c:	e9cd 2300 	strd	r2, r3, [sp]
 8000fa0:	4672      	mov	r2, lr
 8000fa2:	4661      	mov	r1, ip
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	f000 fc29 	bl	80017fc <virtual_control>
	  		control_signal(&u, &v_c, &v_c, &v, &K_4);
 8000faa:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000fae:	f107 0220 	add.w	r2, r7, #32
 8000fb2:	f107 0120 	add.w	r1, r7, #32
 8000fb6:	f107 0010 	add.w	r0, r7, #16
 8000fba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	4623      	mov	r3, r4
 8000fc2:	f000 fcab 	bl	800191c <control_signal>
	  		torque(theta, &v, &u, &tau);
 8000fc6:	4b36      	ldr	r3, [pc, #216]	@ (80010a0 <main+0x5a0>)
 8000fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fcc:	f107 0410 	add.w	r4, r7, #16
 8000fd0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	4623      	mov	r3, r4
 8000fdc:	f000 fdee 	bl	8001bbc <torque>
	  		voltage(&voltage_left, &voltage_right, left_angular_velocity, right_angular_velocity, &tau);
 8000fe0:	4b2c      	ldr	r3, [pc, #176]	@ (8001094 <main+0x594>)
 8000fe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe6:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <main+0x580>)
 8000fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fec:	f107 0408 	add.w	r4, r7, #8
 8000ff0:	9402      	str	r4, [sp, #8]
 8000ff2:	e9cd 2300 	strd	r2, r3, [sp]
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4932      	ldr	r1, [pc, #200]	@ (80010c4 <main+0x5c4>)
 8000ffc:	4832      	ldr	r0, [pc, #200]	@ (80010c8 <main+0x5c8>)
 8000ffe:	f000 ff67 	bl	8001ed0 <voltage>
	  		next_state(&v, &x, &y, &theta, &x_r, &y_r, &theta_r, w_r, v_r);
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <main+0x5c0>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	492c      	ldr	r1, [pc, #176]	@ (80010bc <main+0x5bc>)
 800100a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800100e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001012:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001016:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800101a:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <main+0x5ac>)
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <main+0x5a8>)
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	4b20      	ldr	r3, [pc, #128]	@ (80010a4 <main+0x5a4>)
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <main+0x5a0>)
 8001028:	4a1c      	ldr	r2, [pc, #112]	@ (800109c <main+0x59c>)
 800102a:	491b      	ldr	r1, [pc, #108]	@ (8001098 <main+0x598>)
 800102c:	4620      	mov	r0, r4
 800102e:	f000 fce7 	bl	8001a00 <next_state>
	  		convert_v_to_pwm(&duty_cycle1, &duty_cycle2, voltage_left, voltage_right);
 8001032:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <main+0x5c8>)
 8001034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001038:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <main+0x5c4>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	e9cd 2300 	strd	r2, r3, [sp]
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4921      	ldr	r1, [pc, #132]	@ (80010cc <main+0x5cc>)
 8001048:	4821      	ldr	r0, [pc, #132]	@ (80010d0 <main+0x5d0>)
 800104a:	f7ff fd15 	bl	8000a78 <convert_v_to_pwm>
	  		pulse_modulation(&duty_cycle1, &duty_cycle2);
 800104e:	491f      	ldr	r1, [pc, #124]	@ (80010cc <main+0x5cc>)
 8001050:	481f      	ldr	r0, [pc, #124]	@ (80010d0 <main+0x5d0>)
 8001052:	f7ff fcfb 	bl	8000a4c <pulse_modulation>
//
//	  		pulse_modulation_test();
	  		present_time = HAL_GetTick();
 8001056:	f001 fba7 	bl	80027a8 <HAL_GetTick>
 800105a:	4603      	mov	r3, r0
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f9b9 	bl	80003d4 <__aeabi_ui2d>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	491b      	ldr	r1, [pc, #108]	@ (80010d4 <main+0x5d4>)
 8001068:	e9c1 2300 	strd	r2, r3, [r1]
  {
 800106c:	e5ef      	b.n	8000c4e <main+0x14e>
 800106e:	bf00      	nop
 8001070:	20000228 	.word	0x20000228
 8001074:	20000258 	.word	0x20000258
 8001078:	4094a000 	.word	0x4094a000
 800107c:	20000018 	.word	0x20000018
 8001080:	200001d8 	.word	0x200001d8
 8001084:	20000220 	.word	0x20000220
 8001088:	20000250 	.word	0x20000250
 800108c:	20000240 	.word	0x20000240
 8001090:	20000248 	.word	0x20000248
 8001094:	200001d0 	.word	0x200001d0
 8001098:	200001b8 	.word	0x200001b8
 800109c:	200001c0 	.word	0x200001c0
 80010a0:	200001c8 	.word	0x200001c8
 80010a4:	200001e0 	.word	0x200001e0
 80010a8:	200001e8 	.word	0x200001e8
 80010ac:	200001f0 	.word	0x200001f0
 80010b0:	20000208 	.word	0x20000208
 80010b4:	20000200 	.word	0x20000200
 80010b8:	200001f8 	.word	0x200001f8
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000218 	.word	0x20000218
 80010c8:	20000210 	.word	0x20000210
 80010cc:	2000026a 	.word	0x2000026a
 80010d0:	20000268 	.word	0x20000268
 80010d4:	20000260 	.word	0x20000260

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b090      	sub	sp, #64	@ 0x40
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2228      	movs	r2, #40	@ 0x28
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 ffe4 	bl	80040b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fe:	2301      	movs	r3, #1
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001102:	2310      	movs	r3, #16
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001106:	2300      	movs	r3, #0
 8001108:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fdbc 	bl	8002c8c <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800111a:	f000 f96d 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f002 f82a 	bl	8003190 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001142:	f000 f959 	bl	80013f8 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3740      	adds	r7, #64	@ 0x40
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	@ 0x30
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2224      	movs	r2, #36	@ 0x24
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f002 ffa8 	bl	80040b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800116c:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <MX_TIM1_Init+0xa8>)
 800116e:	4a23      	ldr	r2, [pc, #140]	@ (80011fc <MX_TIM1_Init+0xac>)
 8001170:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001172:	4b21      	ldr	r3, [pc, #132]	@ (80011f8 <MX_TIM1_Init+0xa8>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <MX_TIM1_Init+0xa8>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800117e:	4b1e      	ldr	r3, [pc, #120]	@ (80011f8 <MX_TIM1_Init+0xa8>)
 8001180:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001184:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <MX_TIM1_Init+0xa8>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <MX_TIM1_Init+0xa8>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <MX_TIM1_Init+0xa8>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001198:	2303      	movs	r3, #3
 800119a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011a0:	2301      	movs	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011b0:	2301      	movs	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4619      	mov	r1, r3
 80011c2:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <MX_TIM1_Init+0xa8>)
 80011c4:	f002 fa32 	bl	800362c <HAL_TIM_Encoder_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80011ce:	f000 f913 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	@ (80011f8 <MX_TIM1_Init+0xa8>)
 80011e0:	f002 fe30 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80011ea:	f000 f905 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3730      	adds	r7, #48	@ 0x30
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000dc 	.word	0x200000dc
 80011fc:	40012c00 	.word	0x40012c00

08001200 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	@ 0x30
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2224      	movs	r2, #36	@ 0x24
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f002 ff50 	bl	80040b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121c:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <MX_TIM2_Init+0xa4>)
 800121e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001222:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001224:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_TIM2_Init+0xa4>)
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <MX_TIM2_Init+0xa4>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001230:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <MX_TIM2_Init+0xa4>)
 8001232:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001236:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <MX_TIM2_Init+0xa4>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <MX_TIM2_Init+0xa4>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001244:	2303      	movs	r3, #3
 8001246:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800124c:	2301      	movs	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800125c:	2301      	movs	r3, #1
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4619      	mov	r1, r3
 800126e:	480d      	ldr	r0, [pc, #52]	@ (80012a4 <MX_TIM2_Init+0xa4>)
 8001270:	f002 f9dc 	bl	800362c <HAL_TIM_Encoder_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800127a:	f000 f8bd 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <MX_TIM2_Init+0xa4>)
 800128c:	f002 fdda 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001296:	f000 f8af 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3730      	adds	r7, #48	@ 0x30
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000124 	.word	0x20000124

080012a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ca:	4b27      	ldr	r3, [pc, #156]	@ (8001368 <MX_TIM4_Init+0xc0>)
 80012cc:	4a27      	ldr	r2, [pc, #156]	@ (800136c <MX_TIM4_Init+0xc4>)
 80012ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35;
 80012d0:	4b25      	ldr	r3, [pc, #148]	@ (8001368 <MX_TIM4_Init+0xc0>)
 80012d2:	2223      	movs	r2, #35	@ 0x23
 80012d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b24      	ldr	r3, [pc, #144]	@ (8001368 <MX_TIM4_Init+0xc0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80012dc:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <MX_TIM4_Init+0xc0>)
 80012de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e4:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <MX_TIM4_Init+0xc0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <MX_TIM4_Init+0xc0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012f0:	481d      	ldr	r0, [pc, #116]	@ (8001368 <MX_TIM4_Init+0xc0>)
 80012f2:	f002 f8a9 	bl	8003448 <HAL_TIM_PWM_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80012fc:	f000 f87c 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4619      	mov	r1, r3
 800130e:	4816      	ldr	r0, [pc, #88]	@ (8001368 <MX_TIM4_Init+0xc0>)
 8001310:	f002 fd98 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800131a:	f000 f86d 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131e:	2360      	movs	r3, #96	@ 0x60
 8001320:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2208      	movs	r2, #8
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	@ (8001368 <MX_TIM4_Init+0xc0>)
 8001336:	f002 faa9 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001340:	f000 f85a 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	220c      	movs	r2, #12
 8001348:	4619      	mov	r1, r3
 800134a:	4807      	ldr	r0, [pc, #28]	@ (8001368 <MX_TIM4_Init+0xc0>)
 800134c:	f002 fa9e 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001356:	f000 f84f 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800135a:	4803      	ldr	r0, [pc, #12]	@ (8001368 <MX_TIM4_Init+0xc0>)
 800135c:	f000 f90c 	bl	8001578 <HAL_TIM_MspPostInit>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	@ 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	2000016c 	.word	0x2000016c
 800136c:	40000800 	.word	0x40000800

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001384:	4b1a      	ldr	r3, [pc, #104]	@ (80013f0 <MX_GPIO_Init+0x80>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a19      	ldr	r2, [pc, #100]	@ (80013f0 <MX_GPIO_Init+0x80>)
 800138a:	f043 0320 	orr.w	r3, r3, #32
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <MX_GPIO_Init+0x80>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0320 	and.w	r3, r3, #32
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <MX_GPIO_Init+0x80>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a13      	ldr	r2, [pc, #76]	@ (80013f0 <MX_GPIO_Init+0x80>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <MX_GPIO_Init+0x80>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <MX_GPIO_Init+0x80>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	@ (80013f0 <MX_GPIO_Init+0x80>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <MX_GPIO_Init+0x80>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : CFG0_Pin CFG1_Pin CFG2_Pin */
  GPIO_InitStruct.Pin = CFG0_Pin|CFG1_Pin|CFG2_Pin;
 80013cc:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80013d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4619      	mov	r1, r3
 80013e0:	4804      	ldr	r0, [pc, #16]	@ (80013f4 <MX_GPIO_Init+0x84>)
 80013e2:	f001 facf 	bl	8002984 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e6:	bf00      	nop
 80013e8:	3720      	adds	r7, #32
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010c00 	.word	0x40010c00

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <Error_Handler+0x8>

08001404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <HAL_MspInit+0x5c>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a14      	ldr	r2, [pc, #80]	@ (8001460 <HAL_MspInit+0x5c>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <HAL_MspInit+0x5c>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <HAL_MspInit+0x5c>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <HAL_MspInit+0x5c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <HAL_MspInit+0x5c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <HAL_MspInit+0x60>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4a04      	ldr	r2, [pc, #16]	@ (8001464 <HAL_MspInit+0x60>)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000

08001468 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	@ 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0318 	add.w	r3, r7, #24
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a2b      	ldr	r2, [pc, #172]	@ (8001530 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d125      	bne.n	80014d4 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001488:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xcc>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a29      	ldr	r2, [pc, #164]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xcc>)
 800148e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a23      	ldr	r2, [pc, #140]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN1_1_Pin|EN1_2_Pin;
 80014b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	4619      	mov	r1, r3
 80014cc:	481a      	ldr	r0, [pc, #104]	@ (8001538 <HAL_TIM_Encoder_MspInit+0xd0>)
 80014ce:	f001 fa59 	bl	8002984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014d2:	e028      	b.n	8001526 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014dc:	d123      	bne.n	8001526 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a14      	ldr	r2, [pc, #80]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6193      	str	r3, [r2, #24]
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EN2_1_Pin|EN2_2_Pin;
 800150e:	2303      	movs	r3, #3
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001516:	2301      	movs	r3, #1
 8001518:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0318 	add.w	r3, r7, #24
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	@ (8001538 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001522:	f001 fa2f 	bl	8002984 <HAL_GPIO_Init>
}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	@ 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40012c00 	.word	0x40012c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40010800 	.word	0x40010800

0800153c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a09      	ldr	r2, [pc, #36]	@ (8001570 <HAL_TIM_PWM_MspInit+0x34>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d10b      	bne.n	8001566 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_TIM_PWM_MspInit+0x38>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <HAL_TIM_PWM_MspInit+0x38>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	61d3      	str	r3, [r2, #28]
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_TIM_PWM_MspInit+0x38>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	40000800 	.word	0x40000800
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a10      	ldr	r2, [pc, #64]	@ (80015d4 <HAL_TIM_MspPostInit+0x5c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d118      	bne.n	80015ca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <HAL_TIM_MspPostInit+0x60>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <HAL_TIM_MspPostInit+0x60>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <HAL_TIM_MspPostInit+0x60>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = MT1_Pin|MT2_Pin;
 80015b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	@ (80015dc <HAL_TIM_MspPostInit+0x64>)
 80015c6:	f001 f9dd 	bl	8002984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3720      	adds	r7, #32
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40000800 	.word	0x40000800
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010c00 	.word	0x40010c00

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <NMI_Handler+0x4>

080015e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <MemManage_Handler+0x4>

080015f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <UsageFault_Handler+0x4>

08001608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f001 f8a8 	bl	8002784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	@ (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	@ (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f002 fd3c 	bl	80040e4 <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20005000 	.word	0x20005000
 8001698:	00000400 	.word	0x00000400
 800169c:	2000026c 	.word	0x2000026c
 80016a0:	200003c0 	.word	0x200003c0

080016a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b0:	f7ff fff8 	bl	80016a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b4:	480b      	ldr	r0, [pc, #44]	@ (80016e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016b6:	490c      	ldr	r1, [pc, #48]	@ (80016e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016b8:	4a0c      	ldr	r2, [pc, #48]	@ (80016ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a09      	ldr	r2, [pc, #36]	@ (80016f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016cc:	4c09      	ldr	r4, [pc, #36]	@ (80016f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016da:	f002 fd09 	bl	80040f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016de:	f7ff fa0f 	bl	8000b00 <main>
  bx lr
 80016e2:	4770      	bx	lr
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80016ec:	08005428 	.word	0x08005428
  ldr r2, =_sbss
 80016f0:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80016f4:	200003bc 	.word	0x200003bc

080016f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC1_2_IRQHandler>

080016fa <error>:




void error(double x, double y, double theta, double x_r, double y_r, double theta_r, double *e_x, double *e_y, double *e_theta)
{
 80016fa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001706:	e9c7 2300 	strd	r2, r3, [r7]
    *e_x = cos(theta) * (x_r - x) + sin(theta) * (y_r - y);
 800170a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800170e:	f002 fd5d 	bl	80041cc <cos>
 8001712:	4680      	mov	r8, r0
 8001714:	4689      	mov	r9, r1
 8001716:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800171a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800171e:	f7fe fd1b 	bl	8000158 <__aeabi_dsub>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4640      	mov	r0, r8
 8001728:	4649      	mov	r1, r9
 800172a:	f7fe fecd 	bl	80004c8 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4692      	mov	sl, r2
 8001734:	469b      	mov	fp, r3
 8001736:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800173a:	f002 fd8d 	bl	8004258 <sin>
 800173e:	4680      	mov	r8, r0
 8001740:	4689      	mov	r9, r1
 8001742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001746:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800174a:	f7fe fd05 	bl	8000158 <__aeabi_dsub>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4640      	mov	r0, r8
 8001754:	4649      	mov	r1, r9
 8001756:	f7fe feb7 	bl	80004c8 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4650      	mov	r0, sl
 8001760:	4659      	mov	r1, fp
 8001762:	f7fe fcfb 	bl	800015c <__adddf3>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800176c:	e9c1 2300 	strd	r2, r3, [r1]
    *e_y = (-1) * sin(theta) * (x_r - x) + cos(theta) * (y_r - y);
 8001770:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001774:	f002 fd70 	bl	8004258 <sin>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4614      	mov	r4, r2
 800177e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001786:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800178a:	f7fe fce5 	bl	8000158 <__aeabi_dsub>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4620      	mov	r0, r4
 8001794:	4629      	mov	r1, r5
 8001796:	f7fe fe97 	bl	80004c8 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4690      	mov	r8, r2
 80017a0:	4699      	mov	r9, r3
 80017a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017a6:	f002 fd11 	bl	80041cc <cos>
 80017aa:	4604      	mov	r4, r0
 80017ac:	460d      	mov	r5, r1
 80017ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80017b6:	f7fe fccf 	bl	8000158 <__aeabi_dsub>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4620      	mov	r0, r4
 80017c0:	4629      	mov	r1, r5
 80017c2:	f7fe fe81 	bl	80004c8 <__aeabi_dmul>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4640      	mov	r0, r8
 80017cc:	4649      	mov	r1, r9
 80017ce:	f7fe fcc5 	bl	800015c <__adddf3>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80017d8:	e9c1 2300 	strd	r2, r3, [r1]
    *e_theta = theta_r - theta;
 80017dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80017e4:	f7fe fcb8 	bl	8000158 <__aeabi_dsub>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80017ee:	e9c1 2300 	strd	r2, r3, [r1]
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080017fc <virtual_control>:

// Caculate virtural control signal
// Must allocate v_c matrix and K matrix in the main program
void virtual_control(matrix *v_c, matrix *K, matrix *v_c_old, double e_x, double e_y, double e_theta, double v_r, double w_r)
{
 80017fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
    // Store the previous value of v_c
    v_c_old->index[0][0] = v_c->index[0][0];
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	6811      	ldr	r1, [r2, #0]
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	e9c1 2300 	strd	r2, r3, [r1]
    v_c_old->index[1][0] = v_c->index[1][0];
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3304      	adds	r3, #4
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	3204      	adds	r2, #4
 800182c:	6811      	ldr	r1, [r2, #0]
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate new v_c
    v_c->index[0][0] = v_r * cos(e_theta) + K->index[0][0] * e_x;
 8001836:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800183a:	f002 fcc7 	bl	80041cc <cos>
 800183e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001842:	f7fe fe41 	bl	80004c8 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4690      	mov	r8, r2
 800184c:	4699      	mov	r9, r3
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800185c:	f7fe fe34 	bl	80004c8 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681c      	ldr	r4, [r3, #0]
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4640      	mov	r0, r8
 8001874:	4649      	mov	r1, r9
 8001876:	f7fe fc71 	bl	800015c <__adddf3>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	e9c4 2300 	strd	r2, r3, [r4]
    v_c->index[1][0] = w_r + K->index[1][0] * v_r * e_y + K->index[2][0] * v_r * sin(e_theta);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3304      	adds	r3, #4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800188e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001892:	f7fe fe19 	bl	80004c8 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018a2:	f7fe fe11 	bl	80004c8 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018b2:	f7fe fc53 	bl	800015c <__adddf3>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4690      	mov	r8, r2
 80018bc:	4699      	mov	r9, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3308      	adds	r3, #8
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80018ce:	f7fe fdfb 	bl	80004c8 <__aeabi_dmul>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4614      	mov	r4, r2
 80018d8:	461d      	mov	r5, r3
 80018da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80018de:	f002 fcbb 	bl	8004258 <sin>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4620      	mov	r0, r4
 80018e8:	4629      	mov	r1, r5
 80018ea:	f7fe fded 	bl	80004c8 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3304      	adds	r3, #4
 80018fc:	681c      	ldr	r4, [r3, #0]
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4640      	mov	r0, r8
 8001904:	4649      	mov	r1, r9
 8001906:	f7fe fc29 	bl	800015c <__adddf3>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	e9c4 2300 	strd	r2, r3, [r4]
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800191c <control_signal>:

// Calculate the control signal u
// Must allocate u matrix in the main program
void control_signal(matrix *u, matrix *v_c, matrix *v_c_old, matrix *v, matrix *K_4)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b08b      	sub	sp, #44	@ 0x2c
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	603b      	str	r3, [r7, #0]

    double x  = (v_c->index[0][0] - v_c_old->index[0][0]) / sampling_interval;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe fc0b 	bl	8000158 <__aeabi_dsub>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	4b2c      	ldr	r3, [pc, #176]	@ (80019fc <control_signal+0xe0>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	f7fe fee4 	bl	800071c <__aeabi_ddiv>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double y  = (v_c->index[1][0] - v_c_old->index[1][0]) / sampling_interval;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3304      	adds	r3, #4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3304      	adds	r3, #4
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe fbf0 	bl	8000158 <__aeabi_dsub>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <control_signal+0xe0>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7fe fec9 	bl	800071c <__aeabi_ddiv>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    subtraction(v_c, v);
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	68b8      	ldr	r0, [r7, #8]
 8001996:	f000 fbbb 	bl	8002110 <subtraction>
    matrix C;
    mutiplication(K_4, v_c, &C);
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	461a      	mov	r2, r3
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80019a4:	f000 fc46 	bl	8002234 <mutiplication>
    u->index[0][0] = x + C.index[0][0];
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681c      	ldr	r4, [r3, #0]
 80019b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019ba:	f7fe fbcf 	bl	800015c <__adddf3>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	e9c4 2300 	strd	r2, r3, [r4]
    u->index[1][0] = y + C.index[1][0];
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	3304      	adds	r3, #4
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3304      	adds	r3, #4
 80019d6:	681c      	ldr	r4, [r3, #0]
 80019d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019dc:	f7fe fbbe 	bl	800015c <__adddf3>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	e9c4 2300 	strd	r2, r3, [r4]
    
    deallocate_matrix(&C);
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fb1a 	bl	8002026 <deallocate_matrix>
}
 80019f2:	bf00      	nop
 80019f4:	372c      	adds	r7, #44	@ 0x2c
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd90      	pop	{r4, r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000020 	.word	0x20000020

08001a00 <next_state>:

// Calculate future coordinates of the robot
// Call after applying voltages to motors
void next_state(matrix *v, double *x, double *y, double *theta, double *x_r, double *y_r, double *theta_r, double w_r, double v_r)
{
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b090      	sub	sp, #64	@ 0x40
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
    double derivative_x = cos(*theta) * v->index[0][0];
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f002 fbd8 	bl	80041cc <cos>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fd4f 	bl	80004c8 <__aeabi_dmul>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double derivative_y = sin(*theta) * v->index[0][0];
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f002 fc0c 	bl	8004258 <sin>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fd3d 	bl	80004c8 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double derivative_theta = v->index[1][0];
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Calculate future coordinates
    *x = *x + sampling_interval * derivative_x;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a6c:	4b52      	ldr	r3, [pc, #328]	@ (8001bb8 <next_state+0x1b8>)
 8001a6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a76:	f7fe fd27 	bl	80004c8 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4620      	mov	r0, r4
 8001a80:	4629      	mov	r1, r5
 8001a82:	f7fe fb6b 	bl	800015c <__adddf3>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	68b9      	ldr	r1, [r7, #8]
 8001a8c:	e9c1 2300 	strd	r2, r3, [r1]
    *y = *y + sampling_interval * derivative_y;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a96:	4b48      	ldr	r3, [pc, #288]	@ (8001bb8 <next_state+0x1b8>)
 8001a98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001aa0:	f7fe fd12 	bl	80004c8 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	4629      	mov	r1, r5
 8001aac:	f7fe fb56 	bl	800015c <__adddf3>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	e9c1 2300 	strd	r2, r3, [r1]
    *theta = *theta + sampling_interval * derivative_theta;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb8 <next_state+0x1b8>)
 8001ac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ac6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001aca:	f7fe fcfd 	bl	80004c8 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	f7fe fb41 	bl	800015c <__adddf3>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	6839      	ldr	r1, [r7, #0]
 8001ae0:	e9c1 2300 	strd	r2, r3, [r1]

    double derivative_x_r = cos(*theta_r) * v_r;
 8001ae4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f002 fb6d 	bl	80041cc <cos>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001afa:	f7fe fce5 	bl	80004c8 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double derivative_y_r = sin(*theta_r) * v_r;
 8001b06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f002 fba2 	bl	8004258 <sin>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001b1c:	f7fe fcd4 	bl	80004c8 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double derivative_theta_r = w_r;
 8001b28:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001b2c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Calculate future reference coordinates
    *x_r = *x_r + sampling_interval * derivative_x_r;
 8001b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b32:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b36:	4b20      	ldr	r3, [pc, #128]	@ (8001bb8 <next_state+0x1b8>)
 8001b38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b3c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b40:	f7fe fcc2 	bl	80004c8 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fb06 	bl	800015c <__adddf3>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001b56:	e9c1 2300 	strd	r2, r3, [r1]
    *y_r = *y_r + sampling_interval * derivative_y_r;
 8001b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b5c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b60:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <next_state+0x1b8>)
 8001b62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6a:	f7fe fcad 	bl	80004c8 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4620      	mov	r0, r4
 8001b74:	4629      	mov	r1, r5
 8001b76:	f7fe faf1 	bl	800015c <__adddf3>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b80:	e9c1 2300 	strd	r2, r3, [r1]
    *theta_r = *theta_r + sampling_interval * derivative_theta_r;
 8001b84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <next_state+0x1b8>)
 8001b8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b94:	f7fe fc98 	bl	80004c8 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	f7fe fadc 	bl	800015c <__adddf3>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001baa:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001bae:	bf00      	nop
 8001bb0:	3740      	adds	r7, #64	@ 0x40
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000020 	.word	0x20000020

08001bbc <torque>:

// Calculate torque signal
// Must allocate tau matrix in the main program
void torque(double theta, matrix *v, matrix *u, matrix *tau)
{
 8001bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bc0:	b095      	sub	sp, #84	@ 0x54
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	603b      	str	r3, [r7, #0]
double derivative_theta = v->index[1][0];
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
matrix M;
allocate_matrix(&M, 2, 2);
 8001bdc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001be0:	2202      	movs	r2, #2
 8001be2:	2102      	movs	r1, #2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f9e9 	bl	8001fbc <allocate_matrix>
M.index[0][0] = m;
 8001bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	4b80      	ldr	r3, [pc, #512]	@ (8001df0 <torque+0x234>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	e9c1 2300 	strd	r2, r3, [r1]
M.index[1][1] = I;
 8001bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f103 0108 	add.w	r1, r3, #8
 8001c02:	4b7c      	ldr	r3, [pc, #496]	@ (8001df4 <torque+0x238>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	e9c1 2300 	strd	r2, r3, [r1]

matrix V;
allocate_matrix(&V, 2, 2);
 8001c0c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c10:	2202      	movs	r2, #2
 8001c12:	2102      	movs	r1, #2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f9d1 	bl	8001fbc <allocate_matrix>
V.index[0][1] = m * d * derivative_theta;
 8001c1a:	4b75      	ldr	r3, [pc, #468]	@ (8001df0 <torque+0x234>)
 8001c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c20:	4b75      	ldr	r3, [pc, #468]	@ (8001df8 <torque+0x23c>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f7fe fc4f 	bl	80004c8 <__aeabi_dmul>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f103 0608 	add.w	r6, r3, #8
 8001c3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c3e:	f7fe fc43 	bl	80004c8 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	e9c6 2300 	strd	r2, r3, [r6]
V.index[1][0] = - m * d * derivative_theta;
 8001c4a:	4b69      	ldr	r3, [pc, #420]	@ (8001df0 <torque+0x234>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	4690      	mov	r8, r2
 8001c52:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001c56:	4b68      	ldr	r3, [pc, #416]	@ (8001df8 <torque+0x23c>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	4640      	mov	r0, r8
 8001c5e:	4649      	mov	r1, r9
 8001c60:	f7fe fc32 	bl	80004c8 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c6e:	3304      	adds	r3, #4
 8001c70:	681e      	ldr	r6, [r3, #0]
 8001c72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c76:	f7fe fc27 	bl	80004c8 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	e9c6 2300 	strd	r2, r3, [r6]

matrix B;
allocate_matrix(&B, 2, 2);
 8001c82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c86:	2202      	movs	r2, #2
 8001c88:	2102      	movs	r1, #2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f996 	bl	8001fbc <allocate_matrix>
B.index[0][0] = B.index[0][1] = 1 / r;
 8001c90:	4b5a      	ldr	r3, [pc, #360]	@ (8001dfc <torque+0x240>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c98:	6809      	ldr	r1, [r1, #0]
 8001c9a:	f101 0608 	add.w	r6, r1, #8
 8001c9e:	f04f 0000 	mov.w	r0, #0
 8001ca2:	4957      	ldr	r1, [pc, #348]	@ (8001e00 <torque+0x244>)
 8001ca4:	f7fe fd3a 	bl	800071c <__aeabi_ddiv>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	e9c6 2300 	strd	r2, r3, [r6]
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb2:	6819      	ldr	r1, [r3, #0]
 8001cb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001cb8:	e9c1 2300 	strd	r2, r3, [r1]
B.index[1][0] = R / r;
 8001cbc:	4b51      	ldr	r3, [pc, #324]	@ (8001e04 <torque+0x248>)
 8001cbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc2:	4b4e      	ldr	r3, [pc, #312]	@ (8001dfc <torque+0x240>)
 8001cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc8:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 8001cca:	3604      	adds	r6, #4
 8001ccc:	6836      	ldr	r6, [r6, #0]
 8001cce:	f7fe fd25 	bl	800071c <__aeabi_ddiv>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	e9c6 2300 	strd	r2, r3, [r6]
B.index[1][1] = - R / r;
 8001cda:	4b4a      	ldr	r3, [pc, #296]	@ (8001e04 <torque+0x248>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	4614      	mov	r4, r2
 8001ce2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001ce6:	4b45      	ldr	r3, [pc, #276]	@ (8001dfc <torque+0x240>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cee:	3104      	adds	r1, #4
 8001cf0:	6809      	ldr	r1, [r1, #0]
 8001cf2:	f101 0608 	add.w	r6, r1, #8
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	f7fe fd0f 	bl	800071c <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	e9c6 2300 	strd	r2, r3, [r6]

matrix inv_B;
inverse(&B, &inv_B);
 8001d06:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001d0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fccf 	bl	80026b4 <inverse>
deallocate_matrix(&B);
 8001d16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f983 	bl	8002026 <deallocate_matrix>

matrix M_u;
mutiplication(&M, u, &M_u);
 8001d20:	f107 0220 	add.w	r2, r7, #32
 8001d24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d28:	6839      	ldr	r1, [r7, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fa82 	bl	8002234 <mutiplication>
deallocate_matrix(&M);
 8001d30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 f976 	bl	8002026 <deallocate_matrix>

matrix V_v;
mutiplication(&V, v, &V_v);
 8001d3a:	f107 0218 	add.w	r2, r7, #24
 8001d3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fa75 	bl	8002234 <mutiplication>
deallocate_matrix(&V);
 8001d4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f969 	bl	8002026 <deallocate_matrix>

addition(&M_u, &V_v);
 8001d54:	f107 0218 	add.w	r2, r7, #24
 8001d58:	f107 0320 	add.w	r3, r7, #32
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f983 	bl	800206a <addition>
deallocate_matrix(&V_v);
 8001d64:	f107 0318 	add.w	r3, r7, #24
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 f95c 	bl	8002026 <deallocate_matrix>

matrix torque;
mutiplication(&inv_B, &M_u, &torque);
 8001d6e:	f107 0210 	add.w	r2, r7, #16
 8001d72:	f107 0120 	add.w	r1, r7, #32
 8001d76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fa5a 	bl	8002234 <mutiplication>
deallocate_matrix(&inv_B);
 8001d80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f94e 	bl	8002026 <deallocate_matrix>
deallocate_matrix(&M_u);
 8001d8a:	f107 0320 	add.w	r3, r7, #32
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f949 	bl	8002026 <deallocate_matrix>


tau->index[0][0] = torque.index[0][0];
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	6811      	ldr	r1, [r2, #0]
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	e9c1 2300 	strd	r2, r3, [r1]
tau->index[1][0] = torque.index[1][0];
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	3304      	adds	r3, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	3204      	adds	r2, #4
 8001db2:	6811      	ldr	r1, [r2, #0]
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	e9c1 2300 	strd	r2, r3, [r1]

t1 = torque.index[0][0];
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	4910      	ldr	r1, [pc, #64]	@ (8001e08 <torque+0x24c>)
 8001dc6:	e9c1 2300 	strd	r2, r3, [r1]
t2 = torque.index[1][0];
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	490d      	ldr	r1, [pc, #52]	@ (8001e0c <torque+0x250>)
 8001dd6:	e9c1 2300 	strd	r2, r3, [r1]

deallocate_matrix(&torque);
 8001dda:	f107 0310 	add.w	r3, r7, #16
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f921 	bl	8002026 <deallocate_matrix>
}
 8001de4:	bf00      	nop
 8001de6:	3754      	adds	r7, #84	@ 0x54
 8001de8:	46bd      	mov	sp, r7
 8001dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dee:	bf00      	nop
 8001df0:	20000048 	.word	0x20000048
 8001df4:	20000028 	.word	0x20000028
 8001df8:	20000040 	.word	0x20000040
 8001dfc:	20000030 	.word	0x20000030
 8001e00:	3ff00000 	.word	0x3ff00000
 8001e04:	20000038 	.word	0x20000038
 8001e08:	20000230 	.word	0x20000230
 8001e0c:	20000238 	.word	0x20000238

08001e10 <velocity>:

// Calculate the linear velocity and angular velocity of the vehicle
void velocity(matrix *v, double left_angular_velocity, double right_angular_velocity)
{
 8001e10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	e9c7 2300 	strd	r2, r3, [r7]
    v->index[0][0] = r / 2 * (left_angular_velocity + right_angular_velocity);
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec8 <velocity+0xb8>)
 8001e20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e2c:	f7fe fc76 	bl	800071c <__aeabi_ddiv>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4690      	mov	r8, r2
 8001e36:	4699      	mov	r9, r3
 8001e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e40:	f7fe f98c 	bl	800015c <__adddf3>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681c      	ldr	r4, [r3, #0]
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4640      	mov	r0, r8
 8001e58:	4649      	mov	r1, r9
 8001e5a:	f7fe fb35 	bl	80004c8 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	e9c4 2300 	strd	r2, r3, [r4]
    v->index[1][0] = r / (2 * R) * (right_angular_velocity - left_angular_velocity);
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <velocity+0xb8>)
 8001e68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <velocity+0xbc>)
 8001e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	f7fe f971 	bl	800015c <__adddf3>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f7fe fc4b 	bl	800071c <__aeabi_ddiv>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4690      	mov	r8, r2
 8001e8c:	4699      	mov	r9, r3
 8001e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e96:	f7fe f95f 	bl	8000158 <__aeabi_dsub>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	681c      	ldr	r4, [r3, #0]
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4640      	mov	r0, r8
 8001eb0:	4649      	mov	r1, r9
 8001eb2:	f7fe fb09 	bl	80004c8 <__aeabi_dmul>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	e9c4 2300 	strd	r2, r3, [r4]
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ec8:	20000030 	.word	0x20000030
 8001ecc:	20000038 	.word	0x20000038

08001ed0 <voltage>:

 //Calculate voltage for the motor
void voltage(double *voltage_left, double *voltage_right, double left_angular_velocity, double right_angular_velocity, matrix *tau)
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	e9c7 2300 	strd	r2, r3, [r7]

    *voltage_left = k_phi * left_angular_velocity * 30 + R_a * tau->index[1][0] / k_phi;
 8001ede:	4b34      	ldr	r3, [pc, #208]	@ (8001fb0 <voltage+0xe0>)
 8001ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ee8:	f7fe faee 	bl	80004c8 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb4 <voltage+0xe4>)
 8001efa:	f7fe fae5 	bl	80004c8 <__aeabi_dmul>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4614      	mov	r4, r2
 8001f04:	461d      	mov	r5, r3
 8001f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f12:	4b29      	ldr	r3, [pc, #164]	@ (8001fb8 <voltage+0xe8>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	f7fe fad6 	bl	80004c8 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	4b22      	ldr	r3, [pc, #136]	@ (8001fb0 <voltage+0xe0>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	f7fe fbf7 	bl	800071c <__aeabi_ddiv>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe f911 	bl	800015c <__adddf3>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	e9c1 2300 	strd	r2, r3, [r1]
    *voltage_right = k_phi * right_angular_velocity * 30 + R_a * tau->index[0][0] / k_phi;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <voltage+0xe0>)
 8001f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f4e:	f7fe fabb 	bl	80004c8 <__aeabi_dmul>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <voltage+0xe4>)
 8001f60:	f7fe fab2 	bl	80004c8 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4614      	mov	r4, r2
 8001f6a:	461d      	mov	r5, r3
 8001f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f76:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <voltage+0xe8>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe faa4 	bl	80004c8 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <voltage+0xe0>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	f7fe fbc5 	bl	800071c <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4620      	mov	r0, r4
 8001f98:	4629      	mov	r1, r5
 8001f9a:	f7fe f8df 	bl	800015c <__adddf3>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb0:	20000050 	.word	0x20000050
 8001fb4:	403e0000 	.word	0x403e0000
 8001fb8:	20000058 	.word	0x20000058

08001fbc <allocate_matrix>:
#include "matrices_op2.h"

//Allocate memmory space and matrix A
void allocate_matrix(matrix *A, unsigned_int8 num_rows, unsigned_int8 num_columns)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	70bb      	strb	r3, [r7, #2]
    A->index = (double **) malloc(sizeof(double *) * num_rows);
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f001 ffb1 	bl	8003f38 <malloc>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	601a      	str	r2, [r3, #0]
    A->num_columns = num_columns;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	78ba      	ldrb	r2, [r7, #2]
 8001fe2:	711a      	strb	r2, [r3, #4]
    A->num_rows = num_rows;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	715a      	strb	r2, [r3, #5]

    for (int i = 0; i < A->num_rows; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	e00f      	b.n	8002010 <allocate_matrix+0x54>
        A->index[i] = (double *) calloc(sizeof(double), A->num_columns);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	791b      	ldrb	r3, [r3, #4]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	18d4      	adds	r4, r2, r3
 8002000:	2008      	movs	r0, #8
 8002002:	f001 ff7d 	bl	8003f00 <calloc>
 8002006:	4603      	mov	r3, r0
 8002008:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < A->num_rows; i++)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3301      	adds	r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	795b      	ldrb	r3, [r3, #5]
 8002014:	461a      	mov	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4293      	cmp	r3, r2
 800201a:	dbe9      	blt.n	8001ff0 <allocate_matrix+0x34>
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}

08002026 <deallocate_matrix>:

//Deallocate memory space for matrix A
void deallocate_matrix(matrix *A)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < A->num_rows; i++){
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	e00b      	b.n	800204c <deallocate_matrix+0x26>
        free(A->index[i]);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f001 ff81 	bl	8003f48 <free>
    for (int i = 0; i < A->num_rows; i++){
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3301      	adds	r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	795b      	ldrb	r3, [r3, #5]
 8002050:	461a      	mov	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4293      	cmp	r3, r2
 8002056:	dbed      	blt.n	8002034 <deallocate_matrix+0xe>
    }
    free(A->index);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f001 ff73 	bl	8003f48 <free>
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <addition>:
}

//Calculate addtion of matrix A and B
//Answer is directly assigned to A
void addition(matrix *A, matrix *B)
{
 800206a:	b5b0      	push	{r4, r5, r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
    //Check dimensions of all matrix operands
    if ((A->num_rows != B->num_rows) || (A->num_columns != B->num_columns))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	795a      	ldrb	r2, [r3, #5]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	795b      	ldrb	r3, [r3, #5]
 800207c:	429a      	cmp	r2, r3
 800207e:	d143      	bne.n	8002108 <addition+0x9e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	791a      	ldrb	r2, [r3, #4]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	791b      	ldrb	r3, [r3, #4]
 8002088:	429a      	cmp	r2, r3
 800208a:	d13d      	bne.n	8002108 <addition+0x9e>
        return;
    
    //Calculate addition
    for (int i  = 0; i < A->num_rows; i++){
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e033      	b.n	80020fa <addition+0x90>
        for (int j = 0; j < A->num_columns; j++){
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	e027      	b.n	80020e8 <addition+0x7e>
            A->index[i][j] += B->index[i][j];
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	687c      	ldr	r4, [r7, #4]
 80020c6:	6825      	ldr	r5, [r4, #0]
 80020c8:	68fc      	ldr	r4, [r7, #12]
 80020ca:	00a4      	lsls	r4, r4, #2
 80020cc:	442c      	add	r4, r5
 80020ce:	6825      	ldr	r5, [r4, #0]
 80020d0:	68bc      	ldr	r4, [r7, #8]
 80020d2:	00e4      	lsls	r4, r4, #3
 80020d4:	442c      	add	r4, r5
 80020d6:	f7fe f841 	bl	800015c <__adddf3>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3301      	adds	r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	791b      	ldrb	r3, [r3, #4]
 80020ec:	461a      	mov	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4293      	cmp	r3, r2
 80020f2:	dbd1      	blt.n	8002098 <addition+0x2e>
    for (int i  = 0; i < A->num_rows; i++){
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	3301      	adds	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	795b      	ldrb	r3, [r3, #5]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4293      	cmp	r3, r2
 8002104:	dbc5      	blt.n	8002092 <addition+0x28>
 8002106:	e000      	b.n	800210a <addition+0xa0>
        return;
 8002108:	bf00      	nop
        }
    }
}
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bdb0      	pop	{r4, r5, r7, pc}

08002110 <subtraction>:

//Calculate subtraction of matrix A and B (A - B)
//Answer is directly assigned to A
void subtraction(matrix *A, matrix *B)
{
 8002110:	b5b0      	push	{r4, r5, r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
    //Check dimensions of all matrix operands
    if ((A->num_rows != B->num_rows) || (A->num_columns != B->num_columns))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	795a      	ldrb	r2, [r3, #5]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	795b      	ldrb	r3, [r3, #5]
 8002122:	429a      	cmp	r2, r3
 8002124:	d143      	bne.n	80021ae <subtraction+0x9e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	791a      	ldrb	r2, [r3, #4]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	791b      	ldrb	r3, [r3, #4]
 800212e:	429a      	cmp	r2, r3
 8002130:	d13d      	bne.n	80021ae <subtraction+0x9e>
        return;
    
    //Calculate Subtraction
    for (int i  = 0; i < A->num_rows; i++){
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e033      	b.n	80021a0 <subtraction+0x90>
        for (int j = 0; j < A->num_columns; j++){
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	e027      	b.n	800218e <subtraction+0x7e>
            A->index[i][j] -= B->index[i][j];
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	687c      	ldr	r4, [r7, #4]
 800216c:	6825      	ldr	r5, [r4, #0]
 800216e:	68fc      	ldr	r4, [r7, #12]
 8002170:	00a4      	lsls	r4, r4, #2
 8002172:	442c      	add	r4, r5
 8002174:	6825      	ldr	r5, [r4, #0]
 8002176:	68bc      	ldr	r4, [r7, #8]
 8002178:	00e4      	lsls	r4, r4, #3
 800217a:	442c      	add	r4, r5
 800217c:	f7fd ffec 	bl	8000158 <__aeabi_dsub>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3301      	adds	r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	791b      	ldrb	r3, [r3, #4]
 8002192:	461a      	mov	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4293      	cmp	r3, r2
 8002198:	dbd1      	blt.n	800213e <subtraction+0x2e>
    for (int i  = 0; i < A->num_rows; i++){
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3301      	adds	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	795b      	ldrb	r3, [r3, #5]
 80021a4:	461a      	mov	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4293      	cmp	r3, r2
 80021aa:	dbc5      	blt.n	8002138 <subtraction+0x28>
 80021ac:	e000      	b.n	80021b0 <subtraction+0xa0>
        return;
 80021ae:	bf00      	nop
        }
    }
}
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bdb0      	pop	{r4, r5, r7, pc}

080021b6 <scalar_multiplication>:

//Scalar multiplication of matrix
////Answer is directly assigned to A
void scalar_multiplication(matrix *A, double scalar)
{
 80021b6:	b590      	push	{r4, r7, lr}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	e9c7 2300 	strd	r2, r3, [r7]
    for (int i  = 0; i < A->num_rows; i++){
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e02a      	b.n	800221e <scalar_multiplication+0x68>
        for (int j = 0; j < A->num_columns; j++){
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	e01e      	b.n	800220c <scalar_multiplication+0x56>
            A->index[i][j] *= scalar;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	18d4      	adds	r4, r2, r3
 80021f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021fa:	f7fe f965 	bl	80004c8 <__aeabi_dmul>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	3301      	adds	r3, #1
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	791b      	ldrb	r3, [r3, #4]
 8002210:	461a      	mov	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4293      	cmp	r3, r2
 8002216:	dbda      	blt.n	80021ce <scalar_multiplication+0x18>
    for (int i  = 0; i < A->num_rows; i++){
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3301      	adds	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	795b      	ldrb	r3, [r3, #5]
 8002222:	461a      	mov	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	4293      	cmp	r3, r2
 8002228:	dbce      	blt.n	80021c8 <scalar_multiplication+0x12>
        }
    }
}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	bd90      	pop	{r4, r7, pc}

08002234 <mutiplication>:

//Calculate multiplication of matrix A and B
//Answer is directly assigned to Ans
void mutiplication(matrix *A, matrix *B, matrix *Ans)
{
 8002234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002236:	b089      	sub	sp, #36	@ 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
    //Check for appropriate size
    if (A->num_columns != B->num_rows)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	791a      	ldrb	r2, [r3, #4]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	795b      	ldrb	r3, [r3, #5]
 8002248:	429a      	cmp	r2, r3
 800224a:	d166      	bne.n	800231a <mutiplication+0xe6>
        return;

    //Allocate memory space for answer
    allocate_matrix(Ans, A->num_rows, B->num_columns);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	7959      	ldrb	r1, [r3, #5]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	791b      	ldrb	r3, [r3, #4]
 8002254:	461a      	mov	r2, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff feb0 	bl	8001fbc <allocate_matrix>

    //Perform multiplication
    for (int i = 0; i < Ans->num_rows; i++){
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	e054      	b.n	800230c <mutiplication+0xd8>
        for(int j = 0; j < Ans->num_columns; j++){
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	e048      	b.n	80022fa <mutiplication+0xc6>
            for (int x = 0; x < A->num_columns; x++){
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e03c      	b.n	80022e8 <mutiplication+0xb4>
                Ans->index[i][j] += (A->index[i][x] * B->index[x][j]); 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b0:	f7fe f90a 	bl	80004c8 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	18d6      	adds	r6, r2, r3
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4620      	mov	r0, r4
 80022d4:	4629      	mov	r1, r5
 80022d6:	f7fd ff41 	bl	800015c <__adddf3>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	e9c6 2300 	strd	r2, r3, [r6]
            for (int x = 0; x < A->num_columns; x++){
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	791b      	ldrb	r3, [r3, #4]
 80022ec:	461a      	mov	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	4293      	cmp	r3, r2
 80022f2:	dbbc      	blt.n	800226e <mutiplication+0x3a>
        for(int j = 0; j < Ans->num_columns; j++){
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	3301      	adds	r3, #1
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	791b      	ldrb	r3, [r3, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	4293      	cmp	r3, r2
 8002304:	dbb0      	blt.n	8002268 <mutiplication+0x34>
    for (int i = 0; i < Ans->num_rows; i++){
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3301      	adds	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	795b      	ldrb	r3, [r3, #5]
 8002310:	461a      	mov	r2, r3
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4293      	cmp	r3, r2
 8002316:	dba4      	blt.n	8002262 <mutiplication+0x2e>
 8002318:	e000      	b.n	800231c <mutiplication+0xe8>
        return;
 800231a:	bf00      	nop
            }
        }
    }
}
 800231c:	3724      	adds	r7, #36	@ 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002322 <transpose>:

//Perform transpose of A
void transpose(matrix *A, matrix *transpose_A)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
    allocate_matrix(transpose_A, A->num_columns, A->num_rows);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7919      	ldrb	r1, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	795b      	ldrb	r3, [r3, #5]
 8002334:	461a      	mov	r2, r3
 8002336:	6838      	ldr	r0, [r7, #0]
 8002338:	f7ff fe40 	bl	8001fbc <allocate_matrix>

    //Perform transpose operation
    for (int i = 0; i < transpose_A->num_rows; i++){
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	e024      	b.n	800238c <transpose+0x6a>
        for (int j = 0; j < transpose_A->num_columns; j++){
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	e018      	b.n	800237a <transpose+0x58>
            transpose_A->index[i][j] = A->index[j][i];
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	6811      	ldr	r1, [r2, #0]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	0092      	lsls	r2, r2, #2
 8002362:	440a      	add	r2, r1
 8002364:	6811      	ldr	r1, [r2, #0]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	00d2      	lsls	r2, r2, #3
 800236a:	4411      	add	r1, r2
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < transpose_A->num_columns; j++){
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	3301      	adds	r3, #1
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	791b      	ldrb	r3, [r3, #4]
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4293      	cmp	r3, r2
 8002384:	dbe0      	blt.n	8002348 <transpose+0x26>
    for (int i = 0; i < transpose_A->num_rows; i++){
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3301      	adds	r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	795b      	ldrb	r3, [r3, #5]
 8002390:	461a      	mov	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4293      	cmp	r3, r2
 8002396:	dbd4      	blt.n	8002342 <transpose+0x20>
        }
    }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <minor>:

void minor(matrix *major, matrix *minor, unsigned_int8 skip_row, unsigned_int8 skip_column)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b088      	sub	sp, #32
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	4611      	mov	r1, r2
 80023ae:	461a      	mov	r2, r3
 80023b0:	460b      	mov	r3, r1
 80023b2:	71fb      	strb	r3, [r7, #7]
 80023b4:	4613      	mov	r3, r2
 80023b6:	71bb      	strb	r3, [r7, #6]
    //Allocate memory space for minor
    allocate_matrix(minor, major->num_rows - 1, major->num_columns - 1);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	795b      	ldrb	r3, [r3, #5]
 80023bc:	3b01      	subs	r3, #1
 80023be:	b2d9      	uxtb	r1, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	791b      	ldrb	r3, [r3, #4]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	68b8      	ldr	r0, [r7, #8]
 80023cc:	f7ff fdf6 	bl	8001fbc <allocate_matrix>

    int x = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
    int y = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]

    //Assign element to minor
    //Skip row skip_row
    //Skip column skip_column
    for (int i = 0; i < major->num_rows; i++){
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e038      	b.n	8002450 <minor+0xae>
        if (i != skip_row){
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d030      	beq.n	8002448 <minor+0xa6>
            for (int j = 0; j < major->num_columns; j++){
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	e021      	b.n	8002430 <minor+0x8e>
                if (j != skip_column){
 80023ec:	79bb      	ldrb	r3, [r7, #6]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d019      	beq.n	8002428 <minor+0x86>
                    minor->index[x][y] = major->index[i][j];
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	6811      	ldr	r1, [r2, #0]
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	440a      	add	r2, r1
 8002410:	6811      	ldr	r1, [r2, #0]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	00d2      	lsls	r2, r2, #3
 8002416:	4411      	add	r1, r2
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	e9c1 2300 	strd	r2, r3, [r1]
                    y++;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	3301      	adds	r3, #1
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	e000      	b.n	800242a <minor+0x88>
                } else {
                    continue;
 8002428:	bf00      	nop
            for (int j = 0; j < major->num_columns; j++){
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	3301      	adds	r3, #1
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	791b      	ldrb	r3, [r3, #4]
 8002434:	461a      	mov	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4293      	cmp	r3, r2
 800243a:	dbd7      	blt.n	80023ec <minor+0x4a>
                }
            }
            x++;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	3301      	adds	r3, #1
 8002440:	61fb      	str	r3, [r7, #28]
            y = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	e000      	b.n	800244a <minor+0xa8>
        } else {
            continue;
 8002448:	bf00      	nop
    for (int i = 0; i < major->num_rows; i++){
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	795b      	ldrb	r3, [r3, #5]
 8002454:	461a      	mov	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	4293      	cmp	r3, r2
 800245a:	dbc0      	blt.n	80023de <minor+0x3c>
        }
    }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <determinant>:

// Calculate the determinant of A
double determinant(matrix *A, unsigned_int8 expand_row)
{
 8002466:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	70fb      	strb	r3, [r7, #3]
    double result = 0;
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    if (A->num_rows == 1 && A->num_columns == 1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	795b      	ldrb	r3, [r3, #5]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d10d      	bne.n	80024a4 <determinant+0x3e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	791b      	ldrb	r3, [r3, #4]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d109      	bne.n	80024a4 <determinant+0x3e>
        return result = A->index[0][0];
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800249e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a2:	e09a      	b.n	80025da <determinant+0x174>

    //Calculate determinant with chosen expand_row
    for (int j = 0; j < A->num_columns; j++){
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	e08e      	b.n	80025c8 <determinant+0x162>
        
        //Create minor matrix
        matrix M;
        minor(A, &M, expand_row, j);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	f107 010c 	add.w	r1, r7, #12
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff74 	bl	80023a2 <minor>
        
        if ((expand_row + j) % 2 == 0){
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	4413      	add	r3, r2
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d13a      	bne.n	800253e <determinant+0xd8>
            result += (A->index[expand_row][j] == 0) ? (0) : (A->index[expand_row][j] * determinant(&M, 0));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	f7fe fa57 	bl	8000998 <__aeabi_dcmpeq>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d119      	bne.n	8002524 <determinant+0xbe>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002506:	f107 030c 	add.w	r3, r7, #12
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ffaa 	bl	8002466 <determinant>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4640      	mov	r0, r8
 8002518:	4649      	mov	r1, r9
 800251a:	f7fd ffd5 	bl	80004c8 <__aeabi_dmul>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	e003      	b.n	800252c <determinant+0xc6>
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002530:	f7fd fe14 	bl	800015c <__adddf3>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800253c:	e03c      	b.n	80025b8 <determinant+0x152>
        } else {
            result += (A->index[expand_row][j] == 0) ? (0) : ((-1) * A->index[expand_row][j] * determinant(&M, 0));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	f7fe fa1c 	bl	8000998 <__aeabi_dcmpeq>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11c      	bne.n	80025a0 <determinant+0x13a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	4614      	mov	r4, r2
 800257e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff6c 	bl	8002466 <determinant>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4620      	mov	r0, r4
 8002594:	4629      	mov	r1, r5
 8002596:	f7fd ff97 	bl	80004c8 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	e003      	b.n	80025a8 <determinant+0x142>
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025ac:	f7fd fdd6 	bl	800015c <__adddf3>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }

        //Deallocate minor matrix
        deallocate_matrix(&M);
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fd32 	bl	8002026 <deallocate_matrix>
    for (int j = 0; j < A->num_columns; j++){
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	791b      	ldrb	r3, [r3, #4]
 80025cc:	461a      	mov	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	4293      	cmp	r3, r2
 80025d2:	f6ff af6a 	blt.w	80024aa <determinant+0x44>
    }

    return result;
 80025d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080025e6 <adjoint>:

//Calculate adjoint matrix
void adjoint(matrix *A, matrix *Ans)
{
 80025e6:	b5b0      	push	{r4, r5, r7, lr}
 80025e8:	b088      	sub	sp, #32
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
    matrix temp;
    allocate_matrix(&temp, A->num_rows, A->num_columns);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7959      	ldrb	r1, [r3, #5]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	791a      	ldrb	r2, [r3, #4]
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fcdd 	bl	8001fbc <allocate_matrix>
    for (int i = 0; i < temp.num_rows; i++){
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	e040      	b.n	800268a <adjoint+0xa4>
        for (int j = 0; j < temp.num_columns; j++){
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	e035      	b.n	800267a <adjoint+0x94>
            matrix M;
            minor(A, &M, i, j);
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f107 0108 	add.w	r1, r7, #8
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fec1 	bl	80023a2 <minor>

            temp.index[i][j] = ((i + j) % 2 == 0) ? (determinant(&M, 0)) : ((-1) * determinant(&M, 0));
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4413      	add	r3, r2
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d108      	bne.n	8002640 <adjoint+0x5a>
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff16 	bl	8002466 <determinant>
 800263a:	4604      	mov	r4, r0
 800263c:	460d      	mov	r5, r1
 800263e:	e00a      	b.n	8002656 <adjoint+0x70>
 8002640:	f107 0308 	add.w	r3, r7, #8
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ff0d 	bl	8002466 <determinant>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4614      	mov	r4, r2
 8002652:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	e9c3 4500 	strd	r4, r5, [r3]
            
            //Deallocate minor matrix
            deallocate_matrix(&M);
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fcd9 	bl	8002026 <deallocate_matrix>
        for (int j = 0; j < temp.num_columns; j++){
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	3301      	adds	r3, #1
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	7d3b      	ldrb	r3, [r7, #20]
 800267c:	461a      	mov	r2, r3
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4293      	cmp	r3, r2
 8002682:	dbc4      	blt.n	800260e <adjoint+0x28>
    for (int i = 0; i < temp.num_rows; i++){
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	3301      	adds	r3, #1
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	7d7b      	ldrb	r3, [r7, #21]
 800268c:	461a      	mov	r2, r3
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4293      	cmp	r3, r2
 8002692:	dbb9      	blt.n	8002608 <adjoint+0x22>
        }
    }
    transpose(&temp, Ans);
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fe41 	bl	8002322 <transpose>
    deallocate_matrix(&temp);
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fcbe 	bl	8002026 <deallocate_matrix>
}
 80026aa:	bf00      	nop
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080026b4 <inverse>:

void inverse(matrix *A, matrix *inverse_of_A)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
    //Calculate determinant of A
    double determinant_of_A = determinant(A, 0);
 80026be:	2100      	movs	r1, #0
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fed0 	bl	8002466 <determinant>
 80026c6:	e9c7 0102 	strd	r0, r1, [r7, #8]

    //Calculate adjoint matrix of A
    adjoint(A, inverse_of_A);
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff8a 	bl	80025e6 <adjoint>

    //Calculate inverse of A
    scalar_multiplication(inverse_of_A, 1 / determinant_of_A);
 80026d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026d6:	f04f 0000 	mov.w	r0, #0
 80026da:	4906      	ldr	r1, [pc, #24]	@ (80026f4 <inverse+0x40>)
 80026dc:	f7fe f81e 	bl	800071c <__aeabi_ddiv>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	6838      	ldr	r0, [r7, #0]
 80026e6:	f7ff fd66 	bl	80021b6 <scalar_multiplication>
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	3ff00000 	.word	0x3ff00000

080026f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026fc:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <HAL_Init+0x28>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a07      	ldr	r2, [pc, #28]	@ (8002720 <HAL_Init+0x28>)
 8002702:	f043 0310 	orr.w	r3, r3, #16
 8002706:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002708:	2003      	movs	r0, #3
 800270a:	f000 f907 	bl	800291c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800270e:	200f      	movs	r0, #15
 8002710:	f000 f808 	bl	8002724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002714:	f7fe fe76 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40022000 	.word	0x40022000

08002724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800272c:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_InitTick+0x54>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b12      	ldr	r3, [pc, #72]	@ (800277c <HAL_InitTick+0x58>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800273a:	fbb3 f3f1 	udiv	r3, r3, r1
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f911 	bl	800296a <HAL_SYSTICK_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00e      	b.n	8002770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b0f      	cmp	r3, #15
 8002756:	d80a      	bhi.n	800276e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002758:	2200      	movs	r2, #0
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f000 f8e7 	bl	8002932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002764:	4a06      	ldr	r2, [pc, #24]	@ (8002780 <HAL_InitTick+0x5c>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000060 	.word	0x20000060
 800277c:	20000068 	.word	0x20000068
 8002780:	20000064 	.word	0x20000064

08002784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002788:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_IncTick+0x1c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_IncTick+0x20>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4413      	add	r3, r2
 8002794:	4a03      	ldr	r2, [pc, #12]	@ (80027a4 <HAL_IncTick+0x20>)
 8002796:	6013      	str	r3, [r2, #0]
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	20000068 	.word	0x20000068
 80027a4:	20000270 	.word	0x20000270

080027a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return uwTick;
 80027ac:	4b02      	ldr	r3, [pc, #8]	@ (80027b8 <HAL_GetTick+0x10>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	20000270 	.word	0x20000270

080027bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027d8:	4013      	ands	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ee:	4a04      	ldr	r2, [pc, #16]	@ (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	60d3      	str	r3, [r2, #12]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002808:	4b04      	ldr	r3, [pc, #16]	@ (800281c <__NVIC_GetPriorityGrouping+0x18>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	f003 0307 	and.w	r3, r3, #7
}
 8002812:	4618      	mov	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	6039      	str	r1, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	2b00      	cmp	r3, #0
 8002832:	db0a      	blt.n	800284a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	490c      	ldr	r1, [pc, #48]	@ (800286c <__NVIC_SetPriority+0x4c>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	0112      	lsls	r2, r2, #4
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	440b      	add	r3, r1
 8002844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002848:	e00a      	b.n	8002860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4908      	ldr	r1, [pc, #32]	@ (8002870 <__NVIC_SetPriority+0x50>)
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	3b04      	subs	r3, #4
 8002858:	0112      	lsls	r2, r2, #4
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	440b      	add	r3, r1
 800285e:	761a      	strb	r2, [r3, #24]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000e100 	.word	0xe000e100
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	@ 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f1c3 0307 	rsb	r3, r3, #7
 800288e:	2b04      	cmp	r3, #4
 8002890:	bf28      	it	cs
 8002892:	2304      	movcs	r3, #4
 8002894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3304      	adds	r3, #4
 800289a:	2b06      	cmp	r3, #6
 800289c:	d902      	bls.n	80028a4 <NVIC_EncodePriority+0x30>
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3b03      	subs	r3, #3
 80028a2:	e000      	b.n	80028a6 <NVIC_EncodePriority+0x32>
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	401a      	ands	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028bc:	f04f 31ff 	mov.w	r1, #4294967295
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	43d9      	mvns	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	4313      	orrs	r3, r2
         );
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3724      	adds	r7, #36	@ 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028e8:	d301      	bcc.n	80028ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00f      	b.n	800290e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <SysTick_Config+0x40>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f6:	210f      	movs	r1, #15
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f7ff ff90 	bl	8002820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002900:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <SysTick_Config+0x40>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002906:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <SysTick_Config+0x40>)
 8002908:	2207      	movs	r2, #7
 800290a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	e000e010 	.word	0xe000e010

0800291c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff49 	bl	80027bc <__NVIC_SetPriorityGrouping>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002944:	f7ff ff5e 	bl	8002804 <__NVIC_GetPriorityGrouping>
 8002948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f7ff ff90 	bl	8002874 <NVIC_EncodePriority>
 8002954:	4602      	mov	r2, r0
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff5f 	bl	8002820 <__NVIC_SetPriority>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ffb0 	bl	80028d8 <SysTick_Config>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002984:	b480      	push	{r7}
 8002986:	b08b      	sub	sp, #44	@ 0x2c
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800298e:	2300      	movs	r3, #0
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002996:	e169      	b.n	8002c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002998:	2201      	movs	r2, #1
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	f040 8158 	bne.w	8002c66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4a9a      	ldr	r2, [pc, #616]	@ (8002c24 <HAL_GPIO_Init+0x2a0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d05e      	beq.n	8002a7e <HAL_GPIO_Init+0xfa>
 80029c0:	4a98      	ldr	r2, [pc, #608]	@ (8002c24 <HAL_GPIO_Init+0x2a0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d875      	bhi.n	8002ab2 <HAL_GPIO_Init+0x12e>
 80029c6:	4a98      	ldr	r2, [pc, #608]	@ (8002c28 <HAL_GPIO_Init+0x2a4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d058      	beq.n	8002a7e <HAL_GPIO_Init+0xfa>
 80029cc:	4a96      	ldr	r2, [pc, #600]	@ (8002c28 <HAL_GPIO_Init+0x2a4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d86f      	bhi.n	8002ab2 <HAL_GPIO_Init+0x12e>
 80029d2:	4a96      	ldr	r2, [pc, #600]	@ (8002c2c <HAL_GPIO_Init+0x2a8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d052      	beq.n	8002a7e <HAL_GPIO_Init+0xfa>
 80029d8:	4a94      	ldr	r2, [pc, #592]	@ (8002c2c <HAL_GPIO_Init+0x2a8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d869      	bhi.n	8002ab2 <HAL_GPIO_Init+0x12e>
 80029de:	4a94      	ldr	r2, [pc, #592]	@ (8002c30 <HAL_GPIO_Init+0x2ac>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d04c      	beq.n	8002a7e <HAL_GPIO_Init+0xfa>
 80029e4:	4a92      	ldr	r2, [pc, #584]	@ (8002c30 <HAL_GPIO_Init+0x2ac>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d863      	bhi.n	8002ab2 <HAL_GPIO_Init+0x12e>
 80029ea:	4a92      	ldr	r2, [pc, #584]	@ (8002c34 <HAL_GPIO_Init+0x2b0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d046      	beq.n	8002a7e <HAL_GPIO_Init+0xfa>
 80029f0:	4a90      	ldr	r2, [pc, #576]	@ (8002c34 <HAL_GPIO_Init+0x2b0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d85d      	bhi.n	8002ab2 <HAL_GPIO_Init+0x12e>
 80029f6:	2b12      	cmp	r3, #18
 80029f8:	d82a      	bhi.n	8002a50 <HAL_GPIO_Init+0xcc>
 80029fa:	2b12      	cmp	r3, #18
 80029fc:	d859      	bhi.n	8002ab2 <HAL_GPIO_Init+0x12e>
 80029fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002a04 <HAL_GPIO_Init+0x80>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002a7f 	.word	0x08002a7f
 8002a08:	08002a59 	.word	0x08002a59
 8002a0c:	08002a6b 	.word	0x08002a6b
 8002a10:	08002aad 	.word	0x08002aad
 8002a14:	08002ab3 	.word	0x08002ab3
 8002a18:	08002ab3 	.word	0x08002ab3
 8002a1c:	08002ab3 	.word	0x08002ab3
 8002a20:	08002ab3 	.word	0x08002ab3
 8002a24:	08002ab3 	.word	0x08002ab3
 8002a28:	08002ab3 	.word	0x08002ab3
 8002a2c:	08002ab3 	.word	0x08002ab3
 8002a30:	08002ab3 	.word	0x08002ab3
 8002a34:	08002ab3 	.word	0x08002ab3
 8002a38:	08002ab3 	.word	0x08002ab3
 8002a3c:	08002ab3 	.word	0x08002ab3
 8002a40:	08002ab3 	.word	0x08002ab3
 8002a44:	08002ab3 	.word	0x08002ab3
 8002a48:	08002a61 	.word	0x08002a61
 8002a4c:	08002a75 	.word	0x08002a75
 8002a50:	4a79      	ldr	r2, [pc, #484]	@ (8002c38 <HAL_GPIO_Init+0x2b4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a56:	e02c      	b.n	8002ab2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	623b      	str	r3, [r7, #32]
          break;
 8002a5e:	e029      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	3304      	adds	r3, #4
 8002a66:	623b      	str	r3, [r7, #32]
          break;
 8002a68:	e024      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	3308      	adds	r3, #8
 8002a70:	623b      	str	r3, [r7, #32]
          break;
 8002a72:	e01f      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	623b      	str	r3, [r7, #32]
          break;
 8002a7c:	e01a      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d102      	bne.n	8002a8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a86:	2304      	movs	r3, #4
 8002a88:	623b      	str	r3, [r7, #32]
          break;
 8002a8a:	e013      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a94:	2308      	movs	r3, #8
 8002a96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	611a      	str	r2, [r3, #16]
          break;
 8002a9e:	e009      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	615a      	str	r2, [r3, #20]
          break;
 8002aaa:	e003      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002aac:	2300      	movs	r3, #0
 8002aae:	623b      	str	r3, [r7, #32]
          break;
 8002ab0:	e000      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          break;
 8002ab2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2bff      	cmp	r3, #255	@ 0xff
 8002ab8:	d801      	bhi.n	8002abe <HAL_GPIO_Init+0x13a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	e001      	b.n	8002ac2 <HAL_GPIO_Init+0x13e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2bff      	cmp	r3, #255	@ 0xff
 8002ac8:	d802      	bhi.n	8002ad0 <HAL_GPIO_Init+0x14c>
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	e002      	b.n	8002ad6 <HAL_GPIO_Init+0x152>
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	3b08      	subs	r3, #8
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	210f      	movs	r1, #15
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	6a39      	ldr	r1, [r7, #32]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	fa01 f303 	lsl.w	r3, r1, r3
 8002af0:	431a      	orrs	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80b1 	beq.w	8002c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b04:	4b4d      	ldr	r3, [pc, #308]	@ (8002c3c <HAL_GPIO_Init+0x2b8>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	4a4c      	ldr	r2, [pc, #304]	@ (8002c3c <HAL_GPIO_Init+0x2b8>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6193      	str	r3, [r2, #24]
 8002b10:	4b4a      	ldr	r3, [pc, #296]	@ (8002c3c <HAL_GPIO_Init+0x2b8>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b1c:	4a48      	ldr	r2, [pc, #288]	@ (8002c40 <HAL_GPIO_Init+0x2bc>)
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	3302      	adds	r3, #2
 8002b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	220f      	movs	r2, #15
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a40      	ldr	r2, [pc, #256]	@ (8002c44 <HAL_GPIO_Init+0x2c0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d013      	beq.n	8002b70 <HAL_GPIO_Init+0x1ec>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c48 <HAL_GPIO_Init+0x2c4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00d      	beq.n	8002b6c <HAL_GPIO_Init+0x1e8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a3e      	ldr	r2, [pc, #248]	@ (8002c4c <HAL_GPIO_Init+0x2c8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d007      	beq.n	8002b68 <HAL_GPIO_Init+0x1e4>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a3d      	ldr	r2, [pc, #244]	@ (8002c50 <HAL_GPIO_Init+0x2cc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d101      	bne.n	8002b64 <HAL_GPIO_Init+0x1e0>
 8002b60:	2303      	movs	r3, #3
 8002b62:	e006      	b.n	8002b72 <HAL_GPIO_Init+0x1ee>
 8002b64:	2304      	movs	r3, #4
 8002b66:	e004      	b.n	8002b72 <HAL_GPIO_Init+0x1ee>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e002      	b.n	8002b72 <HAL_GPIO_Init+0x1ee>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <HAL_GPIO_Init+0x1ee>
 8002b70:	2300      	movs	r3, #0
 8002b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b74:	f002 0203 	and.w	r2, r2, #3
 8002b78:	0092      	lsls	r2, r2, #2
 8002b7a:	4093      	lsls	r3, r2
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b82:	492f      	ldr	r1, [pc, #188]	@ (8002c40 <HAL_GPIO_Init+0x2bc>)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	3302      	adds	r3, #2
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d006      	beq.n	8002baa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	492c      	ldr	r1, [pc, #176]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002baa:	4b2a      	ldr	r3, [pc, #168]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	4928      	ldr	r1, [pc, #160]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d006      	beq.n	8002bd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bc4:	4b23      	ldr	r3, [pc, #140]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4922      	ldr	r1, [pc, #136]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60cb      	str	r3, [r1, #12]
 8002bd0:	e006      	b.n	8002be0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bd2:	4b20      	ldr	r3, [pc, #128]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	491e      	ldr	r1, [pc, #120]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bec:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	4918      	ldr	r1, [pc, #96]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bfa:	4b16      	ldr	r3, [pc, #88]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	4914      	ldr	r1, [pc, #80]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d021      	beq.n	8002c58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c14:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	490e      	ldr	r1, [pc, #56]	@ (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]
 8002c20:	e021      	b.n	8002c66 <HAL_GPIO_Init+0x2e2>
 8002c22:	bf00      	nop
 8002c24:	10320000 	.word	0x10320000
 8002c28:	10310000 	.word	0x10310000
 8002c2c:	10220000 	.word	0x10220000
 8002c30:	10210000 	.word	0x10210000
 8002c34:	10120000 	.word	0x10120000
 8002c38:	10110000 	.word	0x10110000
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40010000 	.word	0x40010000
 8002c44:	40010800 	.word	0x40010800
 8002c48:	40010c00 	.word	0x40010c00
 8002c4c:	40011000 	.word	0x40011000
 8002c50:	40011400 	.word	0x40011400
 8002c54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c58:	4b0b      	ldr	r3, [pc, #44]	@ (8002c88 <HAL_GPIO_Init+0x304>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	4909      	ldr	r1, [pc, #36]	@ (8002c88 <HAL_GPIO_Init+0x304>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	3301      	adds	r3, #1
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f47f ae8e 	bne.w	8002998 <HAL_GPIO_Init+0x14>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	372c      	adds	r7, #44	@ 0x2c
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	40010400 	.word	0x40010400

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e272      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8087 	beq.w	8002dba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cac:	4b92      	ldr	r3, [pc, #584]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d00c      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cb8:	4b8f      	ldr	r3, [pc, #572]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d112      	bne.n	8002cea <HAL_RCC_OscConfig+0x5e>
 8002cc4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd0:	d10b      	bne.n	8002cea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd2:	4b89      	ldr	r3, [pc, #548]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d06c      	beq.n	8002db8 <HAL_RCC_OscConfig+0x12c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d168      	bne.n	8002db8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e24c      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf2:	d106      	bne.n	8002d02 <HAL_RCC_OscConfig+0x76>
 8002cf4:	4b80      	ldr	r3, [pc, #512]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	e02e      	b.n	8002d60 <HAL_RCC_OscConfig+0xd4>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x98>
 8002d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a7a      	ldr	r2, [pc, #488]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b78      	ldr	r3, [pc, #480]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a77      	ldr	r2, [pc, #476]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e01d      	b.n	8002d60 <HAL_RCC_OscConfig+0xd4>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0xbc>
 8002d2e:	4b72      	ldr	r3, [pc, #456]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a71      	ldr	r2, [pc, #452]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e00b      	b.n	8002d60 <HAL_RCC_OscConfig+0xd4>
 8002d48:	4b6b      	ldr	r3, [pc, #428]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b68      	ldr	r3, [pc, #416]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a67      	ldr	r2, [pc, #412]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7ff fd1e 	bl	80027a8 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d70:	f7ff fd1a 	bl	80027a8 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	@ 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e200      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b5d      	ldr	r3, [pc, #372]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0xe4>
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7ff fd0a 	bl	80027a8 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d98:	f7ff fd06 	bl	80027a8 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	@ 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e1ec      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	4b53      	ldr	r3, [pc, #332]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x10c>
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d063      	beq.n	8002e8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dc6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dd2:	4b49      	ldr	r3, [pc, #292]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d11c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x18c>
 8002dde:	4b46      	ldr	r3, [pc, #280]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d116      	bne.n	8002e18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_RCC_OscConfig+0x176>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e1c0      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e02:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4939      	ldr	r1, [pc, #228]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	e03a      	b.n	8002e8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e20:	4b36      	ldr	r3, [pc, #216]	@ (8002efc <HAL_RCC_OscConfig+0x270>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7ff fcbf 	bl	80027a8 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2e:	f7ff fcbb 	bl	80027a8 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1a1      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e40:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4927      	ldr	r1, [pc, #156]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]
 8002e60:	e015      	b.n	8002e8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e62:	4b26      	ldr	r3, [pc, #152]	@ (8002efc <HAL_RCC_OscConfig+0x270>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7ff fc9e 	bl	80027a8 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e70:	f7ff fc9a 	bl	80027a8 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e180      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d03a      	beq.n	8002f10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d019      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea2:	4b17      	ldr	r3, [pc, #92]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea8:	f7ff fc7e 	bl	80027a8 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7ff fc7a 	bl	80027a8 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e160      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ece:	2001      	movs	r0, #1
 8002ed0:	f000 fa9c 	bl	800340c <RCC_Delay>
 8002ed4:	e01c      	b.n	8002f10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002edc:	f7ff fc64 	bl	80027a8 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee2:	e00f      	b.n	8002f04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee4:	f7ff fc60 	bl	80027a8 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d908      	bls.n	8002f04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e146      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	42420000 	.word	0x42420000
 8002f00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f04:	4b92      	ldr	r3, [pc, #584]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e9      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80a6 	beq.w	800306a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f22:	4b8b      	ldr	r3, [pc, #556]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10d      	bne.n	8002f4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	4b88      	ldr	r3, [pc, #544]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4a87      	ldr	r2, [pc, #540]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	61d3      	str	r3, [r2, #28]
 8002f3a:	4b85      	ldr	r3, [pc, #532]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f46:	2301      	movs	r3, #1
 8002f48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4a:	4b82      	ldr	r3, [pc, #520]	@ (8003154 <HAL_RCC_OscConfig+0x4c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d118      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f56:	4b7f      	ldr	r3, [pc, #508]	@ (8003154 <HAL_RCC_OscConfig+0x4c8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8003154 <HAL_RCC_OscConfig+0x4c8>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f62:	f7ff fc21 	bl	80027a8 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6a:	f7ff fc1d 	bl	80027a8 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b64      	cmp	r3, #100	@ 0x64
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e103      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7c:	4b75      	ldr	r3, [pc, #468]	@ (8003154 <HAL_RCC_OscConfig+0x4c8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d106      	bne.n	8002f9e <HAL_RCC_OscConfig+0x312>
 8002f90:	4b6f      	ldr	r3, [pc, #444]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4a6e      	ldr	r2, [pc, #440]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6213      	str	r3, [r2, #32]
 8002f9c:	e02d      	b.n	8002ffa <HAL_RCC_OscConfig+0x36e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x334>
 8002fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	4a69      	ldr	r2, [pc, #420]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	6213      	str	r3, [r2, #32]
 8002fb2:	4b67      	ldr	r3, [pc, #412]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	4a66      	ldr	r2, [pc, #408]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	f023 0304 	bic.w	r3, r3, #4
 8002fbc:	6213      	str	r3, [r2, #32]
 8002fbe:	e01c      	b.n	8002ffa <HAL_RCC_OscConfig+0x36e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x356>
 8002fc8:	4b61      	ldr	r3, [pc, #388]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4a60      	ldr	r2, [pc, #384]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	f043 0304 	orr.w	r3, r3, #4
 8002fd2:	6213      	str	r3, [r2, #32]
 8002fd4:	4b5e      	ldr	r3, [pc, #376]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4a5d      	ldr	r2, [pc, #372]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6213      	str	r3, [r2, #32]
 8002fe0:	e00b      	b.n	8002ffa <HAL_RCC_OscConfig+0x36e>
 8002fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a5a      	ldr	r2, [pc, #360]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	6213      	str	r3, [r2, #32]
 8002fee:	4b58      	ldr	r3, [pc, #352]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a57      	ldr	r2, [pc, #348]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	f023 0304 	bic.w	r3, r3, #4
 8002ff8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d015      	beq.n	800302e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003002:	f7ff fbd1 	bl	80027a8 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7ff fbcd 	bl	80027a8 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0b1      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	4b4b      	ldr	r3, [pc, #300]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ee      	beq.n	800300a <HAL_RCC_OscConfig+0x37e>
 800302c:	e014      	b.n	8003058 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302e:	f7ff fbbb 	bl	80027a8 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003034:	e00a      	b.n	800304c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7ff fbb7 	bl	80027a8 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e09b      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304c:	4b40      	ldr	r3, [pc, #256]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1ee      	bne.n	8003036 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d105      	bne.n	800306a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305e:	4b3c      	ldr	r3, [pc, #240]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4a3b      	ldr	r2, [pc, #236]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003068:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8087 	beq.w	8003182 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003074:	4b36      	ldr	r3, [pc, #216]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b08      	cmp	r3, #8
 800307e:	d061      	beq.n	8003144 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d146      	bne.n	8003116 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003088:	4b33      	ldr	r3, [pc, #204]	@ (8003158 <HAL_RCC_OscConfig+0x4cc>)
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308e:	f7ff fb8b 	bl	80027a8 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003096:	f7ff fb87 	bl	80027a8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e06d      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a8:	4b29      	ldr	r3, [pc, #164]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f0      	bne.n	8003096 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030bc:	d108      	bne.n	80030d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030be:	4b24      	ldr	r3, [pc, #144]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	4921      	ldr	r1, [pc, #132]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a19      	ldr	r1, [r3, #32]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	430b      	orrs	r3, r1
 80030e2:	491b      	ldr	r1, [pc, #108]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <HAL_RCC_OscConfig+0x4cc>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7ff fb5b 	bl	80027a8 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f6:	f7ff fb57 	bl	80027a8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e03d      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003108:	4b11      	ldr	r3, [pc, #68]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x46a>
 8003114:	e035      	b.n	8003182 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003116:	4b10      	ldr	r3, [pc, #64]	@ (8003158 <HAL_RCC_OscConfig+0x4cc>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7ff fb44 	bl	80027a8 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003124:	f7ff fb40 	bl	80027a8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e026      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x498>
 8003142:	e01e      	b.n	8003182 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d107      	bne.n	800315c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e019      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
 8003150:	40021000 	.word	0x40021000
 8003154:	40007000 	.word	0x40007000
 8003158:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800315c:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <HAL_RCC_OscConfig+0x500>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	429a      	cmp	r2, r3
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d001      	beq.n	8003182 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000

08003190 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0d0      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d910      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b67      	ldr	r3, [pc, #412]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 0207 	bic.w	r2, r3, #7
 80031ba:	4965      	ldr	r1, [pc, #404]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b63      	ldr	r3, [pc, #396]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0b8      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d020      	beq.n	8003222 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ec:	4b59      	ldr	r3, [pc, #356]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4a58      	ldr	r2, [pc, #352]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003204:	4b53      	ldr	r3, [pc, #332]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4a52      	ldr	r2, [pc, #328]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800320e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b50      	ldr	r3, [pc, #320]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	494d      	ldr	r1, [pc, #308]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d040      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	4b47      	ldr	r3, [pc, #284]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d115      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e07f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	4b41      	ldr	r3, [pc, #260]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e073      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325e:	4b3d      	ldr	r3, [pc, #244]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e06b      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326e:	4b39      	ldr	r3, [pc, #228]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f023 0203 	bic.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4936      	ldr	r1, [pc, #216]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	4313      	orrs	r3, r2
 800327e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003280:	f7ff fa92 	bl	80027a8 <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	e00a      	b.n	800329e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003288:	f7ff fa8e 	bl	80027a8 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e053      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	4b2d      	ldr	r3, [pc, #180]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 020c 	and.w	r2, r3, #12
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d1eb      	bne.n	8003288 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032b0:	4b27      	ldr	r3, [pc, #156]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d210      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b24      	ldr	r3, [pc, #144]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 0207 	bic.w	r2, r3, #7
 80032c6:	4922      	ldr	r1, [pc, #136]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b20      	ldr	r3, [pc, #128]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e032      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b19      	ldr	r3, [pc, #100]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4916      	ldr	r1, [pc, #88]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800330a:	4b12      	ldr	r3, [pc, #72]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	490e      	ldr	r1, [pc, #56]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800331e:	f000 f821 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8003322:	4602      	mov	r2, r0
 8003324:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	490a      	ldr	r1, [pc, #40]	@ (8003358 <HAL_RCC_ClockConfig+0x1c8>)
 8003330:	5ccb      	ldrb	r3, [r1, r3]
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	4a09      	ldr	r2, [pc, #36]	@ (800335c <HAL_RCC_ClockConfig+0x1cc>)
 8003338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800333a:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <HAL_RCC_ClockConfig+0x1d0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff f9f0 	bl	8002724 <HAL_InitTick>

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40022000 	.word	0x40022000
 8003354:	40021000 	.word	0x40021000
 8003358:	08005220 	.word	0x08005220
 800335c:	20000060 	.word	0x20000060
 8003360:	20000064 	.word	0x20000064

08003364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800337e:	4b1e      	ldr	r3, [pc, #120]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b04      	cmp	r3, #4
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x30>
 800338e:	2b08      	cmp	r3, #8
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x36>
 8003392:	e027      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003394:	4b19      	ldr	r3, [pc, #100]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x98>)
 8003396:	613b      	str	r3, [r7, #16]
      break;
 8003398:	e027      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	0c9b      	lsrs	r3, r3, #18
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	4a17      	ldr	r2, [pc, #92]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033a4:	5cd3      	ldrb	r3, [r2, r3]
 80033a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d010      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033b2:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	0c5b      	lsrs	r3, r3, #17
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	4a11      	ldr	r2, [pc, #68]	@ (8003404 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033be:	5cd3      	ldrb	r3, [r2, r3]
 80033c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a0d      	ldr	r2, [pc, #52]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x98>)
 80033c6:	fb03 f202 	mul.w	r2, r3, r2
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e004      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033d8:	fb02 f303 	mul.w	r3, r2, r3
 80033dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	613b      	str	r3, [r7, #16]
      break;
 80033e2:	e002      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033e4:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x98>)
 80033e6:	613b      	str	r3, [r7, #16]
      break;
 80033e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ea:	693b      	ldr	r3, [r7, #16]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	007a1200 	.word	0x007a1200
 8003400:	08005230 	.word	0x08005230
 8003404:	08005240 	.word	0x08005240
 8003408:	003d0900 	.word	0x003d0900

0800340c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003414:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <RCC_Delay+0x34>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <RCC_Delay+0x38>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	0a5b      	lsrs	r3, r3, #9
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003428:	bf00      	nop
  }
  while (Delay --);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e5a      	subs	r2, r3, #1
 800342e:	60fa      	str	r2, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f9      	bne.n	8003428 <RCC_Delay+0x1c>
}
 8003434:	bf00      	nop
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	20000060 	.word	0x20000060
 8003444:	10624dd3 	.word	0x10624dd3

08003448 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e041      	b.n	80034de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fe f864 	bl	800153c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f000 fac2 	bl	8003a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <HAL_TIM_PWM_Start+0x24>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e022      	b.n	8003552 <HAL_TIM_PWM_Start+0x6a>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b04      	cmp	r3, #4
 8003510:	d109      	bne.n	8003526 <HAL_TIM_PWM_Start+0x3e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	e015      	b.n	8003552 <HAL_TIM_PWM_Start+0x6a>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d109      	bne.n	8003540 <HAL_TIM_PWM_Start+0x58>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	bf14      	ite	ne
 8003538:	2301      	movne	r3, #1
 800353a:	2300      	moveq	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	e008      	b.n	8003552 <HAL_TIM_PWM_Start+0x6a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	bf14      	ite	ne
 800354c:	2301      	movne	r3, #1
 800354e:	2300      	moveq	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e05e      	b.n	8003618 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d104      	bne.n	800356a <HAL_TIM_PWM_Start+0x82>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003568:	e013      	b.n	8003592 <HAL_TIM_PWM_Start+0xaa>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b04      	cmp	r3, #4
 800356e:	d104      	bne.n	800357a <HAL_TIM_PWM_Start+0x92>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003578:	e00b      	b.n	8003592 <HAL_TIM_PWM_Start+0xaa>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d104      	bne.n	800358a <HAL_TIM_PWM_Start+0xa2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003588:	e003      	b.n	8003592 <HAL_TIM_PWM_Start+0xaa>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2201      	movs	r2, #1
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fc2e 	bl	8003dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003620 <HAL_TIM_PWM_Start+0x138>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d107      	bne.n	80035ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a18      	ldr	r2, [pc, #96]	@ (8003620 <HAL_TIM_PWM_Start+0x138>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00e      	beq.n	80035e2 <HAL_TIM_PWM_Start+0xfa>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035cc:	d009      	beq.n	80035e2 <HAL_TIM_PWM_Start+0xfa>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a14      	ldr	r2, [pc, #80]	@ (8003624 <HAL_TIM_PWM_Start+0x13c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d004      	beq.n	80035e2 <HAL_TIM_PWM_Start+0xfa>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a12      	ldr	r2, [pc, #72]	@ (8003628 <HAL_TIM_PWM_Start+0x140>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d111      	bne.n	8003606 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b06      	cmp	r3, #6
 80035f2:	d010      	beq.n	8003616 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003604:	e007      	b.n	8003616 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800

0800362c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e093      	b.n	8003768 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d106      	bne.n	800365a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7fd ff07 	bl	8001468 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003670:	f023 0307 	bic.w	r3, r3, #7
 8003674:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f000 f9c5 	bl	8003a10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ae:	f023 0303 	bic.w	r3, r3, #3
 80036b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	4313      	orrs	r3, r2
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80036cc:	f023 030c 	bic.w	r3, r3, #12
 80036d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	4313      	orrs	r3, r2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	011a      	lsls	r2, r3, #4
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	031b      	lsls	r3, r3, #12
 80036fc:	4313      	orrs	r3, r2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800370a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	4313      	orrs	r3, r2
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003780:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003788:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003790:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003798:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d110      	bne.n	80037c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80037a6:	7b7b      	ldrb	r3, [r7, #13]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d001      	beq.n	80037b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e069      	b.n	8003884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037c0:	e031      	b.n	8003826 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d110      	bne.n	80037ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037c8:	7bbb      	ldrb	r3, [r7, #14]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d102      	bne.n	80037d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037ce:	7b3b      	ldrb	r3, [r7, #12]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d001      	beq.n	80037d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e055      	b.n	8003884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037e8:	e01d      	b.n	8003826 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037f0:	7bbb      	ldrb	r3, [r7, #14]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037f6:	7b7b      	ldrb	r3, [r7, #13]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d102      	bne.n	8003802 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037fc:	7b3b      	ldrb	r3, [r7, #12]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d001      	beq.n	8003806 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e03e      	b.n	8003884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_TIM_Encoder_Start+0xc4>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b04      	cmp	r3, #4
 8003830:	d008      	beq.n	8003844 <HAL_TIM_Encoder_Start+0xd4>
 8003832:	e00f      	b.n	8003854 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2201      	movs	r2, #1
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fadd 	bl	8003dfc <TIM_CCxChannelCmd>
      break;
 8003842:	e016      	b.n	8003872 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2201      	movs	r2, #1
 800384a:	2104      	movs	r1, #4
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fad5 	bl	8003dfc <TIM_CCxChannelCmd>
      break;
 8003852:	e00e      	b.n	8003872 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f000 facd 	bl	8003dfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2201      	movs	r2, #1
 8003868:	2104      	movs	r1, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fac6 	bl	8003dfc <TIM_CCxChannelCmd>
      break;
 8003870:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0201 	orr.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e0ae      	b.n	8003a08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	f200 809f 	bhi.w	80039f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038ba:	a201      	add	r2, pc, #4	@ (adr r2, 80038c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	080038f5 	.word	0x080038f5
 80038c4:	080039f9 	.word	0x080039f9
 80038c8:	080039f9 	.word	0x080039f9
 80038cc:	080039f9 	.word	0x080039f9
 80038d0:	08003935 	.word	0x08003935
 80038d4:	080039f9 	.word	0x080039f9
 80038d8:	080039f9 	.word	0x080039f9
 80038dc:	080039f9 	.word	0x080039f9
 80038e0:	08003977 	.word	0x08003977
 80038e4:	080039f9 	.word	0x080039f9
 80038e8:	080039f9 	.word	0x080039f9
 80038ec:	080039f9 	.word	0x080039f9
 80038f0:	080039b7 	.word	0x080039b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f8f6 	bl	8003aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0208 	orr.w	r2, r2, #8
 800390e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0204 	bic.w	r2, r2, #4
 800391e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6999      	ldr	r1, [r3, #24]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	619a      	str	r2, [r3, #24]
      break;
 8003932:	e064      	b.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f93c 	bl	8003bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699a      	ldr	r2, [r3, #24]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800394e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800395e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6999      	ldr	r1, [r3, #24]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	021a      	lsls	r2, r3, #8
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	619a      	str	r2, [r3, #24]
      break;
 8003974:	e043      	b.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	4618      	mov	r0, r3
 800397e:	f000 f985 	bl	8003c8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0208 	orr.w	r2, r2, #8
 8003990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69da      	ldr	r2, [r3, #28]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0204 	bic.w	r2, r2, #4
 80039a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69d9      	ldr	r1, [r3, #28]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	61da      	str	r2, [r3, #28]
      break;
 80039b4:	e023      	b.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 f9cf 	bl	8003d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69da      	ldr	r2, [r3, #28]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69d9      	ldr	r1, [r3, #28]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	021a      	lsls	r2, r3, #8
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	61da      	str	r2, [r3, #28]
      break;
 80039f6:	e002      	b.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
      break;
 80039fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae0 <TIM_Base_SetConfig+0xd0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00b      	beq.n	8003a40 <TIM_Base_SetConfig+0x30>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2e:	d007      	beq.n	8003a40 <TIM_Base_SetConfig+0x30>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae4 <TIM_Base_SetConfig+0xd4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d003      	beq.n	8003a40 <TIM_Base_SetConfig+0x30>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae8 <TIM_Base_SetConfig+0xd8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d108      	bne.n	8003a52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a22      	ldr	r2, [pc, #136]	@ (8003ae0 <TIM_Base_SetConfig+0xd0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00b      	beq.n	8003a72 <TIM_Base_SetConfig+0x62>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a60:	d007      	beq.n	8003a72 <TIM_Base_SetConfig+0x62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae4 <TIM_Base_SetConfig+0xd4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d003      	beq.n	8003a72 <TIM_Base_SetConfig+0x62>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae8 <TIM_Base_SetConfig+0xd8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d108      	bne.n	8003a84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae0 <TIM_Base_SetConfig+0xd0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d103      	bne.n	8003ab8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f023 0201 	bic.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	611a      	str	r2, [r3, #16]
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800

08003aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f023 0201 	bic.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f023 0302 	bic.w	r3, r3, #2
 8003b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb4 <TIM_OC1_SetConfig+0xc8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d10c      	bne.n	8003b62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0308 	bic.w	r3, r3, #8
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f023 0304 	bic.w	r3, r3, #4
 8003b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a13      	ldr	r2, [pc, #76]	@ (8003bb4 <TIM_OC1_SetConfig+0xc8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d111      	bne.n	8003b8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	621a      	str	r2, [r3, #32]
}
 8003ba8:	bf00      	nop
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00

08003bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f023 0210 	bic.w	r2, r3, #16
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f023 0320 	bic.w	r3, r3, #32
 8003c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1d      	ldr	r2, [pc, #116]	@ (8003c88 <TIM_OC2_SetConfig+0xd0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d10d      	bne.n	8003c34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a14      	ldr	r2, [pc, #80]	@ (8003c88 <TIM_OC2_SetConfig+0xd0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d113      	bne.n	8003c64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	40012c00 	.word	0x40012c00

08003c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d5c <TIM_OC3_SetConfig+0xd0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d10d      	bne.n	8003d06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a14      	ldr	r2, [pc, #80]	@ (8003d5c <TIM_OC3_SetConfig+0xd0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d113      	bne.n	8003d36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40012c00 	.word	0x40012c00

08003d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	031b      	lsls	r3, r3, #12
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a0f      	ldr	r2, [pc, #60]	@ (8003df8 <TIM_OC4_SetConfig+0x98>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d109      	bne.n	8003dd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	019b      	lsls	r3, r3, #6
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	40012c00 	.word	0x40012c00

08003dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	2201      	movs	r2, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a1a      	ldr	r2, [r3, #32]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	401a      	ands	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a1a      	ldr	r2, [r3, #32]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e046      	b.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a16      	ldr	r2, [pc, #88]	@ (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00e      	beq.n	8003ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea8:	d009      	beq.n	8003ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a12      	ldr	r2, [pc, #72]	@ (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a10      	ldr	r2, [pc, #64]	@ (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800

08003f00 <calloc>:
 8003f00:	4b02      	ldr	r3, [pc, #8]	@ (8003f0c <calloc+0xc>)
 8003f02:	460a      	mov	r2, r1
 8003f04:	4601      	mov	r1, r0
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	f000 b802 	b.w	8003f10 <_calloc_r>
 8003f0c:	2000006c 	.word	0x2000006c

08003f10 <_calloc_r>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	fba1 5402 	umull	r5, r4, r1, r2
 8003f16:	b93c      	cbnz	r4, 8003f28 <_calloc_r+0x18>
 8003f18:	4629      	mov	r1, r5
 8003f1a:	f000 f83f 	bl	8003f9c <_malloc_r>
 8003f1e:	4606      	mov	r6, r0
 8003f20:	b928      	cbnz	r0, 8003f2e <_calloc_r+0x1e>
 8003f22:	2600      	movs	r6, #0
 8003f24:	4630      	mov	r0, r6
 8003f26:	bd70      	pop	{r4, r5, r6, pc}
 8003f28:	220c      	movs	r2, #12
 8003f2a:	6002      	str	r2, [r0, #0]
 8003f2c:	e7f9      	b.n	8003f22 <_calloc_r+0x12>
 8003f2e:	462a      	mov	r2, r5
 8003f30:	4621      	mov	r1, r4
 8003f32:	f000 f8bf 	bl	80040b4 <memset>
 8003f36:	e7f5      	b.n	8003f24 <_calloc_r+0x14>

08003f38 <malloc>:
 8003f38:	4b02      	ldr	r3, [pc, #8]	@ (8003f44 <malloc+0xc>)
 8003f3a:	4601      	mov	r1, r0
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	f000 b82d 	b.w	8003f9c <_malloc_r>
 8003f42:	bf00      	nop
 8003f44:	2000006c 	.word	0x2000006c

08003f48 <free>:
 8003f48:	4b02      	ldr	r3, [pc, #8]	@ (8003f54 <free+0xc>)
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	f000 b8f5 	b.w	800413c <_free_r>
 8003f52:	bf00      	nop
 8003f54:	2000006c 	.word	0x2000006c

08003f58 <sbrk_aligned>:
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	4e0f      	ldr	r6, [pc, #60]	@ (8003f98 <sbrk_aligned+0x40>)
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	6831      	ldr	r1, [r6, #0]
 8003f60:	4605      	mov	r5, r0
 8003f62:	b911      	cbnz	r1, 8003f6a <sbrk_aligned+0x12>
 8003f64:	f000 f8ae 	bl	80040c4 <_sbrk_r>
 8003f68:	6030      	str	r0, [r6, #0]
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f000 f8a9 	bl	80040c4 <_sbrk_r>
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	d103      	bne.n	8003f7e <sbrk_aligned+0x26>
 8003f76:	f04f 34ff 	mov.w	r4, #4294967295
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	bd70      	pop	{r4, r5, r6, pc}
 8003f7e:	1cc4      	adds	r4, r0, #3
 8003f80:	f024 0403 	bic.w	r4, r4, #3
 8003f84:	42a0      	cmp	r0, r4
 8003f86:	d0f8      	beq.n	8003f7a <sbrk_aligned+0x22>
 8003f88:	1a21      	subs	r1, r4, r0
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f000 f89a 	bl	80040c4 <_sbrk_r>
 8003f90:	3001      	adds	r0, #1
 8003f92:	d1f2      	bne.n	8003f7a <sbrk_aligned+0x22>
 8003f94:	e7ef      	b.n	8003f76 <sbrk_aligned+0x1e>
 8003f96:	bf00      	nop
 8003f98:	20000274 	.word	0x20000274

08003f9c <_malloc_r>:
 8003f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fa0:	1ccd      	adds	r5, r1, #3
 8003fa2:	f025 0503 	bic.w	r5, r5, #3
 8003fa6:	3508      	adds	r5, #8
 8003fa8:	2d0c      	cmp	r5, #12
 8003faa:	bf38      	it	cc
 8003fac:	250c      	movcc	r5, #12
 8003fae:	2d00      	cmp	r5, #0
 8003fb0:	4606      	mov	r6, r0
 8003fb2:	db01      	blt.n	8003fb8 <_malloc_r+0x1c>
 8003fb4:	42a9      	cmp	r1, r5
 8003fb6:	d904      	bls.n	8003fc2 <_malloc_r+0x26>
 8003fb8:	230c      	movs	r3, #12
 8003fba:	6033      	str	r3, [r6, #0]
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004098 <_malloc_r+0xfc>
 8003fc6:	f000 f869 	bl	800409c <__malloc_lock>
 8003fca:	f8d8 3000 	ldr.w	r3, [r8]
 8003fce:	461c      	mov	r4, r3
 8003fd0:	bb44      	cbnz	r4, 8004024 <_malloc_r+0x88>
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	f7ff ffbf 	bl	8003f58 <sbrk_aligned>
 8003fda:	1c43      	adds	r3, r0, #1
 8003fdc:	4604      	mov	r4, r0
 8003fde:	d158      	bne.n	8004092 <_malloc_r+0xf6>
 8003fe0:	f8d8 4000 	ldr.w	r4, [r8]
 8003fe4:	4627      	mov	r7, r4
 8003fe6:	2f00      	cmp	r7, #0
 8003fe8:	d143      	bne.n	8004072 <_malloc_r+0xd6>
 8003fea:	2c00      	cmp	r4, #0
 8003fec:	d04b      	beq.n	8004086 <_malloc_r+0xea>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	4639      	mov	r1, r7
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	eb04 0903 	add.w	r9, r4, r3
 8003ff8:	f000 f864 	bl	80040c4 <_sbrk_r>
 8003ffc:	4581      	cmp	r9, r0
 8003ffe:	d142      	bne.n	8004086 <_malloc_r+0xea>
 8004000:	6821      	ldr	r1, [r4, #0]
 8004002:	4630      	mov	r0, r6
 8004004:	1a6d      	subs	r5, r5, r1
 8004006:	4629      	mov	r1, r5
 8004008:	f7ff ffa6 	bl	8003f58 <sbrk_aligned>
 800400c:	3001      	adds	r0, #1
 800400e:	d03a      	beq.n	8004086 <_malloc_r+0xea>
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	442b      	add	r3, r5
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	f8d8 3000 	ldr.w	r3, [r8]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	bb62      	cbnz	r2, 8004078 <_malloc_r+0xdc>
 800401e:	f8c8 7000 	str.w	r7, [r8]
 8004022:	e00f      	b.n	8004044 <_malloc_r+0xa8>
 8004024:	6822      	ldr	r2, [r4, #0]
 8004026:	1b52      	subs	r2, r2, r5
 8004028:	d420      	bmi.n	800406c <_malloc_r+0xd0>
 800402a:	2a0b      	cmp	r2, #11
 800402c:	d917      	bls.n	800405e <_malloc_r+0xc2>
 800402e:	1961      	adds	r1, r4, r5
 8004030:	42a3      	cmp	r3, r4
 8004032:	6025      	str	r5, [r4, #0]
 8004034:	bf18      	it	ne
 8004036:	6059      	strne	r1, [r3, #4]
 8004038:	6863      	ldr	r3, [r4, #4]
 800403a:	bf08      	it	eq
 800403c:	f8c8 1000 	streq.w	r1, [r8]
 8004040:	5162      	str	r2, [r4, r5]
 8004042:	604b      	str	r3, [r1, #4]
 8004044:	4630      	mov	r0, r6
 8004046:	f000 f82f 	bl	80040a8 <__malloc_unlock>
 800404a:	f104 000b 	add.w	r0, r4, #11
 800404e:	1d23      	adds	r3, r4, #4
 8004050:	f020 0007 	bic.w	r0, r0, #7
 8004054:	1ac2      	subs	r2, r0, r3
 8004056:	bf1c      	itt	ne
 8004058:	1a1b      	subne	r3, r3, r0
 800405a:	50a3      	strne	r3, [r4, r2]
 800405c:	e7af      	b.n	8003fbe <_malloc_r+0x22>
 800405e:	6862      	ldr	r2, [r4, #4]
 8004060:	42a3      	cmp	r3, r4
 8004062:	bf0c      	ite	eq
 8004064:	f8c8 2000 	streq.w	r2, [r8]
 8004068:	605a      	strne	r2, [r3, #4]
 800406a:	e7eb      	b.n	8004044 <_malloc_r+0xa8>
 800406c:	4623      	mov	r3, r4
 800406e:	6864      	ldr	r4, [r4, #4]
 8004070:	e7ae      	b.n	8003fd0 <_malloc_r+0x34>
 8004072:	463c      	mov	r4, r7
 8004074:	687f      	ldr	r7, [r7, #4]
 8004076:	e7b6      	b.n	8003fe6 <_malloc_r+0x4a>
 8004078:	461a      	mov	r2, r3
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	42a3      	cmp	r3, r4
 800407e:	d1fb      	bne.n	8004078 <_malloc_r+0xdc>
 8004080:	2300      	movs	r3, #0
 8004082:	6053      	str	r3, [r2, #4]
 8004084:	e7de      	b.n	8004044 <_malloc_r+0xa8>
 8004086:	230c      	movs	r3, #12
 8004088:	4630      	mov	r0, r6
 800408a:	6033      	str	r3, [r6, #0]
 800408c:	f000 f80c 	bl	80040a8 <__malloc_unlock>
 8004090:	e794      	b.n	8003fbc <_malloc_r+0x20>
 8004092:	6005      	str	r5, [r0, #0]
 8004094:	e7d6      	b.n	8004044 <_malloc_r+0xa8>
 8004096:	bf00      	nop
 8004098:	20000278 	.word	0x20000278

0800409c <__malloc_lock>:
 800409c:	4801      	ldr	r0, [pc, #4]	@ (80040a4 <__malloc_lock+0x8>)
 800409e:	f000 b84b 	b.w	8004138 <__retarget_lock_acquire_recursive>
 80040a2:	bf00      	nop
 80040a4:	200003b8 	.word	0x200003b8

080040a8 <__malloc_unlock>:
 80040a8:	4801      	ldr	r0, [pc, #4]	@ (80040b0 <__malloc_unlock+0x8>)
 80040aa:	f000 b846 	b.w	800413a <__retarget_lock_release_recursive>
 80040ae:	bf00      	nop
 80040b0:	200003b8 	.word	0x200003b8

080040b4 <memset>:
 80040b4:	4603      	mov	r3, r0
 80040b6:	4402      	add	r2, r0
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d100      	bne.n	80040be <memset+0xa>
 80040bc:	4770      	bx	lr
 80040be:	f803 1b01 	strb.w	r1, [r3], #1
 80040c2:	e7f9      	b.n	80040b8 <memset+0x4>

080040c4 <_sbrk_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	2300      	movs	r3, #0
 80040c8:	4d05      	ldr	r5, [pc, #20]	@ (80040e0 <_sbrk_r+0x1c>)
 80040ca:	4604      	mov	r4, r0
 80040cc:	4608      	mov	r0, r1
 80040ce:	602b      	str	r3, [r5, #0]
 80040d0:	f7fd fab2 	bl	8001638 <_sbrk>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_sbrk_r+0x1a>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	b103      	cbz	r3, 80040de <_sbrk_r+0x1a>
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	200003b4 	.word	0x200003b4

080040e4 <__errno>:
 80040e4:	4b01      	ldr	r3, [pc, #4]	@ (80040ec <__errno+0x8>)
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	2000006c 	.word	0x2000006c

080040f0 <__libc_init_array>:
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	2600      	movs	r6, #0
 80040f4:	4d0c      	ldr	r5, [pc, #48]	@ (8004128 <__libc_init_array+0x38>)
 80040f6:	4c0d      	ldr	r4, [pc, #52]	@ (800412c <__libc_init_array+0x3c>)
 80040f8:	1b64      	subs	r4, r4, r5
 80040fa:	10a4      	asrs	r4, r4, #2
 80040fc:	42a6      	cmp	r6, r4
 80040fe:	d109      	bne.n	8004114 <__libc_init_array+0x24>
 8004100:	f001 f882 	bl	8005208 <_init>
 8004104:	2600      	movs	r6, #0
 8004106:	4d0a      	ldr	r5, [pc, #40]	@ (8004130 <__libc_init_array+0x40>)
 8004108:	4c0a      	ldr	r4, [pc, #40]	@ (8004134 <__libc_init_array+0x44>)
 800410a:	1b64      	subs	r4, r4, r5
 800410c:	10a4      	asrs	r4, r4, #2
 800410e:	42a6      	cmp	r6, r4
 8004110:	d105      	bne.n	800411e <__libc_init_array+0x2e>
 8004112:	bd70      	pop	{r4, r5, r6, pc}
 8004114:	f855 3b04 	ldr.w	r3, [r5], #4
 8004118:	4798      	blx	r3
 800411a:	3601      	adds	r6, #1
 800411c:	e7ee      	b.n	80040fc <__libc_init_array+0xc>
 800411e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004122:	4798      	blx	r3
 8004124:	3601      	adds	r6, #1
 8004126:	e7f2      	b.n	800410e <__libc_init_array+0x1e>
 8004128:	08005420 	.word	0x08005420
 800412c:	08005420 	.word	0x08005420
 8004130:	08005420 	.word	0x08005420
 8004134:	08005424 	.word	0x08005424

08004138 <__retarget_lock_acquire_recursive>:
 8004138:	4770      	bx	lr

0800413a <__retarget_lock_release_recursive>:
 800413a:	4770      	bx	lr

0800413c <_free_r>:
 800413c:	b538      	push	{r3, r4, r5, lr}
 800413e:	4605      	mov	r5, r0
 8004140:	2900      	cmp	r1, #0
 8004142:	d040      	beq.n	80041c6 <_free_r+0x8a>
 8004144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004148:	1f0c      	subs	r4, r1, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	bfb8      	it	lt
 800414e:	18e4      	addlt	r4, r4, r3
 8004150:	f7ff ffa4 	bl	800409c <__malloc_lock>
 8004154:	4a1c      	ldr	r2, [pc, #112]	@ (80041c8 <_free_r+0x8c>)
 8004156:	6813      	ldr	r3, [r2, #0]
 8004158:	b933      	cbnz	r3, 8004168 <_free_r+0x2c>
 800415a:	6063      	str	r3, [r4, #4]
 800415c:	6014      	str	r4, [r2, #0]
 800415e:	4628      	mov	r0, r5
 8004160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004164:	f7ff bfa0 	b.w	80040a8 <__malloc_unlock>
 8004168:	42a3      	cmp	r3, r4
 800416a:	d908      	bls.n	800417e <_free_r+0x42>
 800416c:	6820      	ldr	r0, [r4, #0]
 800416e:	1821      	adds	r1, r4, r0
 8004170:	428b      	cmp	r3, r1
 8004172:	bf01      	itttt	eq
 8004174:	6819      	ldreq	r1, [r3, #0]
 8004176:	685b      	ldreq	r3, [r3, #4]
 8004178:	1809      	addeq	r1, r1, r0
 800417a:	6021      	streq	r1, [r4, #0]
 800417c:	e7ed      	b.n	800415a <_free_r+0x1e>
 800417e:	461a      	mov	r2, r3
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	b10b      	cbz	r3, 8004188 <_free_r+0x4c>
 8004184:	42a3      	cmp	r3, r4
 8004186:	d9fa      	bls.n	800417e <_free_r+0x42>
 8004188:	6811      	ldr	r1, [r2, #0]
 800418a:	1850      	adds	r0, r2, r1
 800418c:	42a0      	cmp	r0, r4
 800418e:	d10b      	bne.n	80041a8 <_free_r+0x6c>
 8004190:	6820      	ldr	r0, [r4, #0]
 8004192:	4401      	add	r1, r0
 8004194:	1850      	adds	r0, r2, r1
 8004196:	4283      	cmp	r3, r0
 8004198:	6011      	str	r1, [r2, #0]
 800419a:	d1e0      	bne.n	800415e <_free_r+0x22>
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4408      	add	r0, r1
 80041a2:	6010      	str	r0, [r2, #0]
 80041a4:	6053      	str	r3, [r2, #4]
 80041a6:	e7da      	b.n	800415e <_free_r+0x22>
 80041a8:	d902      	bls.n	80041b0 <_free_r+0x74>
 80041aa:	230c      	movs	r3, #12
 80041ac:	602b      	str	r3, [r5, #0]
 80041ae:	e7d6      	b.n	800415e <_free_r+0x22>
 80041b0:	6820      	ldr	r0, [r4, #0]
 80041b2:	1821      	adds	r1, r4, r0
 80041b4:	428b      	cmp	r3, r1
 80041b6:	bf01      	itttt	eq
 80041b8:	6819      	ldreq	r1, [r3, #0]
 80041ba:	685b      	ldreq	r3, [r3, #4]
 80041bc:	1809      	addeq	r1, r1, r0
 80041be:	6021      	streq	r1, [r4, #0]
 80041c0:	6063      	str	r3, [r4, #4]
 80041c2:	6054      	str	r4, [r2, #4]
 80041c4:	e7cb      	b.n	800415e <_free_r+0x22>
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
 80041c8:	20000278 	.word	0x20000278

080041cc <cos>:
 80041cc:	b530      	push	{r4, r5, lr}
 80041ce:	4d20      	ldr	r5, [pc, #128]	@ (8004250 <cos+0x84>)
 80041d0:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80041d4:	42ac      	cmp	r4, r5
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	b087      	sub	sp, #28
 80041dc:	d806      	bhi.n	80041ec <cos+0x20>
 80041de:	2200      	movs	r2, #0
 80041e0:	2300      	movs	r3, #0
 80041e2:	b007      	add	sp, #28
 80041e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041e8:	f000 b87e 	b.w	80042e8 <__kernel_cos>
 80041ec:	4d19      	ldr	r5, [pc, #100]	@ (8004254 <cos+0x88>)
 80041ee:	42ac      	cmp	r4, r5
 80041f0:	d903      	bls.n	80041fa <cos+0x2e>
 80041f2:	f7fb ffb1 	bl	8000158 <__aeabi_dsub>
 80041f6:	b007      	add	sp, #28
 80041f8:	bd30      	pop	{r4, r5, pc}
 80041fa:	aa02      	add	r2, sp, #8
 80041fc:	f000 f9ec 	bl	80045d8 <__ieee754_rem_pio2>
 8004200:	f000 0003 	and.w	r0, r0, #3
 8004204:	2801      	cmp	r0, #1
 8004206:	d009      	beq.n	800421c <cos+0x50>
 8004208:	2802      	cmp	r0, #2
 800420a:	d011      	beq.n	8004230 <cos+0x64>
 800420c:	b9b8      	cbnz	r0, 800423e <cos+0x72>
 800420e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004216:	f000 f867 	bl	80042e8 <__kernel_cos>
 800421a:	e7ec      	b.n	80041f6 <cos+0x2a>
 800421c:	9000      	str	r0, [sp, #0]
 800421e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004226:	f000 f91f 	bl	8004468 <__kernel_sin>
 800422a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800422e:	e7e2      	b.n	80041f6 <cos+0x2a>
 8004230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004238:	f000 f856 	bl	80042e8 <__kernel_cos>
 800423c:	e7f5      	b.n	800422a <cos+0x5e>
 800423e:	2301      	movs	r3, #1
 8004240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800424a:	f000 f90d 	bl	8004468 <__kernel_sin>
 800424e:	e7d2      	b.n	80041f6 <cos+0x2a>
 8004250:	3fe921fb 	.word	0x3fe921fb
 8004254:	7fefffff 	.word	0x7fefffff

08004258 <sin>:
 8004258:	b530      	push	{r4, r5, lr}
 800425a:	4d20      	ldr	r5, [pc, #128]	@ (80042dc <sin+0x84>)
 800425c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004260:	42ac      	cmp	r4, r5
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	b087      	sub	sp, #28
 8004268:	d806      	bhi.n	8004278 <sin+0x20>
 800426a:	2300      	movs	r3, #0
 800426c:	2200      	movs	r2, #0
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	2300      	movs	r3, #0
 8004272:	f000 f8f9 	bl	8004468 <__kernel_sin>
 8004276:	e004      	b.n	8004282 <sin+0x2a>
 8004278:	4d19      	ldr	r5, [pc, #100]	@ (80042e0 <sin+0x88>)
 800427a:	42ac      	cmp	r4, r5
 800427c:	d903      	bls.n	8004286 <sin+0x2e>
 800427e:	f7fb ff6b 	bl	8000158 <__aeabi_dsub>
 8004282:	b007      	add	sp, #28
 8004284:	bd30      	pop	{r4, r5, pc}
 8004286:	aa02      	add	r2, sp, #8
 8004288:	f000 f9a6 	bl	80045d8 <__ieee754_rem_pio2>
 800428c:	f000 0003 	and.w	r0, r0, #3
 8004290:	2801      	cmp	r0, #1
 8004292:	d009      	beq.n	80042a8 <sin+0x50>
 8004294:	2802      	cmp	r0, #2
 8004296:	d00e      	beq.n	80042b6 <sin+0x5e>
 8004298:	b9c0      	cbnz	r0, 80042cc <sin+0x74>
 800429a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800429e:	2301      	movs	r3, #1
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042a6:	e7e4      	b.n	8004272 <sin+0x1a>
 80042a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042b0:	f000 f81a 	bl	80042e8 <__kernel_cos>
 80042b4:	e7e5      	b.n	8004282 <sin+0x2a>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042c2:	f000 f8d1 	bl	8004468 <__kernel_sin>
 80042c6:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80042ca:	e7da      	b.n	8004282 <sin+0x2a>
 80042cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042d4:	f000 f808 	bl	80042e8 <__kernel_cos>
 80042d8:	e7f5      	b.n	80042c6 <sin+0x6e>
 80042da:	bf00      	nop
 80042dc:	3fe921fb 	.word	0x3fe921fb
 80042e0:	7fefffff 	.word	0x7fefffff
 80042e4:	00000000 	.word	0x00000000

080042e8 <__kernel_cos>:
 80042e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ec:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80042f0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80042f4:	4680      	mov	r8, r0
 80042f6:	4689      	mov	r9, r1
 80042f8:	e9cd 2300 	strd	r2, r3, [sp]
 80042fc:	d204      	bcs.n	8004308 <__kernel_cos+0x20>
 80042fe:	f7fc fb7d 	bl	80009fc <__aeabi_d2iz>
 8004302:	2800      	cmp	r0, #0
 8004304:	f000 8086 	beq.w	8004414 <__kernel_cos+0x12c>
 8004308:	4642      	mov	r2, r8
 800430a:	464b      	mov	r3, r9
 800430c:	4640      	mov	r0, r8
 800430e:	4649      	mov	r1, r9
 8004310:	f7fc f8da 	bl	80004c8 <__aeabi_dmul>
 8004314:	2200      	movs	r2, #0
 8004316:	4b4e      	ldr	r3, [pc, #312]	@ (8004450 <__kernel_cos+0x168>)
 8004318:	4604      	mov	r4, r0
 800431a:	460d      	mov	r5, r1
 800431c:	f7fc f8d4 	bl	80004c8 <__aeabi_dmul>
 8004320:	a33f      	add	r3, pc, #252	@ (adr r3, 8004420 <__kernel_cos+0x138>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	4682      	mov	sl, r0
 8004328:	468b      	mov	fp, r1
 800432a:	4620      	mov	r0, r4
 800432c:	4629      	mov	r1, r5
 800432e:	f7fc f8cb 	bl	80004c8 <__aeabi_dmul>
 8004332:	a33d      	add	r3, pc, #244	@ (adr r3, 8004428 <__kernel_cos+0x140>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f7fb ff10 	bl	800015c <__adddf3>
 800433c:	4622      	mov	r2, r4
 800433e:	462b      	mov	r3, r5
 8004340:	f7fc f8c2 	bl	80004c8 <__aeabi_dmul>
 8004344:	a33a      	add	r3, pc, #232	@ (adr r3, 8004430 <__kernel_cos+0x148>)
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	f7fb ff05 	bl	8000158 <__aeabi_dsub>
 800434e:	4622      	mov	r2, r4
 8004350:	462b      	mov	r3, r5
 8004352:	f7fc f8b9 	bl	80004c8 <__aeabi_dmul>
 8004356:	a338      	add	r3, pc, #224	@ (adr r3, 8004438 <__kernel_cos+0x150>)
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f7fb fefe 	bl	800015c <__adddf3>
 8004360:	4622      	mov	r2, r4
 8004362:	462b      	mov	r3, r5
 8004364:	f7fc f8b0 	bl	80004c8 <__aeabi_dmul>
 8004368:	a335      	add	r3, pc, #212	@ (adr r3, 8004440 <__kernel_cos+0x158>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f7fb fef3 	bl	8000158 <__aeabi_dsub>
 8004372:	4622      	mov	r2, r4
 8004374:	462b      	mov	r3, r5
 8004376:	f7fc f8a7 	bl	80004c8 <__aeabi_dmul>
 800437a:	a333      	add	r3, pc, #204	@ (adr r3, 8004448 <__kernel_cos+0x160>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f7fb feec 	bl	800015c <__adddf3>
 8004384:	4622      	mov	r2, r4
 8004386:	462b      	mov	r3, r5
 8004388:	f7fc f89e 	bl	80004c8 <__aeabi_dmul>
 800438c:	4622      	mov	r2, r4
 800438e:	462b      	mov	r3, r5
 8004390:	f7fc f89a 	bl	80004c8 <__aeabi_dmul>
 8004394:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004398:	4604      	mov	r4, r0
 800439a:	460d      	mov	r5, r1
 800439c:	4640      	mov	r0, r8
 800439e:	4649      	mov	r1, r9
 80043a0:	f7fc f892 	bl	80004c8 <__aeabi_dmul>
 80043a4:	460b      	mov	r3, r1
 80043a6:	4602      	mov	r2, r0
 80043a8:	4629      	mov	r1, r5
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7fb fed4 	bl	8000158 <__aeabi_dsub>
 80043b0:	4b28      	ldr	r3, [pc, #160]	@ (8004454 <__kernel_cos+0x16c>)
 80043b2:	4680      	mov	r8, r0
 80043b4:	429e      	cmp	r6, r3
 80043b6:	4689      	mov	r9, r1
 80043b8:	d80e      	bhi.n	80043d8 <__kernel_cos+0xf0>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4650      	mov	r0, sl
 80043c0:	4659      	mov	r1, fp
 80043c2:	f7fb fec9 	bl	8000158 <__aeabi_dsub>
 80043c6:	4602      	mov	r2, r0
 80043c8:	2000      	movs	r0, #0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4922      	ldr	r1, [pc, #136]	@ (8004458 <__kernel_cos+0x170>)
 80043ce:	f7fb fec3 	bl	8000158 <__aeabi_dsub>
 80043d2:	b003      	add	sp, #12
 80043d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d8:	2400      	movs	r4, #0
 80043da:	4b20      	ldr	r3, [pc, #128]	@ (800445c <__kernel_cos+0x174>)
 80043dc:	4622      	mov	r2, r4
 80043de:	429e      	cmp	r6, r3
 80043e0:	bf8c      	ite	hi
 80043e2:	4d1f      	ldrhi	r5, [pc, #124]	@ (8004460 <__kernel_cos+0x178>)
 80043e4:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 80043e8:	462b      	mov	r3, r5
 80043ea:	2000      	movs	r0, #0
 80043ec:	491a      	ldr	r1, [pc, #104]	@ (8004458 <__kernel_cos+0x170>)
 80043ee:	f7fb feb3 	bl	8000158 <__aeabi_dsub>
 80043f2:	4622      	mov	r2, r4
 80043f4:	4606      	mov	r6, r0
 80043f6:	460f      	mov	r7, r1
 80043f8:	462b      	mov	r3, r5
 80043fa:	4650      	mov	r0, sl
 80043fc:	4659      	mov	r1, fp
 80043fe:	f7fb feab 	bl	8000158 <__aeabi_dsub>
 8004402:	4642      	mov	r2, r8
 8004404:	464b      	mov	r3, r9
 8004406:	f7fb fea7 	bl	8000158 <__aeabi_dsub>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4630      	mov	r0, r6
 8004410:	4639      	mov	r1, r7
 8004412:	e7dc      	b.n	80043ce <__kernel_cos+0xe6>
 8004414:	2000      	movs	r0, #0
 8004416:	4910      	ldr	r1, [pc, #64]	@ (8004458 <__kernel_cos+0x170>)
 8004418:	e7db      	b.n	80043d2 <__kernel_cos+0xea>
 800441a:	bf00      	nop
 800441c:	f3af 8000 	nop.w
 8004420:	be8838d4 	.word	0xbe8838d4
 8004424:	bda8fae9 	.word	0xbda8fae9
 8004428:	bdb4b1c4 	.word	0xbdb4b1c4
 800442c:	3e21ee9e 	.word	0x3e21ee9e
 8004430:	809c52ad 	.word	0x809c52ad
 8004434:	3e927e4f 	.word	0x3e927e4f
 8004438:	19cb1590 	.word	0x19cb1590
 800443c:	3efa01a0 	.word	0x3efa01a0
 8004440:	16c15177 	.word	0x16c15177
 8004444:	3f56c16c 	.word	0x3f56c16c
 8004448:	5555554c 	.word	0x5555554c
 800444c:	3fa55555 	.word	0x3fa55555
 8004450:	3fe00000 	.word	0x3fe00000
 8004454:	3fd33332 	.word	0x3fd33332
 8004458:	3ff00000 	.word	0x3ff00000
 800445c:	3fe90000 	.word	0x3fe90000
 8004460:	3fd20000 	.word	0x3fd20000
 8004464:	00000000 	.word	0x00000000

08004468 <__kernel_sin>:
 8004468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446c:	461f      	mov	r7, r3
 800446e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004472:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004476:	4604      	mov	r4, r0
 8004478:	460d      	mov	r5, r1
 800447a:	4616      	mov	r6, r2
 800447c:	b085      	sub	sp, #20
 800447e:	d203      	bcs.n	8004488 <__kernel_sin+0x20>
 8004480:	f7fc fabc 	bl	80009fc <__aeabi_d2iz>
 8004484:	2800      	cmp	r0, #0
 8004486:	d051      	beq.n	800452c <__kernel_sin+0xc4>
 8004488:	4622      	mov	r2, r4
 800448a:	462b      	mov	r3, r5
 800448c:	4620      	mov	r0, r4
 800448e:	4629      	mov	r1, r5
 8004490:	f7fc f81a 	bl	80004c8 <__aeabi_dmul>
 8004494:	4682      	mov	sl, r0
 8004496:	468b      	mov	fp, r1
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4620      	mov	r0, r4
 800449e:	4629      	mov	r1, r5
 80044a0:	f7fc f812 	bl	80004c8 <__aeabi_dmul>
 80044a4:	a33e      	add	r3, pc, #248	@ (adr r3, 80045a0 <__kernel_sin+0x138>)
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	4680      	mov	r8, r0
 80044ac:	4689      	mov	r9, r1
 80044ae:	4650      	mov	r0, sl
 80044b0:	4659      	mov	r1, fp
 80044b2:	f7fc f809 	bl	80004c8 <__aeabi_dmul>
 80044b6:	a33c      	add	r3, pc, #240	@ (adr r3, 80045a8 <__kernel_sin+0x140>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f7fb fe4c 	bl	8000158 <__aeabi_dsub>
 80044c0:	4652      	mov	r2, sl
 80044c2:	465b      	mov	r3, fp
 80044c4:	f7fc f800 	bl	80004c8 <__aeabi_dmul>
 80044c8:	a339      	add	r3, pc, #228	@ (adr r3, 80045b0 <__kernel_sin+0x148>)
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f7fb fe45 	bl	800015c <__adddf3>
 80044d2:	4652      	mov	r2, sl
 80044d4:	465b      	mov	r3, fp
 80044d6:	f7fb fff7 	bl	80004c8 <__aeabi_dmul>
 80044da:	a337      	add	r3, pc, #220	@ (adr r3, 80045b8 <__kernel_sin+0x150>)
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	f7fb fe3a 	bl	8000158 <__aeabi_dsub>
 80044e4:	4652      	mov	r2, sl
 80044e6:	465b      	mov	r3, fp
 80044e8:	f7fb ffee 	bl	80004c8 <__aeabi_dmul>
 80044ec:	a334      	add	r3, pc, #208	@ (adr r3, 80045c0 <__kernel_sin+0x158>)
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	f7fb fe33 	bl	800015c <__adddf3>
 80044f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80044f8:	e9cd 0100 	strd	r0, r1, [sp]
 80044fc:	b9db      	cbnz	r3, 8004536 <__kernel_sin+0xce>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4650      	mov	r0, sl
 8004504:	4659      	mov	r1, fp
 8004506:	f7fb ffdf 	bl	80004c8 <__aeabi_dmul>
 800450a:	a32f      	add	r3, pc, #188	@ (adr r3, 80045c8 <__kernel_sin+0x160>)
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	f7fb fe22 	bl	8000158 <__aeabi_dsub>
 8004514:	4642      	mov	r2, r8
 8004516:	464b      	mov	r3, r9
 8004518:	f7fb ffd6 	bl	80004c8 <__aeabi_dmul>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4620      	mov	r0, r4
 8004522:	4629      	mov	r1, r5
 8004524:	f7fb fe1a 	bl	800015c <__adddf3>
 8004528:	4604      	mov	r4, r0
 800452a:	460d      	mov	r5, r1
 800452c:	4620      	mov	r0, r4
 800452e:	4629      	mov	r1, r5
 8004530:	b005      	add	sp, #20
 8004532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004536:	2200      	movs	r2, #0
 8004538:	4630      	mov	r0, r6
 800453a:	4639      	mov	r1, r7
 800453c:	4b24      	ldr	r3, [pc, #144]	@ (80045d0 <__kernel_sin+0x168>)
 800453e:	f7fb ffc3 	bl	80004c8 <__aeabi_dmul>
 8004542:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800454a:	4640      	mov	r0, r8
 800454c:	4649      	mov	r1, r9
 800454e:	f7fb ffbb 	bl	80004c8 <__aeabi_dmul>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800455a:	f7fb fdfd 	bl	8000158 <__aeabi_dsub>
 800455e:	4652      	mov	r2, sl
 8004560:	465b      	mov	r3, fp
 8004562:	f7fb ffb1 	bl	80004c8 <__aeabi_dmul>
 8004566:	4632      	mov	r2, r6
 8004568:	463b      	mov	r3, r7
 800456a:	f7fb fdf5 	bl	8000158 <__aeabi_dsub>
 800456e:	a316      	add	r3, pc, #88	@ (adr r3, 80045c8 <__kernel_sin+0x160>)
 8004570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004574:	4606      	mov	r6, r0
 8004576:	460f      	mov	r7, r1
 8004578:	4640      	mov	r0, r8
 800457a:	4649      	mov	r1, r9
 800457c:	f7fb ffa4 	bl	80004c8 <__aeabi_dmul>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4630      	mov	r0, r6
 8004586:	4639      	mov	r1, r7
 8004588:	f7fb fde8 	bl	800015c <__adddf3>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4620      	mov	r0, r4
 8004592:	4629      	mov	r1, r5
 8004594:	f7fb fde0 	bl	8000158 <__aeabi_dsub>
 8004598:	e7c6      	b.n	8004528 <__kernel_sin+0xc0>
 800459a:	bf00      	nop
 800459c:	f3af 8000 	nop.w
 80045a0:	5acfd57c 	.word	0x5acfd57c
 80045a4:	3de5d93a 	.word	0x3de5d93a
 80045a8:	8a2b9ceb 	.word	0x8a2b9ceb
 80045ac:	3e5ae5e6 	.word	0x3e5ae5e6
 80045b0:	57b1fe7d 	.word	0x57b1fe7d
 80045b4:	3ec71de3 	.word	0x3ec71de3
 80045b8:	19c161d5 	.word	0x19c161d5
 80045bc:	3f2a01a0 	.word	0x3f2a01a0
 80045c0:	1110f8a6 	.word	0x1110f8a6
 80045c4:	3f811111 	.word	0x3f811111
 80045c8:	55555549 	.word	0x55555549
 80045cc:	3fc55555 	.word	0x3fc55555
 80045d0:	3fe00000 	.word	0x3fe00000
 80045d4:	00000000 	.word	0x00000000

080045d8 <__ieee754_rem_pio2>:
 80045d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045dc:	4bc4      	ldr	r3, [pc, #784]	@ (80048f0 <__ieee754_rem_pio2+0x318>)
 80045de:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80045e2:	b08d      	sub	sp, #52	@ 0x34
 80045e4:	4598      	cmp	r8, r3
 80045e6:	4606      	mov	r6, r0
 80045e8:	460f      	mov	r7, r1
 80045ea:	4614      	mov	r4, r2
 80045ec:	9104      	str	r1, [sp, #16]
 80045ee:	d807      	bhi.n	8004600 <__ieee754_rem_pio2+0x28>
 80045f0:	e9c2 6700 	strd	r6, r7, [r2]
 80045f4:	2300      	movs	r3, #0
 80045f6:	2200      	movs	r2, #0
 80045f8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80045fc:	2500      	movs	r5, #0
 80045fe:	e026      	b.n	800464e <__ieee754_rem_pio2+0x76>
 8004600:	4bbc      	ldr	r3, [pc, #752]	@ (80048f4 <__ieee754_rem_pio2+0x31c>)
 8004602:	4598      	cmp	r8, r3
 8004604:	d876      	bhi.n	80046f4 <__ieee754_rem_pio2+0x11c>
 8004606:	9b04      	ldr	r3, [sp, #16]
 8004608:	4dbb      	ldr	r5, [pc, #748]	@ (80048f8 <__ieee754_rem_pio2+0x320>)
 800460a:	2b00      	cmp	r3, #0
 800460c:	a3aa      	add	r3, pc, #680	@ (adr r3, 80048b8 <__ieee754_rem_pio2+0x2e0>)
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	dd38      	ble.n	8004686 <__ieee754_rem_pio2+0xae>
 8004614:	f7fb fda0 	bl	8000158 <__aeabi_dsub>
 8004618:	45a8      	cmp	r8, r5
 800461a:	4606      	mov	r6, r0
 800461c:	460f      	mov	r7, r1
 800461e:	d01a      	beq.n	8004656 <__ieee754_rem_pio2+0x7e>
 8004620:	a3a7      	add	r3, pc, #668	@ (adr r3, 80048c0 <__ieee754_rem_pio2+0x2e8>)
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	f7fb fd97 	bl	8000158 <__aeabi_dsub>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4680      	mov	r8, r0
 8004630:	4689      	mov	r9, r1
 8004632:	4630      	mov	r0, r6
 8004634:	4639      	mov	r1, r7
 8004636:	f7fb fd8f 	bl	8000158 <__aeabi_dsub>
 800463a:	a3a1      	add	r3, pc, #644	@ (adr r3, 80048c0 <__ieee754_rem_pio2+0x2e8>)
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f7fb fd8a 	bl	8000158 <__aeabi_dsub>
 8004644:	2501      	movs	r5, #1
 8004646:	e9c4 8900 	strd	r8, r9, [r4]
 800464a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800464e:	4628      	mov	r0, r5
 8004650:	b00d      	add	sp, #52	@ 0x34
 8004652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004656:	a39c      	add	r3, pc, #624	@ (adr r3, 80048c8 <__ieee754_rem_pio2+0x2f0>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f7fb fd7c 	bl	8000158 <__aeabi_dsub>
 8004660:	a39b      	add	r3, pc, #620	@ (adr r3, 80048d0 <__ieee754_rem_pio2+0x2f8>)
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	4606      	mov	r6, r0
 8004668:	460f      	mov	r7, r1
 800466a:	f7fb fd75 	bl	8000158 <__aeabi_dsub>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4680      	mov	r8, r0
 8004674:	4689      	mov	r9, r1
 8004676:	4630      	mov	r0, r6
 8004678:	4639      	mov	r1, r7
 800467a:	f7fb fd6d 	bl	8000158 <__aeabi_dsub>
 800467e:	a394      	add	r3, pc, #592	@ (adr r3, 80048d0 <__ieee754_rem_pio2+0x2f8>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	e7dc      	b.n	8004640 <__ieee754_rem_pio2+0x68>
 8004686:	f7fb fd69 	bl	800015c <__adddf3>
 800468a:	45a8      	cmp	r8, r5
 800468c:	4606      	mov	r6, r0
 800468e:	460f      	mov	r7, r1
 8004690:	d018      	beq.n	80046c4 <__ieee754_rem_pio2+0xec>
 8004692:	a38b      	add	r3, pc, #556	@ (adr r3, 80048c0 <__ieee754_rem_pio2+0x2e8>)
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f7fb fd60 	bl	800015c <__adddf3>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4680      	mov	r8, r0
 80046a2:	4689      	mov	r9, r1
 80046a4:	4630      	mov	r0, r6
 80046a6:	4639      	mov	r1, r7
 80046a8:	f7fb fd56 	bl	8000158 <__aeabi_dsub>
 80046ac:	a384      	add	r3, pc, #528	@ (adr r3, 80048c0 <__ieee754_rem_pio2+0x2e8>)
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f7fb fd53 	bl	800015c <__adddf3>
 80046b6:	f04f 35ff 	mov.w	r5, #4294967295
 80046ba:	e9c4 8900 	strd	r8, r9, [r4]
 80046be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80046c2:	e7c4      	b.n	800464e <__ieee754_rem_pio2+0x76>
 80046c4:	a380      	add	r3, pc, #512	@ (adr r3, 80048c8 <__ieee754_rem_pio2+0x2f0>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f7fb fd47 	bl	800015c <__adddf3>
 80046ce:	a380      	add	r3, pc, #512	@ (adr r3, 80048d0 <__ieee754_rem_pio2+0x2f8>)
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	4606      	mov	r6, r0
 80046d6:	460f      	mov	r7, r1
 80046d8:	f7fb fd40 	bl	800015c <__adddf3>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4680      	mov	r8, r0
 80046e2:	4689      	mov	r9, r1
 80046e4:	4630      	mov	r0, r6
 80046e6:	4639      	mov	r1, r7
 80046e8:	f7fb fd36 	bl	8000158 <__aeabi_dsub>
 80046ec:	a378      	add	r3, pc, #480	@ (adr r3, 80048d0 <__ieee754_rem_pio2+0x2f8>)
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	e7de      	b.n	80046b2 <__ieee754_rem_pio2+0xda>
 80046f4:	4b81      	ldr	r3, [pc, #516]	@ (80048fc <__ieee754_rem_pio2+0x324>)
 80046f6:	4598      	cmp	r8, r3
 80046f8:	f200 80cf 	bhi.w	800489a <__ieee754_rem_pio2+0x2c2>
 80046fc:	f000 f962 	bl	80049c4 <fabs>
 8004700:	a375      	add	r3, pc, #468	@ (adr r3, 80048d8 <__ieee754_rem_pio2+0x300>)
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	4606      	mov	r6, r0
 8004708:	460f      	mov	r7, r1
 800470a:	f7fb fedd 	bl	80004c8 <__aeabi_dmul>
 800470e:	2200      	movs	r2, #0
 8004710:	4b7b      	ldr	r3, [pc, #492]	@ (8004900 <__ieee754_rem_pio2+0x328>)
 8004712:	f7fb fd23 	bl	800015c <__adddf3>
 8004716:	f7fc f971 	bl	80009fc <__aeabi_d2iz>
 800471a:	4605      	mov	r5, r0
 800471c:	f7fb fe6a 	bl	80003f4 <__aeabi_i2d>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004728:	a363      	add	r3, pc, #396	@ (adr r3, 80048b8 <__ieee754_rem_pio2+0x2e0>)
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f7fb fecb 	bl	80004c8 <__aeabi_dmul>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4630      	mov	r0, r6
 8004738:	4639      	mov	r1, r7
 800473a:	f7fb fd0d 	bl	8000158 <__aeabi_dsub>
 800473e:	a360      	add	r3, pc, #384	@ (adr r3, 80048c0 <__ieee754_rem_pio2+0x2e8>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	4682      	mov	sl, r0
 8004746:	468b      	mov	fp, r1
 8004748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800474c:	f7fb febc 	bl	80004c8 <__aeabi_dmul>
 8004750:	2d1f      	cmp	r5, #31
 8004752:	4606      	mov	r6, r0
 8004754:	460f      	mov	r7, r1
 8004756:	dc0c      	bgt.n	8004772 <__ieee754_rem_pio2+0x19a>
 8004758:	4b6a      	ldr	r3, [pc, #424]	@ (8004904 <__ieee754_rem_pio2+0x32c>)
 800475a:	1e6a      	subs	r2, r5, #1
 800475c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004760:	4543      	cmp	r3, r8
 8004762:	d006      	beq.n	8004772 <__ieee754_rem_pio2+0x19a>
 8004764:	4632      	mov	r2, r6
 8004766:	463b      	mov	r3, r7
 8004768:	4650      	mov	r0, sl
 800476a:	4659      	mov	r1, fp
 800476c:	f7fb fcf4 	bl	8000158 <__aeabi_dsub>
 8004770:	e00e      	b.n	8004790 <__ieee754_rem_pio2+0x1b8>
 8004772:	463b      	mov	r3, r7
 8004774:	4632      	mov	r2, r6
 8004776:	4650      	mov	r0, sl
 8004778:	4659      	mov	r1, fp
 800477a:	f7fb fced 	bl	8000158 <__aeabi_dsub>
 800477e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004782:	9305      	str	r3, [sp, #20]
 8004784:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004788:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800478c:	2b10      	cmp	r3, #16
 800478e:	dc02      	bgt.n	8004796 <__ieee754_rem_pio2+0x1be>
 8004790:	e9c4 0100 	strd	r0, r1, [r4]
 8004794:	e039      	b.n	800480a <__ieee754_rem_pio2+0x232>
 8004796:	a34c      	add	r3, pc, #304	@ (adr r3, 80048c8 <__ieee754_rem_pio2+0x2f0>)
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047a0:	f7fb fe92 	bl	80004c8 <__aeabi_dmul>
 80047a4:	4606      	mov	r6, r0
 80047a6:	460f      	mov	r7, r1
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4650      	mov	r0, sl
 80047ae:	4659      	mov	r1, fp
 80047b0:	f7fb fcd2 	bl	8000158 <__aeabi_dsub>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4680      	mov	r8, r0
 80047ba:	4689      	mov	r9, r1
 80047bc:	4650      	mov	r0, sl
 80047be:	4659      	mov	r1, fp
 80047c0:	f7fb fcca 	bl	8000158 <__aeabi_dsub>
 80047c4:	4632      	mov	r2, r6
 80047c6:	463b      	mov	r3, r7
 80047c8:	f7fb fcc6 	bl	8000158 <__aeabi_dsub>
 80047cc:	a340      	add	r3, pc, #256	@ (adr r3, 80048d0 <__ieee754_rem_pio2+0x2f8>)
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	4606      	mov	r6, r0
 80047d4:	460f      	mov	r7, r1
 80047d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047da:	f7fb fe75 	bl	80004c8 <__aeabi_dmul>
 80047de:	4632      	mov	r2, r6
 80047e0:	463b      	mov	r3, r7
 80047e2:	f7fb fcb9 	bl	8000158 <__aeabi_dsub>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4606      	mov	r6, r0
 80047ec:	460f      	mov	r7, r1
 80047ee:	4640      	mov	r0, r8
 80047f0:	4649      	mov	r1, r9
 80047f2:	f7fb fcb1 	bl	8000158 <__aeabi_dsub>
 80047f6:	9a05      	ldr	r2, [sp, #20]
 80047f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b31      	cmp	r3, #49	@ 0x31
 8004800:	dc20      	bgt.n	8004844 <__ieee754_rem_pio2+0x26c>
 8004802:	46c2      	mov	sl, r8
 8004804:	46cb      	mov	fp, r9
 8004806:	e9c4 0100 	strd	r0, r1, [r4]
 800480a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800480e:	4650      	mov	r0, sl
 8004810:	4642      	mov	r2, r8
 8004812:	464b      	mov	r3, r9
 8004814:	4659      	mov	r1, fp
 8004816:	f7fb fc9f 	bl	8000158 <__aeabi_dsub>
 800481a:	463b      	mov	r3, r7
 800481c:	4632      	mov	r2, r6
 800481e:	f7fb fc9b 	bl	8000158 <__aeabi_dsub>
 8004822:	9b04      	ldr	r3, [sp, #16]
 8004824:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f6bf af10 	bge.w	800464e <__ieee754_rem_pio2+0x76>
 800482e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004832:	6063      	str	r3, [r4, #4]
 8004834:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004838:	f8c4 8000 	str.w	r8, [r4]
 800483c:	60a0      	str	r0, [r4, #8]
 800483e:	60e3      	str	r3, [r4, #12]
 8004840:	426d      	negs	r5, r5
 8004842:	e704      	b.n	800464e <__ieee754_rem_pio2+0x76>
 8004844:	a326      	add	r3, pc, #152	@ (adr r3, 80048e0 <__ieee754_rem_pio2+0x308>)
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800484e:	f7fb fe3b 	bl	80004c8 <__aeabi_dmul>
 8004852:	4606      	mov	r6, r0
 8004854:	460f      	mov	r7, r1
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4640      	mov	r0, r8
 800485c:	4649      	mov	r1, r9
 800485e:	f7fb fc7b 	bl	8000158 <__aeabi_dsub>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4682      	mov	sl, r0
 8004868:	468b      	mov	fp, r1
 800486a:	4640      	mov	r0, r8
 800486c:	4649      	mov	r1, r9
 800486e:	f7fb fc73 	bl	8000158 <__aeabi_dsub>
 8004872:	4632      	mov	r2, r6
 8004874:	463b      	mov	r3, r7
 8004876:	f7fb fc6f 	bl	8000158 <__aeabi_dsub>
 800487a:	a31b      	add	r3, pc, #108	@ (adr r3, 80048e8 <__ieee754_rem_pio2+0x310>)
 800487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004880:	4606      	mov	r6, r0
 8004882:	460f      	mov	r7, r1
 8004884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004888:	f7fb fe1e 	bl	80004c8 <__aeabi_dmul>
 800488c:	4632      	mov	r2, r6
 800488e:	463b      	mov	r3, r7
 8004890:	f7fb fc62 	bl	8000158 <__aeabi_dsub>
 8004894:	4606      	mov	r6, r0
 8004896:	460f      	mov	r7, r1
 8004898:	e764      	b.n	8004764 <__ieee754_rem_pio2+0x18c>
 800489a:	4b1b      	ldr	r3, [pc, #108]	@ (8004908 <__ieee754_rem_pio2+0x330>)
 800489c:	4598      	cmp	r8, r3
 800489e:	d935      	bls.n	800490c <__ieee754_rem_pio2+0x334>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	f7fb fc58 	bl	8000158 <__aeabi_dsub>
 80048a8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80048ac:	e9c4 0100 	strd	r0, r1, [r4]
 80048b0:	e6a4      	b.n	80045fc <__ieee754_rem_pio2+0x24>
 80048b2:	bf00      	nop
 80048b4:	f3af 8000 	nop.w
 80048b8:	54400000 	.word	0x54400000
 80048bc:	3ff921fb 	.word	0x3ff921fb
 80048c0:	1a626331 	.word	0x1a626331
 80048c4:	3dd0b461 	.word	0x3dd0b461
 80048c8:	1a600000 	.word	0x1a600000
 80048cc:	3dd0b461 	.word	0x3dd0b461
 80048d0:	2e037073 	.word	0x2e037073
 80048d4:	3ba3198a 	.word	0x3ba3198a
 80048d8:	6dc9c883 	.word	0x6dc9c883
 80048dc:	3fe45f30 	.word	0x3fe45f30
 80048e0:	2e000000 	.word	0x2e000000
 80048e4:	3ba3198a 	.word	0x3ba3198a
 80048e8:	252049c1 	.word	0x252049c1
 80048ec:	397b839a 	.word	0x397b839a
 80048f0:	3fe921fb 	.word	0x3fe921fb
 80048f4:	4002d97b 	.word	0x4002d97b
 80048f8:	3ff921fb 	.word	0x3ff921fb
 80048fc:	413921fb 	.word	0x413921fb
 8004900:	3fe00000 	.word	0x3fe00000
 8004904:	08005244 	.word	0x08005244
 8004908:	7fefffff 	.word	0x7fefffff
 800490c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004910:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004914:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004918:	460f      	mov	r7, r1
 800491a:	f7fc f86f 	bl	80009fc <__aeabi_d2iz>
 800491e:	f7fb fd69 	bl	80003f4 <__aeabi_i2d>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4630      	mov	r0, r6
 8004928:	4639      	mov	r1, r7
 800492a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800492e:	f7fb fc13 	bl	8000158 <__aeabi_dsub>
 8004932:	2200      	movs	r2, #0
 8004934:	4b21      	ldr	r3, [pc, #132]	@ (80049bc <__ieee754_rem_pio2+0x3e4>)
 8004936:	f7fb fdc7 	bl	80004c8 <__aeabi_dmul>
 800493a:	460f      	mov	r7, r1
 800493c:	4606      	mov	r6, r0
 800493e:	f7fc f85d 	bl	80009fc <__aeabi_d2iz>
 8004942:	f7fb fd57 	bl	80003f4 <__aeabi_i2d>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4630      	mov	r0, r6
 800494c:	4639      	mov	r1, r7
 800494e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004952:	f7fb fc01 	bl	8000158 <__aeabi_dsub>
 8004956:	2200      	movs	r2, #0
 8004958:	4b18      	ldr	r3, [pc, #96]	@ (80049bc <__ieee754_rem_pio2+0x3e4>)
 800495a:	f7fb fdb5 	bl	80004c8 <__aeabi_dmul>
 800495e:	f04f 0803 	mov.w	r8, #3
 8004962:	2600      	movs	r6, #0
 8004964:	2700      	movs	r7, #0
 8004966:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800496a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800496e:	4632      	mov	r2, r6
 8004970:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004974:	463b      	mov	r3, r7
 8004976:	46c2      	mov	sl, r8
 8004978:	f108 38ff 	add.w	r8, r8, #4294967295
 800497c:	f7fc f80c 	bl	8000998 <__aeabi_dcmpeq>
 8004980:	2800      	cmp	r0, #0
 8004982:	d1f4      	bne.n	800496e <__ieee754_rem_pio2+0x396>
 8004984:	4b0e      	ldr	r3, [pc, #56]	@ (80049c0 <__ieee754_rem_pio2+0x3e8>)
 8004986:	462a      	mov	r2, r5
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	2302      	movs	r3, #2
 800498c:	4621      	mov	r1, r4
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	a806      	add	r0, sp, #24
 8004992:	4653      	mov	r3, sl
 8004994:	f000 f892 	bl	8004abc <__kernel_rem_pio2>
 8004998:	9b04      	ldr	r3, [sp, #16]
 800499a:	4605      	mov	r5, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	f6bf ae56 	bge.w	800464e <__ieee754_rem_pio2+0x76>
 80049a2:	e9d4 2100 	ldrd	r2, r1, [r4]
 80049a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80049aa:	e9c4 2300 	strd	r2, r3, [r4]
 80049ae:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80049b2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80049b6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80049ba:	e741      	b.n	8004840 <__ieee754_rem_pio2+0x268>
 80049bc:	41700000 	.word	0x41700000
 80049c0:	080052c4 	.word	0x080052c4

080049c4 <fabs>:
 80049c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80049c8:	4619      	mov	r1, r3
 80049ca:	4770      	bx	lr
 80049cc:	0000      	movs	r0, r0
	...

080049d0 <scalbn>:
 80049d0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80049d4:	4616      	mov	r6, r2
 80049d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80049da:	4683      	mov	fp, r0
 80049dc:	468c      	mov	ip, r1
 80049de:	460b      	mov	r3, r1
 80049e0:	b982      	cbnz	r2, 8004a04 <scalbn+0x34>
 80049e2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80049e6:	4303      	orrs	r3, r0
 80049e8:	d039      	beq.n	8004a5e <scalbn+0x8e>
 80049ea:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa8 <scalbn+0xd8>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	f7fb fd6b 	bl	80004c8 <__aeabi_dmul>
 80049f2:	4b2e      	ldr	r3, [pc, #184]	@ (8004aac <scalbn+0xdc>)
 80049f4:	4683      	mov	fp, r0
 80049f6:	429e      	cmp	r6, r3
 80049f8:	468c      	mov	ip, r1
 80049fa:	da0d      	bge.n	8004a18 <scalbn+0x48>
 80049fc:	a326      	add	r3, pc, #152	@ (adr r3, 8004a98 <scalbn+0xc8>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	e01b      	b.n	8004a3c <scalbn+0x6c>
 8004a04:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8004a08:	42ba      	cmp	r2, r7
 8004a0a:	d109      	bne.n	8004a20 <scalbn+0x50>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	f7fb fba5 	bl	800015c <__adddf3>
 8004a12:	4683      	mov	fp, r0
 8004a14:	468c      	mov	ip, r1
 8004a16:	e022      	b.n	8004a5e <scalbn+0x8e>
 8004a18:	460b      	mov	r3, r1
 8004a1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004a1e:	3a36      	subs	r2, #54	@ 0x36
 8004a20:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004a24:	428e      	cmp	r6, r1
 8004a26:	dd0c      	ble.n	8004a42 <scalbn+0x72>
 8004a28:	a31d      	add	r3, pc, #116	@ (adr r3, 8004aa0 <scalbn+0xd0>)
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	461c      	mov	r4, r3
 8004a30:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8004a34:	f361 74df 	bfi	r4, r1, #31, #1
 8004a38:	4621      	mov	r1, r4
 8004a3a:	481d      	ldr	r0, [pc, #116]	@ (8004ab0 <scalbn+0xe0>)
 8004a3c:	f7fb fd44 	bl	80004c8 <__aeabi_dmul>
 8004a40:	e7e7      	b.n	8004a12 <scalbn+0x42>
 8004a42:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004a46:	4432      	add	r2, r6
 8004a48:	428a      	cmp	r2, r1
 8004a4a:	dced      	bgt.n	8004a28 <scalbn+0x58>
 8004a4c:	2a00      	cmp	r2, #0
 8004a4e:	dd0a      	ble.n	8004a66 <scalbn+0x96>
 8004a50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004a54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004a58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a5c:	46ac      	mov	ip, r5
 8004a5e:	4658      	mov	r0, fp
 8004a60:	4661      	mov	r1, ip
 8004a62:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8004a66:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004a6a:	da09      	bge.n	8004a80 <scalbn+0xb0>
 8004a6c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8004a70:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8004a74:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8004a78:	480e      	ldr	r0, [pc, #56]	@ (8004ab4 <scalbn+0xe4>)
 8004a7a:	f041 011f 	orr.w	r1, r1, #31
 8004a7e:	e7bd      	b.n	80049fc <scalbn+0x2c>
 8004a80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004a84:	3236      	adds	r2, #54	@ 0x36
 8004a86:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004a8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a8e:	4658      	mov	r0, fp
 8004a90:	4629      	mov	r1, r5
 8004a92:	2200      	movs	r2, #0
 8004a94:	4b08      	ldr	r3, [pc, #32]	@ (8004ab8 <scalbn+0xe8>)
 8004a96:	e7d1      	b.n	8004a3c <scalbn+0x6c>
 8004a98:	c2f8f359 	.word	0xc2f8f359
 8004a9c:	01a56e1f 	.word	0x01a56e1f
 8004aa0:	8800759c 	.word	0x8800759c
 8004aa4:	7e37e43c 	.word	0x7e37e43c
 8004aa8:	43500000 	.word	0x43500000
 8004aac:	ffff3cb0 	.word	0xffff3cb0
 8004ab0:	8800759c 	.word	0x8800759c
 8004ab4:	c2f8f359 	.word	0xc2f8f359
 8004ab8:	3c900000 	.word	0x3c900000

08004abc <__kernel_rem_pio2>:
 8004abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004ac4:	9308      	str	r3, [sp, #32]
 8004ac6:	9104      	str	r1, [sp, #16]
 8004ac8:	4bb6      	ldr	r3, [pc, #728]	@ (8004da4 <__kernel_rem_pio2+0x2e8>)
 8004aca:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8004acc:	f112 0f14 	cmn.w	r2, #20
 8004ad0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004ad4:	bfa8      	it	ge
 8004ad6:	1ed4      	subge	r4, r2, #3
 8004ad8:	9302      	str	r3, [sp, #8]
 8004ada:	9b08      	ldr	r3, [sp, #32]
 8004adc:	bfb8      	it	lt
 8004ade:	2400      	movlt	r4, #0
 8004ae0:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ae4:	9306      	str	r3, [sp, #24]
 8004ae6:	bfa4      	itt	ge
 8004ae8:	2318      	movge	r3, #24
 8004aea:	fb94 f4f3 	sdivge	r4, r4, r3
 8004aee:	f06f 0317 	mvn.w	r3, #23
 8004af2:	fb04 3303 	mla	r3, r4, r3, r3
 8004af6:	eb03 0a02 	add.w	sl, r3, r2
 8004afa:	9a06      	ldr	r2, [sp, #24]
 8004afc:	9b02      	ldr	r3, [sp, #8]
 8004afe:	1aa7      	subs	r7, r4, r2
 8004b00:	eb03 0802 	add.w	r8, r3, r2
 8004b04:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8004b06:	2500      	movs	r5, #0
 8004b08:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9009      	str	r0, [sp, #36]	@ 0x24
 8004b12:	ae20      	add	r6, sp, #128	@ 0x80
 8004b14:	4545      	cmp	r5, r8
 8004b16:	dd14      	ble.n	8004b42 <__kernel_rem_pio2+0x86>
 8004b18:	f04f 0800 	mov.w	r8, #0
 8004b1c:	9a08      	ldr	r2, [sp, #32]
 8004b1e:	ab20      	add	r3, sp, #128	@ 0x80
 8004b20:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8004b24:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8004b28:	9b02      	ldr	r3, [sp, #8]
 8004b2a:	4598      	cmp	r8, r3
 8004b2c:	dc35      	bgt.n	8004b9a <__kernel_rem_pio2+0xde>
 8004b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b30:	2200      	movs	r2, #0
 8004b32:	f1a3 0908 	sub.w	r9, r3, #8
 8004b36:	2300      	movs	r3, #0
 8004b38:	462f      	mov	r7, r5
 8004b3a:	2600      	movs	r6, #0
 8004b3c:	e9cd 2300 	strd	r2, r3, [sp]
 8004b40:	e01f      	b.n	8004b82 <__kernel_rem_pio2+0xc6>
 8004b42:	42ef      	cmn	r7, r5
 8004b44:	d40b      	bmi.n	8004b5e <__kernel_rem_pio2+0xa2>
 8004b46:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004b4a:	e9cd 2300 	strd	r2, r3, [sp]
 8004b4e:	f7fb fc51 	bl	80003f4 <__aeabi_i2d>
 8004b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b56:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004b5a:	3501      	adds	r5, #1
 8004b5c:	e7da      	b.n	8004b14 <__kernel_rem_pio2+0x58>
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	e7f8      	b.n	8004b56 <__kernel_rem_pio2+0x9a>
 8004b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b68:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004b6c:	f7fb fcac 	bl	80004c8 <__aeabi_dmul>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b78:	f7fb faf0 	bl	800015c <__adddf3>
 8004b7c:	e9cd 0100 	strd	r0, r1, [sp]
 8004b80:	3601      	adds	r6, #1
 8004b82:	9b06      	ldr	r3, [sp, #24]
 8004b84:	3f08      	subs	r7, #8
 8004b86:	429e      	cmp	r6, r3
 8004b88:	ddec      	ble.n	8004b64 <__kernel_rem_pio2+0xa8>
 8004b8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b8e:	f108 0801 	add.w	r8, r8, #1
 8004b92:	e8eb 2302 	strd	r2, r3, [fp], #8
 8004b96:	3508      	adds	r5, #8
 8004b98:	e7c6      	b.n	8004b28 <__kernel_rem_pio2+0x6c>
 8004b9a:	9b02      	ldr	r3, [sp, #8]
 8004b9c:	aa0c      	add	r2, sp, #48	@ 0x30
 8004b9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004ba2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ba4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8004ba6:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004baa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bb0:	ab98      	add	r3, sp, #608	@ 0x260
 8004bb2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004bb6:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8004bba:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004bbc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004bc0:	ae0c      	add	r6, sp, #48	@ 0x30
 8004bc2:	4698      	mov	r8, r3
 8004bc4:	46b1      	mov	r9, r6
 8004bc6:	465f      	mov	r7, fp
 8004bc8:	9307      	str	r3, [sp, #28]
 8004bca:	2f00      	cmp	r7, #0
 8004bcc:	f1a8 0808 	sub.w	r8, r8, #8
 8004bd0:	dc71      	bgt.n	8004cb6 <__kernel_rem_pio2+0x1fa>
 8004bd2:	4652      	mov	r2, sl
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	f7ff fefa 	bl	80049d0 <scalbn>
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004be2:	4604      	mov	r4, r0
 8004be4:	460d      	mov	r5, r1
 8004be6:	f7fb fc6f 	bl	80004c8 <__aeabi_dmul>
 8004bea:	f000 fa8d 	bl	8005108 <floor>
 8004bee:	2200      	movs	r2, #0
 8004bf0:	4b6d      	ldr	r3, [pc, #436]	@ (8004da8 <__kernel_rem_pio2+0x2ec>)
 8004bf2:	f7fb fc69 	bl	80004c8 <__aeabi_dmul>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	f7fb faab 	bl	8000158 <__aeabi_dsub>
 8004c02:	460d      	mov	r5, r1
 8004c04:	4604      	mov	r4, r0
 8004c06:	f7fb fef9 	bl	80009fc <__aeabi_d2iz>
 8004c0a:	9005      	str	r0, [sp, #20]
 8004c0c:	f7fb fbf2 	bl	80003f4 <__aeabi_i2d>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4620      	mov	r0, r4
 8004c16:	4629      	mov	r1, r5
 8004c18:	f7fb fa9e 	bl	8000158 <__aeabi_dsub>
 8004c1c:	f1ba 0f00 	cmp.w	sl, #0
 8004c20:	4680      	mov	r8, r0
 8004c22:	4689      	mov	r9, r1
 8004c24:	dd6d      	ble.n	8004d02 <__kernel_rem_pio2+0x246>
 8004c26:	f10b 31ff 	add.w	r1, fp, #4294967295
 8004c2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8004c2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004c30:	9c05      	ldr	r4, [sp, #20]
 8004c32:	f1ca 0018 	rsb	r0, sl, #24
 8004c36:	fa43 f200 	asr.w	r2, r3, r0
 8004c3a:	4414      	add	r4, r2
 8004c3c:	4082      	lsls	r2, r0
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	aa0c      	add	r2, sp, #48	@ 0x30
 8004c42:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004c46:	f1ca 0217 	rsb	r2, sl, #23
 8004c4a:	9405      	str	r4, [sp, #20]
 8004c4c:	4113      	asrs	r3, r2
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	9b00      	ldr	r3, [sp, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	dd64      	ble.n	8004d20 <__kernel_rem_pio2+0x264>
 8004c56:	2200      	movs	r2, #0
 8004c58:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	9b05      	ldr	r3, [sp, #20]
 8004c60:	3301      	adds	r3, #1
 8004c62:	9305      	str	r3, [sp, #20]
 8004c64:	4593      	cmp	fp, r2
 8004c66:	f300 80ab 	bgt.w	8004dc0 <__kernel_rem_pio2+0x304>
 8004c6a:	f1ba 0f00 	cmp.w	sl, #0
 8004c6e:	dd07      	ble.n	8004c80 <__kernel_rem_pio2+0x1c4>
 8004c70:	f1ba 0f01 	cmp.w	sl, #1
 8004c74:	f000 80b2 	beq.w	8004ddc <__kernel_rem_pio2+0x320>
 8004c78:	f1ba 0f02 	cmp.w	sl, #2
 8004c7c:	f000 80b9 	beq.w	8004df2 <__kernel_rem_pio2+0x336>
 8004c80:	9b00      	ldr	r3, [sp, #0]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d14c      	bne.n	8004d20 <__kernel_rem_pio2+0x264>
 8004c86:	4642      	mov	r2, r8
 8004c88:	464b      	mov	r3, r9
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	4947      	ldr	r1, [pc, #284]	@ (8004dac <__kernel_rem_pio2+0x2f0>)
 8004c8e:	f7fb fa63 	bl	8000158 <__aeabi_dsub>
 8004c92:	4680      	mov	r8, r0
 8004c94:	4689      	mov	r9, r1
 8004c96:	2c00      	cmp	r4, #0
 8004c98:	d042      	beq.n	8004d20 <__kernel_rem_pio2+0x264>
 8004c9a:	4652      	mov	r2, sl
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	4943      	ldr	r1, [pc, #268]	@ (8004dac <__kernel_rem_pio2+0x2f0>)
 8004ca0:	f7ff fe96 	bl	80049d0 <scalbn>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4640      	mov	r0, r8
 8004caa:	4649      	mov	r1, r9
 8004cac:	f7fb fa54 	bl	8000158 <__aeabi_dsub>
 8004cb0:	4680      	mov	r8, r0
 8004cb2:	4689      	mov	r9, r1
 8004cb4:	e034      	b.n	8004d20 <__kernel_rem_pio2+0x264>
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	4b3d      	ldr	r3, [pc, #244]	@ (8004db0 <__kernel_rem_pio2+0x2f4>)
 8004cba:	4620      	mov	r0, r4
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	f7fb fc03 	bl	80004c8 <__aeabi_dmul>
 8004cc2:	f7fb fe9b 	bl	80009fc <__aeabi_d2iz>
 8004cc6:	f7fb fb95 	bl	80003f4 <__aeabi_i2d>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	e9cd 2300 	strd	r2, r3, [sp]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	4b37      	ldr	r3, [pc, #220]	@ (8004db4 <__kernel_rem_pio2+0x2f8>)
 8004cd6:	f7fb fbf7 	bl	80004c8 <__aeabi_dmul>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4620      	mov	r0, r4
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	f7fb fa39 	bl	8000158 <__aeabi_dsub>
 8004ce6:	f7fb fe89 	bl	80009fc <__aeabi_d2iz>
 8004cea:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004cee:	f849 0b04 	str.w	r0, [r9], #4
 8004cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cf6:	f7fb fa31 	bl	800015c <__adddf3>
 8004cfa:	3f01      	subs	r7, #1
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	460d      	mov	r5, r1
 8004d00:	e763      	b.n	8004bca <__kernel_rem_pio2+0x10e>
 8004d02:	d106      	bne.n	8004d12 <__kernel_rem_pio2+0x256>
 8004d04:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004d08:	aa0c      	add	r2, sp, #48	@ 0x30
 8004d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d0e:	15db      	asrs	r3, r3, #23
 8004d10:	e79d      	b.n	8004c4e <__kernel_rem_pio2+0x192>
 8004d12:	2200      	movs	r2, #0
 8004d14:	4b28      	ldr	r3, [pc, #160]	@ (8004db8 <__kernel_rem_pio2+0x2fc>)
 8004d16:	f7fb fe5d 	bl	80009d4 <__aeabi_dcmpge>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d13f      	bne.n	8004d9e <__kernel_rem_pio2+0x2e2>
 8004d1e:	9000      	str	r0, [sp, #0]
 8004d20:	2200      	movs	r2, #0
 8004d22:	2300      	movs	r3, #0
 8004d24:	4640      	mov	r0, r8
 8004d26:	4649      	mov	r1, r9
 8004d28:	f7fb fe36 	bl	8000998 <__aeabi_dcmpeq>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	f000 80af 	beq.w	8004e90 <__kernel_rem_pio2+0x3d4>
 8004d32:	2200      	movs	r2, #0
 8004d34:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004d38:	9902      	ldr	r1, [sp, #8]
 8004d3a:	428b      	cmp	r3, r1
 8004d3c:	da61      	bge.n	8004e02 <__kernel_rem_pio2+0x346>
 8004d3e:	2a00      	cmp	r2, #0
 8004d40:	d076      	beq.n	8004e30 <__kernel_rem_pio2+0x374>
 8004d42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d46:	ab0c      	add	r3, sp, #48	@ 0x30
 8004d48:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8004d4c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f6      	beq.n	8004d42 <__kernel_rem_pio2+0x286>
 8004d54:	4652      	mov	r2, sl
 8004d56:	2000      	movs	r0, #0
 8004d58:	4914      	ldr	r1, [pc, #80]	@ (8004dac <__kernel_rem_pio2+0x2f0>)
 8004d5a:	f7ff fe39 	bl	80049d0 <scalbn>
 8004d5e:	465d      	mov	r5, fp
 8004d60:	4606      	mov	r6, r0
 8004d62:	460f      	mov	r7, r1
 8004d64:	f04f 0900 	mov.w	r9, #0
 8004d68:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004d6a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8004db0 <__kernel_rem_pio2+0x2f4>
 8004d6e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8004d72:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8004d76:	2d00      	cmp	r5, #0
 8004d78:	f280 80c0 	bge.w	8004efc <__kernel_rem_pio2+0x440>
 8004d7c:	465d      	mov	r5, fp
 8004d7e:	2d00      	cmp	r5, #0
 8004d80:	f2c0 80f0 	blt.w	8004f64 <__kernel_rem_pio2+0x4a8>
 8004d84:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <__kernel_rem_pio2+0x300>)
 8004d86:	f04f 0900 	mov.w	r9, #0
 8004d8a:	9306      	str	r3, [sp, #24]
 8004d8c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004d8e:	f04f 0a00 	mov.w	sl, #0
 8004d92:	2700      	movs	r7, #0
 8004d94:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8004d98:	ebab 0605 	sub.w	r6, fp, r5
 8004d9c:	e0d6      	b.n	8004f4c <__kernel_rem_pio2+0x490>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	e758      	b.n	8004c56 <__kernel_rem_pio2+0x19a>
 8004da4:	08005410 	.word	0x08005410
 8004da8:	40200000 	.word	0x40200000
 8004dac:	3ff00000 	.word	0x3ff00000
 8004db0:	3e700000 	.word	0x3e700000
 8004db4:	41700000 	.word	0x41700000
 8004db8:	3fe00000 	.word	0x3fe00000
 8004dbc:	080053d0 	.word	0x080053d0
 8004dc0:	f856 3b04 	ldr.w	r3, [r6], #4
 8004dc4:	b944      	cbnz	r4, 8004dd8 <__kernel_rem_pio2+0x31c>
 8004dc6:	b123      	cbz	r3, 8004dd2 <__kernel_rem_pio2+0x316>
 8004dc8:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004dcc:	f846 3c04 	str.w	r3, [r6, #-4]
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	461c      	mov	r4, r3
 8004dd4:	3201      	adds	r2, #1
 8004dd6:	e745      	b.n	8004c64 <__kernel_rem_pio2+0x1a8>
 8004dd8:	1acb      	subs	r3, r1, r3
 8004dda:	e7f7      	b.n	8004dcc <__kernel_rem_pio2+0x310>
 8004ddc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004de0:	ab0c      	add	r3, sp, #48	@ 0x30
 8004de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004dea:	a90c      	add	r1, sp, #48	@ 0x30
 8004dec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004df0:	e746      	b.n	8004c80 <__kernel_rem_pio2+0x1c4>
 8004df2:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004df6:	ab0c      	add	r3, sp, #48	@ 0x30
 8004df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004e00:	e7f3      	b.n	8004dea <__kernel_rem_pio2+0x32e>
 8004e02:	a90c      	add	r1, sp, #48	@ 0x30
 8004e04:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	e794      	b.n	8004d38 <__kernel_rem_pio2+0x27c>
 8004e0e:	3401      	adds	r4, #1
 8004e10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004e14:	2a00      	cmp	r2, #0
 8004e16:	d0fa      	beq.n	8004e0e <__kernel_rem_pio2+0x352>
 8004e18:	9b08      	ldr	r3, [sp, #32]
 8004e1a:	aa20      	add	r2, sp, #128	@ 0x80
 8004e1c:	445b      	add	r3, fp
 8004e1e:	f10b 0801 	add.w	r8, fp, #1
 8004e22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004e26:	445c      	add	r4, fp
 8004e28:	4544      	cmp	r4, r8
 8004e2a:	da04      	bge.n	8004e36 <__kernel_rem_pio2+0x37a>
 8004e2c:	46a3      	mov	fp, r4
 8004e2e:	e6bf      	b.n	8004bb0 <__kernel_rem_pio2+0xf4>
 8004e30:	2401      	movs	r4, #1
 8004e32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e34:	e7ec      	b.n	8004e10 <__kernel_rem_pio2+0x354>
 8004e36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e38:	46ab      	mov	fp, r5
 8004e3a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004e3e:	f7fb fad9 	bl	80003f4 <__aeabi_i2d>
 8004e42:	f04f 0900 	mov.w	r9, #0
 8004e46:	2600      	movs	r6, #0
 8004e48:	2700      	movs	r7, #0
 8004e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e4c:	e9c5 0100 	strd	r0, r1, [r5]
 8004e50:	3b08      	subs	r3, #8
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	9b06      	ldr	r3, [sp, #24]
 8004e56:	4599      	cmp	r9, r3
 8004e58:	dd07      	ble.n	8004e6a <__kernel_rem_pio2+0x3ae>
 8004e5a:	9b07      	ldr	r3, [sp, #28]
 8004e5c:	f108 0801 	add.w	r8, r8, #1
 8004e60:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8004e64:	3508      	adds	r5, #8
 8004e66:	9307      	str	r3, [sp, #28]
 8004e68:	e7de      	b.n	8004e28 <__kernel_rem_pio2+0x36c>
 8004e6a:	9900      	ldr	r1, [sp, #0]
 8004e6c:	f109 0901 	add.w	r9, r9, #1
 8004e70:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004e74:	9100      	str	r1, [sp, #0]
 8004e76:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8004e7a:	f7fb fb25 	bl	80004c8 <__aeabi_dmul>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4630      	mov	r0, r6
 8004e84:	4639      	mov	r1, r7
 8004e86:	f7fb f969 	bl	800015c <__adddf3>
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	460f      	mov	r7, r1
 8004e8e:	e7e1      	b.n	8004e54 <__kernel_rem_pio2+0x398>
 8004e90:	f1ca 0200 	rsb	r2, sl, #0
 8004e94:	4640      	mov	r0, r8
 8004e96:	4649      	mov	r1, r9
 8004e98:	f7ff fd9a 	bl	80049d0 <scalbn>
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	4b97      	ldr	r3, [pc, #604]	@ (80050fc <__kernel_rem_pio2+0x640>)
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	f7fb fd96 	bl	80009d4 <__aeabi_dcmpge>
 8004ea8:	b300      	cbz	r0, 8004eec <__kernel_rem_pio2+0x430>
 8004eaa:	2200      	movs	r2, #0
 8004eac:	4b94      	ldr	r3, [pc, #592]	@ (8005100 <__kernel_rem_pio2+0x644>)
 8004eae:	4620      	mov	r0, r4
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	f7fb fb09 	bl	80004c8 <__aeabi_dmul>
 8004eb6:	f7fb fda1 	bl	80009fc <__aeabi_d2iz>
 8004eba:	4606      	mov	r6, r0
 8004ebc:	f7fb fa9a 	bl	80003f4 <__aeabi_i2d>
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4b8e      	ldr	r3, [pc, #568]	@ (80050fc <__kernel_rem_pio2+0x640>)
 8004ec4:	f7fb fb00 	bl	80004c8 <__aeabi_dmul>
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4602      	mov	r2, r0
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f7fb f942 	bl	8000158 <__aeabi_dsub>
 8004ed4:	f7fb fd92 	bl	80009fc <__aeabi_d2iz>
 8004ed8:	ab0c      	add	r3, sp, #48	@ 0x30
 8004eda:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8004ede:	f10b 0b01 	add.w	fp, fp, #1
 8004ee2:	f10a 0a18 	add.w	sl, sl, #24
 8004ee6:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8004eea:	e733      	b.n	8004d54 <__kernel_rem_pio2+0x298>
 8004eec:	4620      	mov	r0, r4
 8004eee:	4629      	mov	r1, r5
 8004ef0:	f7fb fd84 	bl	80009fc <__aeabi_d2iz>
 8004ef4:	ab0c      	add	r3, sp, #48	@ 0x30
 8004ef6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8004efa:	e72b      	b.n	8004d54 <__kernel_rem_pio2+0x298>
 8004efc:	ab0c      	add	r3, sp, #48	@ 0x30
 8004efe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f02:	f7fb fa77 	bl	80003f4 <__aeabi_i2d>
 8004f06:	4632      	mov	r2, r6
 8004f08:	463b      	mov	r3, r7
 8004f0a:	f7fb fadd 	bl	80004c8 <__aeabi_dmul>
 8004f0e:	464a      	mov	r2, r9
 8004f10:	e868 0102 	strd	r0, r1, [r8], #-8
 8004f14:	4653      	mov	r3, sl
 8004f16:	4630      	mov	r0, r6
 8004f18:	4639      	mov	r1, r7
 8004f1a:	f7fb fad5 	bl	80004c8 <__aeabi_dmul>
 8004f1e:	3d01      	subs	r5, #1
 8004f20:	4606      	mov	r6, r0
 8004f22:	460f      	mov	r7, r1
 8004f24:	e727      	b.n	8004d76 <__kernel_rem_pio2+0x2ba>
 8004f26:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004f2a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8004f2e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8004f32:	f8cd c018 	str.w	ip, [sp, #24]
 8004f36:	f7fb fac7 	bl	80004c8 <__aeabi_dmul>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4648      	mov	r0, r9
 8004f40:	4651      	mov	r1, sl
 8004f42:	f7fb f90b 	bl	800015c <__adddf3>
 8004f46:	4681      	mov	r9, r0
 8004f48:	468a      	mov	sl, r1
 8004f4a:	3701      	adds	r7, #1
 8004f4c:	9b02      	ldr	r3, [sp, #8]
 8004f4e:	429f      	cmp	r7, r3
 8004f50:	dc01      	bgt.n	8004f56 <__kernel_rem_pio2+0x49a>
 8004f52:	42be      	cmp	r6, r7
 8004f54:	dae7      	bge.n	8004f26 <__kernel_rem_pio2+0x46a>
 8004f56:	ab48      	add	r3, sp, #288	@ 0x120
 8004f58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004f5c:	e9c6 9a00 	strd	r9, sl, [r6]
 8004f60:	3d01      	subs	r5, #1
 8004f62:	e70c      	b.n	8004d7e <__kernel_rem_pio2+0x2c2>
 8004f64:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	dc09      	bgt.n	8004f7e <__kernel_rem_pio2+0x4c2>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	dc2c      	bgt.n	8004fc8 <__kernel_rem_pio2+0x50c>
 8004f6e:	d04e      	beq.n	800500e <__kernel_rem_pio2+0x552>
 8004f70:	9b05      	ldr	r3, [sp, #20]
 8004f72:	f003 0007 	and.w	r0, r3, #7
 8004f76:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d1f5      	bne.n	8004f70 <__kernel_rem_pio2+0x4b4>
 8004f84:	ab48      	add	r3, sp, #288	@ 0x120
 8004f86:	441c      	add	r4, r3
 8004f88:	4625      	mov	r5, r4
 8004f8a:	46da      	mov	sl, fp
 8004f8c:	f1ba 0f00 	cmp.w	sl, #0
 8004f90:	dc63      	bgt.n	800505a <__kernel_rem_pio2+0x59e>
 8004f92:	4625      	mov	r5, r4
 8004f94:	46da      	mov	sl, fp
 8004f96:	f1ba 0f01 	cmp.w	sl, #1
 8004f9a:	dc7b      	bgt.n	8005094 <__kernel_rem_pio2+0x5d8>
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	f1bb 0f01 	cmp.w	fp, #1
 8004fa4:	f300 8093 	bgt.w	80050ce <__kernel_rem_pio2+0x612>
 8004fa8:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004fac:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004fb0:	9b00      	ldr	r3, [sp, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f040 8092 	bne.w	80050dc <__kernel_rem_pio2+0x620>
 8004fb8:	9b04      	ldr	r3, [sp, #16]
 8004fba:	e9c3 7800 	strd	r7, r8, [r3]
 8004fbe:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004fc2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004fc6:	e7d3      	b.n	8004f70 <__kernel_rem_pio2+0x4b4>
 8004fc8:	465d      	mov	r5, fp
 8004fca:	2000      	movs	r0, #0
 8004fcc:	2100      	movs	r1, #0
 8004fce:	ab48      	add	r3, sp, #288	@ 0x120
 8004fd0:	441c      	add	r4, r3
 8004fd2:	2d00      	cmp	r5, #0
 8004fd4:	da32      	bge.n	800503c <__kernel_rem_pio2+0x580>
 8004fd6:	9b00      	ldr	r3, [sp, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d035      	beq.n	8005048 <__kernel_rem_pio2+0x58c>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004fe2:	9c04      	ldr	r4, [sp, #16]
 8004fe4:	2501      	movs	r5, #1
 8004fe6:	e9c4 2300 	strd	r2, r3, [r4]
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004ff2:	f7fb f8b1 	bl	8000158 <__aeabi_dsub>
 8004ff6:	ac48      	add	r4, sp, #288	@ 0x120
 8004ff8:	45ab      	cmp	fp, r5
 8004ffa:	da28      	bge.n	800504e <__kernel_rem_pio2+0x592>
 8004ffc:	9b00      	ldr	r3, [sp, #0]
 8004ffe:	b113      	cbz	r3, 8005006 <__kernel_rem_pio2+0x54a>
 8005000:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005004:	4619      	mov	r1, r3
 8005006:	9b04      	ldr	r3, [sp, #16]
 8005008:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800500c:	e7b0      	b.n	8004f70 <__kernel_rem_pio2+0x4b4>
 800500e:	2000      	movs	r0, #0
 8005010:	2100      	movs	r1, #0
 8005012:	ab48      	add	r3, sp, #288	@ 0x120
 8005014:	441c      	add	r4, r3
 8005016:	f1bb 0f00 	cmp.w	fp, #0
 800501a:	da08      	bge.n	800502e <__kernel_rem_pio2+0x572>
 800501c:	9b00      	ldr	r3, [sp, #0]
 800501e:	b113      	cbz	r3, 8005026 <__kernel_rem_pio2+0x56a>
 8005020:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005024:	4619      	mov	r1, r3
 8005026:	9b04      	ldr	r3, [sp, #16]
 8005028:	e9c3 0100 	strd	r0, r1, [r3]
 800502c:	e7a0      	b.n	8004f70 <__kernel_rem_pio2+0x4b4>
 800502e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005032:	f7fb f893 	bl	800015c <__adddf3>
 8005036:	f10b 3bff 	add.w	fp, fp, #4294967295
 800503a:	e7ec      	b.n	8005016 <__kernel_rem_pio2+0x55a>
 800503c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005040:	f7fb f88c 	bl	800015c <__adddf3>
 8005044:	3d01      	subs	r5, #1
 8005046:	e7c4      	b.n	8004fd2 <__kernel_rem_pio2+0x516>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	e7c9      	b.n	8004fe2 <__kernel_rem_pio2+0x526>
 800504e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8005052:	f7fb f883 	bl	800015c <__adddf3>
 8005056:	3501      	adds	r5, #1
 8005058:	e7ce      	b.n	8004ff8 <__kernel_rem_pio2+0x53c>
 800505a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800505e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8005062:	4640      	mov	r0, r8
 8005064:	4649      	mov	r1, r9
 8005066:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800506a:	f7fb f877 	bl	800015c <__adddf3>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4606      	mov	r6, r0
 8005074:	460f      	mov	r7, r1
 8005076:	4640      	mov	r0, r8
 8005078:	4649      	mov	r1, r9
 800507a:	f7fb f86d 	bl	8000158 <__aeabi_dsub>
 800507e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005082:	f7fb f86b 	bl	800015c <__adddf3>
 8005086:	e865 0102 	strd	r0, r1, [r5], #-8
 800508a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800508e:	e9c5 6700 	strd	r6, r7, [r5]
 8005092:	e77b      	b.n	8004f8c <__kernel_rem_pio2+0x4d0>
 8005094:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005098:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800509c:	4640      	mov	r0, r8
 800509e:	4649      	mov	r1, r9
 80050a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050a4:	f7fb f85a 	bl	800015c <__adddf3>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4606      	mov	r6, r0
 80050ae:	460f      	mov	r7, r1
 80050b0:	4640      	mov	r0, r8
 80050b2:	4649      	mov	r1, r9
 80050b4:	f7fb f850 	bl	8000158 <__aeabi_dsub>
 80050b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050bc:	f7fb f84e 	bl	800015c <__adddf3>
 80050c0:	e865 0102 	strd	r0, r1, [r5], #-8
 80050c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050c8:	e9c5 6700 	strd	r6, r7, [r5]
 80050cc:	e763      	b.n	8004f96 <__kernel_rem_pio2+0x4da>
 80050ce:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80050d2:	f7fb f843 	bl	800015c <__adddf3>
 80050d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80050da:	e761      	b.n	8004fa0 <__kernel_rem_pio2+0x4e4>
 80050dc:	9b04      	ldr	r3, [sp, #16]
 80050de:	9a04      	ldr	r2, [sp, #16]
 80050e0:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80050e4:	601f      	str	r7, [r3, #0]
 80050e6:	605c      	str	r4, [r3, #4]
 80050e8:	609d      	str	r5, [r3, #8]
 80050ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80050ee:	60d3      	str	r3, [r2, #12]
 80050f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80050f4:	6110      	str	r0, [r2, #16]
 80050f6:	6153      	str	r3, [r2, #20]
 80050f8:	e73a      	b.n	8004f70 <__kernel_rem_pio2+0x4b4>
 80050fa:	bf00      	nop
 80050fc:	41700000 	.word	0x41700000
 8005100:	3e700000 	.word	0x3e700000
 8005104:	00000000 	.word	0x00000000

08005108 <floor>:
 8005108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800510c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005110:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8005114:	2e13      	cmp	r6, #19
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	460c      	mov	r4, r1
 800511c:	4605      	mov	r5, r0
 800511e:	4680      	mov	r8, r0
 8005120:	dc35      	bgt.n	800518e <floor+0x86>
 8005122:	2e00      	cmp	r6, #0
 8005124:	da17      	bge.n	8005156 <floor+0x4e>
 8005126:	a334      	add	r3, pc, #208	@ (adr r3, 80051f8 <floor+0xf0>)
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f7fb f816 	bl	800015c <__adddf3>
 8005130:	2200      	movs	r2, #0
 8005132:	2300      	movs	r3, #0
 8005134:	f7fb fc58 	bl	80009e8 <__aeabi_dcmpgt>
 8005138:	b150      	cbz	r0, 8005150 <floor+0x48>
 800513a:	2c00      	cmp	r4, #0
 800513c:	da57      	bge.n	80051ee <floor+0xe6>
 800513e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005142:	432c      	orrs	r4, r5
 8005144:	2500      	movs	r5, #0
 8005146:	42ac      	cmp	r4, r5
 8005148:	4c2d      	ldr	r4, [pc, #180]	@ (8005200 <floor+0xf8>)
 800514a:	bf08      	it	eq
 800514c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005150:	4623      	mov	r3, r4
 8005152:	462a      	mov	r2, r5
 8005154:	e024      	b.n	80051a0 <floor+0x98>
 8005156:	4f2b      	ldr	r7, [pc, #172]	@ (8005204 <floor+0xfc>)
 8005158:	4137      	asrs	r7, r6
 800515a:	ea01 0c07 	and.w	ip, r1, r7
 800515e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8005162:	d01d      	beq.n	80051a0 <floor+0x98>
 8005164:	a324      	add	r3, pc, #144	@ (adr r3, 80051f8 <floor+0xf0>)
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	f7fa fff7 	bl	800015c <__adddf3>
 800516e:	2200      	movs	r2, #0
 8005170:	2300      	movs	r3, #0
 8005172:	f7fb fc39 	bl	80009e8 <__aeabi_dcmpgt>
 8005176:	2800      	cmp	r0, #0
 8005178:	d0ea      	beq.n	8005150 <floor+0x48>
 800517a:	2c00      	cmp	r4, #0
 800517c:	bfbe      	ittt	lt
 800517e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005182:	4133      	asrlt	r3, r6
 8005184:	18e4      	addlt	r4, r4, r3
 8005186:	2500      	movs	r5, #0
 8005188:	ea24 0407 	bic.w	r4, r4, r7
 800518c:	e7e0      	b.n	8005150 <floor+0x48>
 800518e:	2e33      	cmp	r6, #51	@ 0x33
 8005190:	dd0a      	ble.n	80051a8 <floor+0xa0>
 8005192:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005196:	d103      	bne.n	80051a0 <floor+0x98>
 8005198:	f7fa ffe0 	bl	800015c <__adddf3>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4610      	mov	r0, r2
 80051a2:	4619      	mov	r1, r3
 80051a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a8:	f04f 3cff 	mov.w	ip, #4294967295
 80051ac:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80051b0:	fa2c f707 	lsr.w	r7, ip, r7
 80051b4:	4207      	tst	r7, r0
 80051b6:	d0f3      	beq.n	80051a0 <floor+0x98>
 80051b8:	a30f      	add	r3, pc, #60	@ (adr r3, 80051f8 <floor+0xf0>)
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	f7fa ffcd 	bl	800015c <__adddf3>
 80051c2:	2200      	movs	r2, #0
 80051c4:	2300      	movs	r3, #0
 80051c6:	f7fb fc0f 	bl	80009e8 <__aeabi_dcmpgt>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d0c0      	beq.n	8005150 <floor+0x48>
 80051ce:	2c00      	cmp	r4, #0
 80051d0:	da0a      	bge.n	80051e8 <floor+0xe0>
 80051d2:	2e14      	cmp	r6, #20
 80051d4:	d101      	bne.n	80051da <floor+0xd2>
 80051d6:	3401      	adds	r4, #1
 80051d8:	e006      	b.n	80051e8 <floor+0xe0>
 80051da:	2301      	movs	r3, #1
 80051dc:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80051e0:	40b3      	lsls	r3, r6
 80051e2:	441d      	add	r5, r3
 80051e4:	4545      	cmp	r5, r8
 80051e6:	d3f6      	bcc.n	80051d6 <floor+0xce>
 80051e8:	ea25 0507 	bic.w	r5, r5, r7
 80051ec:	e7b0      	b.n	8005150 <floor+0x48>
 80051ee:	2500      	movs	r5, #0
 80051f0:	462c      	mov	r4, r5
 80051f2:	e7ad      	b.n	8005150 <floor+0x48>
 80051f4:	f3af 8000 	nop.w
 80051f8:	8800759c 	.word	0x8800759c
 80051fc:	7e37e43c 	.word	0x7e37e43c
 8005200:	bff00000 	.word	0xbff00000
 8005204:	000fffff 	.word	0x000fffff

08005208 <_init>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	bf00      	nop
 800520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520e:	bc08      	pop	{r3}
 8005210:	469e      	mov	lr, r3
 8005212:	4770      	bx	lr

08005214 <_fini>:
 8005214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005216:	bf00      	nop
 8005218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521a:	bc08      	pop	{r3}
 800521c:	469e      	mov	lr, r3
 800521e:	4770      	bx	lr
