
Mobile Robot 1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080052b0  080052b0  000062b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b0  080054b0  0000709c  2**0
                  CONTENTS
  4 .ARM          00000000  080054b0  080054b0  0000709c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054b0  080054b0  0000709c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054b0  080054b0  000064b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054b4  080054b4  000064b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  080054b8  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200000a0  08005554  000070a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08005554  00007380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087d8  00000000  00000000  000070c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001843  00000000  00000000  0000f89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  000110e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e6  00000000  00000000  00011b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a7a  00000000  00000000  00012306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b784  00000000  00000000  00029d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b7b  00000000  00000000  00035504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be07f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a0  00000000  00000000  000be0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c1264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005298 	.word	0x08005298

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	08005298 	.word	0x08005298

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <pulse_modulation>:

	//Motor parameters
	double k_phi = 9.76e-3;
	double R_a = 4.35;

	void pulse_modulation(uint16_t *duty_cycle1, uint16_t *duty_cycle2) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, *duty_cycle1); // left
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	881a      	ldrh	r2, [r3, #0]
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <pulse_modulation+0x28>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, *duty_cycle2); // right
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	881a      	ldrh	r2, [r3, #0]
 8000a64:	4b03      	ldr	r3, [pc, #12]	@ (8000a74 <pulse_modulation+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	641a      	str	r2, [r3, #64]	@ 0x40
	}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	2000014c 	.word	0x2000014c

08000a78 <convert_v_to_pwm>:


	void convert_v_to_pwm(uint16_t *duty_cycle1, uint16_t *duty_cycle2, double voltage_left, double voltage_right) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	e9c7 2300 	strd	r2, r3, [r7]
		*duty_cycle1 = (int)((voltage_left / 12) * 1000);
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <convert_v_to_pwm+0x80>)
 8000a8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a90:	f7ff fe44 	bl	800071c <__aeabi_ddiv>
 8000a94:	4602      	mov	r2, r0
 8000a96:	460b      	mov	r3, r1
 8000a98:	4610      	mov	r0, r2
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <convert_v_to_pwm+0x84>)
 8000aa2:	f7ff fd11 	bl	80004c8 <__aeabi_dmul>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4619      	mov	r1, r3
 8000aae:	f7ff ffa5 	bl	80009fc <__aeabi_d2iz>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	801a      	strh	r2, [r3, #0]
		*duty_cycle2 = (int)((voltage_right / 12) * 1000);
 8000aba:	f04f 0200 	mov.w	r2, #0
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <convert_v_to_pwm+0x80>)
 8000ac0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ac4:	f7ff fe2a 	bl	800071c <__aeabi_ddiv>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	460b      	mov	r3, r1
 8000acc:	4610      	mov	r0, r2
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <convert_v_to_pwm+0x84>)
 8000ad6:	f7ff fcf7 	bl	80004c8 <__aeabi_dmul>
 8000ada:	4602      	mov	r2, r0
 8000adc:	460b      	mov	r3, r1
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f7ff ff8b 	bl	80009fc <__aeabi_d2iz>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	801a      	strh	r2, [r3, #0]
	}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40280000 	.word	0x40280000
 8000afc:	408f4000 	.word	0x408f4000

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b04:	b0a3      	sub	sp, #140	@ 0x8c
 8000b06:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f001 fe3e 	bl	8002788 <HAL_Init>

  /* USER CODE BEGIN Init */
  //Controller parameters
      matrix K;
      allocate_matrix(&K, 3 ,1);
 8000b0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b10:	2201      	movs	r2, #1
 8000b12:	2103      	movs	r1, #3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fa99 	bl	800204c <allocate_matrix>
      K.index[0][0] = 1;
 8000b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	f04f 0200 	mov.w	r2, #0
 8000b22:	4b97      	ldr	r3, [pc, #604]	@ (8000d80 <main+0x280>)
 8000b24:	e9c1 2300 	strd	r2, r3, [r1]
      K.index[1][0] = 1;
 8000b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	6819      	ldr	r1, [r3, #0]
 8000b2e:	f04f 0200 	mov.w	r2, #0
 8000b32:	4b93      	ldr	r3, [pc, #588]	@ (8000d80 <main+0x280>)
 8000b34:	e9c1 2300 	strd	r2, r3, [r1]
      K.index[2][0] = 1;
 8000b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	6819      	ldr	r1, [r3, #0]
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	4b8f      	ldr	r3, [pc, #572]	@ (8000d80 <main+0x280>)
 8000b44:	e9c1 2300 	strd	r2, r3, [r1]

      matrix K_4;
      allocate_matrix(&K_4, 2, 2);
 8000b48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fa7b 	bl	800204c <allocate_matrix>
      K_4.index[0][0] = 1;
 8000b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b58:	6819      	ldr	r1, [r3, #0]
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	4b88      	ldr	r3, [pc, #544]	@ (8000d80 <main+0x280>)
 8000b60:	e9c1 2300 	strd	r2, r3, [r1]
      K_4.index[1][1] = 1;
 8000b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b66:	3304      	adds	r3, #4
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f103 0108 	add.w	r1, r3, #8
 8000b6e:	f04f 0200 	mov.w	r2, #0
 8000b72:	4b83      	ldr	r3, [pc, #524]	@ (8000d80 <main+0x280>)
 8000b74:	e9c1 2300 	strd	r2, r3, [r1]

      matrix v;
      allocate_matrix(&v, 2, 1);
 8000b78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2102      	movs	r1, #2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fa63 	bl	800204c <allocate_matrix>

      matrix v_r;
      allocate_matrix(&v_r, 2, 1);
 8000b86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 fa5c 	bl	800204c <allocate_matrix>
      v_r.index[0][0] = 0.5;
 8000b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b96:	6819      	ldr	r1, [r3, #0]
 8000b98:	f04f 0200 	mov.w	r2, #0
 8000b9c:	4b79      	ldr	r3, [pc, #484]	@ (8000d84 <main+0x284>)
 8000b9e:	e9c1 2300 	strd	r2, r3, [r1]
      v_r.index[1][0] = 0.5;
 8000ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	4b75      	ldr	r3, [pc, #468]	@ (8000d84 <main+0x284>)
 8000bae:	e9c1 2300 	strd	r2, r3, [r1]

      matrix v_c;
      allocate_matrix(&v_c, 2, 1);
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2102      	movs	r1, #2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fa46 	bl	800204c <allocate_matrix>

      matrix v_c_pre;
      allocate_matrix(&v_c_pre, 2, 1);
 8000bc0:	f107 0318 	add.w	r3, r7, #24
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fa3f 	bl	800204c <allocate_matrix>

      matrix u;
      allocate_matrix(&u, 2, 1);
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 fa38 	bl	800204c <allocate_matrix>

      matrix torque;
      allocate_matrix(&torque, 2, 1);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	2201      	movs	r2, #1
 8000be2:	2102      	movs	r1, #2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 fa31 	bl	800204c <allocate_matrix>

      velocity_control_input(&v_c, &v_c_pre, v_r, K, e_x, e_y, e_theta);
 8000bea:	4b67      	ldr	r3, [pc, #412]	@ (8000d88 <main+0x288>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf0:	4966      	ldr	r1, [pc, #408]	@ (8000d8c <main+0x28c>)
 8000bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bf6:	4c66      	ldr	r4, [pc, #408]	@ (8000d90 <main+0x290>)
 8000bf8:	cc30      	ldmia	r4, {r4, r5}
 8000bfa:	f107 0c18 	add.w	ip, r7, #24
 8000bfe:	f107 0620 	add.w	r6, r7, #32
 8000c02:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8000c06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000c0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000c0e:	466a      	mov	r2, sp
 8000c10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c18:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c20:	cb0c      	ldmia	r3, {r2, r3}
 8000c22:	4661      	mov	r1, ip
 8000c24:	4630      	mov	r0, r6
 8000c26:	f000 fe59 	bl	80018dc <velocity_control_input>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2a:	f000 fa65 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f000 fbaf 	bl	8001390 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c32:	f000 fa9d 	bl	8001170 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c36:	f000 faf3 	bl	8001220 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000c3a:	f000 fb45 	bl	80012c8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Motor left
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000c3e:	2108      	movs	r1, #8
 8000c40:	4854      	ldr	r0, [pc, #336]	@ (8000d94 <main+0x294>)
 8000c42:	f002 fc99 	bl	8003578 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2 | TIM_CHANNEL_1);
 8000c46:	2104      	movs	r1, #4
 8000c48:	4853      	ldr	r0, [pc, #332]	@ (8000d98 <main+0x298>)
 8000c4a:	f002 fdd9 	bl	8003800 <HAL_TIM_Encoder_Start>
  // Motor right
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000c4e:	210c      	movs	r1, #12
 8000c50:	4850      	ldr	r0, [pc, #320]	@ (8000d94 <main+0x294>)
 8000c52:	f002 fc91 	bl	8003578 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000c56:	2104      	movs	r1, #4
 8000c58:	4850      	ldr	r0, [pc, #320]	@ (8000d9c <main+0x29c>)
 8000c5a:	f002 fdd1 	bl	8003800 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  present_time = HAL_GetTick();
 8000c5e:	f001 fdeb 	bl	8002838 <HAL_GetTick>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fbb5 	bl	80003d4 <__aeabi_ui2d>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	494c      	ldr	r1, [pc, #304]	@ (8000da0 <main+0x2a0>)
 8000c70:	e9c1 2300 	strd	r2, r3, [r1]
  while (1)
  {

	  	  	  encoder_cnt1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000c74:	4b48      	ldr	r3, [pc, #288]	@ (8000d98 <main+0x298>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fbaa 	bl	80003d4 <__aeabi_ui2d>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4947      	ldr	r1, [pc, #284]	@ (8000da4 <main+0x2a4>)
 8000c86:	e9c1 2300 	strd	r2, r3, [r1]
	 	  	  double a = encoder_cnt1;
 8000c8a:	4b46      	ldr	r3, [pc, #280]	@ (8000da4 <main+0x2a4>)
 8000c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c90:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	 	  	  encoder_cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000c94:	4b41      	ldr	r3, [pc, #260]	@ (8000d9c <main+0x29c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fb9a 	bl	80003d4 <__aeabi_ui2d>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	4940      	ldr	r1, [pc, #256]	@ (8000da8 <main+0x2a8>)
 8000ca6:	e9c1 2300 	strd	r2, r3, [r1]
	 	  	  double b = encoder_cnt2;
 8000caa:	4b3f      	ldr	r3, [pc, #252]	@ (8000da8 <main+0x2a8>)
 8000cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	 	  	  if(HAL_GetTick() - present_time > sampling_interval) {
 8000cb4:	f001 fdc0 	bl	8002838 <HAL_GetTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fb8a 	bl	80003d4 <__aeabi_ui2d>
 8000cc0:	4b37      	ldr	r3, [pc, #220]	@ (8000da0 <main+0x2a0>)
 8000cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc6:	f7ff fa47 	bl	8000158 <__aeabi_dsub>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	4610      	mov	r0, r2
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4b36      	ldr	r3, [pc, #216]	@ (8000dac <main+0x2ac>)
 8000cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd8:	f7ff fe86 	bl	80009e8 <__aeabi_dcmpgt>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 81dc 	beq.w	800109c <main+0x59c>
	 	  	 		  	if(a - encoder1_previous < 0) {
 8000ce4:	4b32      	ldr	r3, [pc, #200]	@ (8000db0 <main+0x2b0>)
 8000ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8000cee:	f7ff fa33 	bl	8000158 <__aeabi_dsub>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	4610      	mov	r0, r2
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f04f 0200 	mov.w	r2, #0
 8000cfe:	f04f 0300 	mov.w	r3, #0
 8000d02:	f7ff fe53 	bl	80009ac <__aeabi_dcmplt>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d057      	beq.n	8000dbc <main+0x2bc>
	 	  	 		  		left_angular_velocity = ((a - encoder1_previous + 65535) / 660) * 6.18 / sampling_interval;
 8000d0c:	4b28      	ldr	r3, [pc, #160]	@ (8000db0 <main+0x2b0>)
 8000d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8000d16:	f7ff fa1f 	bl	8000158 <__aeabi_dsub>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	4610      	mov	r0, r2
 8000d20:	4619      	mov	r1, r3
 8000d22:	a313      	add	r3, pc, #76	@ (adr r3, 8000d70 <main+0x270>)
 8000d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d28:	f7ff fa18 	bl	800015c <__adddf3>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	460b      	mov	r3, r1
 8000d30:	4610      	mov	r0, r2
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <main+0x2b4>)
 8000d3a:	f7ff fcef 	bl	800071c <__aeabi_ddiv>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	4610      	mov	r0, r2
 8000d44:	4619      	mov	r1, r3
 8000d46:	a30c      	add	r3, pc, #48	@ (adr r3, 8000d78 <main+0x278>)
 8000d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4c:	f7ff fbbc 	bl	80004c8 <__aeabi_dmul>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4610      	mov	r0, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <main+0x2ac>)
 8000d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5e:	f7ff fcdd 	bl	800071c <__aeabi_ddiv>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	4914      	ldr	r1, [pc, #80]	@ (8000db8 <main+0x2b8>)
 8000d68:	e9c1 2300 	strd	r2, r3, [r1]
 8000d6c:	e04d      	b.n	8000e0a <main+0x30a>
 8000d6e:	bf00      	nop
 8000d70:	00000000 	.word	0x00000000
 8000d74:	40efffe0 	.word	0x40efffe0
 8000d78:	eb851eb8 	.word	0xeb851eb8
 8000d7c:	4018b851 	.word	0x4018b851
 8000d80:	3ff00000 	.word	0x3ff00000
 8000d84:	3fe00000 	.word	0x3fe00000
 8000d88:	200001d8 	.word	0x200001d8
 8000d8c:	200001e0 	.word	0x200001e0
 8000d90:	200001e8 	.word	0x200001e8
 8000d94:	2000014c 	.word	0x2000014c
 8000d98:	200000bc 	.word	0x200000bc
 8000d9c:	20000104 	.word	0x20000104
 8000da0:	20000228 	.word	0x20000228
 8000da4:	20000200 	.word	0x20000200
 8000da8:	20000208 	.word	0x20000208
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000210 	.word	0x20000210
 8000db4:	4084a000 	.word	0x4084a000
 8000db8:	200001b0 	.word	0x200001b0
	 	  	 		  	}
	 	  	 		  	else {
	 	  	 		  		left_angular_velocity = ((a - encoder1_previous) / 660) * 6.18 / sampling_interval;
 8000dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ea8 <main+0x3a8>)
 8000dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8000dc6:	f7ff f9c7 	bl	8000158 <__aeabi_dsub>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	4b35      	ldr	r3, [pc, #212]	@ (8000eac <main+0x3ac>)
 8000dd8:	f7ff fca0 	bl	800071c <__aeabi_ddiv>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	a32c      	add	r3, pc, #176	@ (adr r3, 8000e98 <main+0x398>)
 8000de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dea:	f7ff fb6d 	bl	80004c8 <__aeabi_dmul>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4610      	mov	r0, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb0 <main+0x3b0>)
 8000df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfc:	f7ff fc8e 	bl	800071c <__aeabi_ddiv>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	492b      	ldr	r1, [pc, #172]	@ (8000eb4 <main+0x3b4>)
 8000e06:	e9c1 2300 	strd	r2, r3, [r1]
	 	  	 		  	}

	 	  	 		  	if(b - encoder2_previous < 0) {
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb8 <main+0x3b8>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8000e14:	f7ff f9a0 	bl	8000158 <__aeabi_dsub>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	f7ff fdc0 	bl	80009ac <__aeabi_dcmplt>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d046      	beq.n	8000ec0 <main+0x3c0>
	 	  	 		  		right_angular_velocity = ((b - encoder2_previous + 65535) / 660) * 6.18 / sampling_interval;
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <main+0x3b8>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8000e3c:	f7ff f98c 	bl	8000158 <__aeabi_dsub>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	a315      	add	r3, pc, #84	@ (adr r3, 8000ea0 <main+0x3a0>)
 8000e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4e:	f7ff f985 	bl	800015c <__adddf3>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4610      	mov	r0, r2
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <main+0x3ac>)
 8000e60:	f7ff fc5c 	bl	800071c <__aeabi_ddiv>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	a30a      	add	r3, pc, #40	@ (adr r3, 8000e98 <main+0x398>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	f7ff fb29 	bl	80004c8 <__aeabi_dmul>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <main+0x3b0>)
 8000e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e84:	f7ff fc4a 	bl	800071c <__aeabi_ddiv>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	490b      	ldr	r1, [pc, #44]	@ (8000ebc <main+0x3bc>)
 8000e8e:	e9c1 2300 	strd	r2, r3, [r1]
 8000e92:	e03c      	b.n	8000f0e <main+0x40e>
 8000e94:	f3af 8000 	nop.w
 8000e98:	eb851eb8 	.word	0xeb851eb8
 8000e9c:	4018b851 	.word	0x4018b851
 8000ea0:	00000000 	.word	0x00000000
 8000ea4:	40efffe0 	.word	0x40efffe0
 8000ea8:	20000210 	.word	0x20000210
 8000eac:	4084a000 	.word	0x4084a000
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	200001b0 	.word	0x200001b0
 8000eb8:	20000218 	.word	0x20000218
 8000ebc:	200001b8 	.word	0x200001b8
	 	  	 		  	}
	 	  	 		  	else {
	 	  	 		  		right_angular_velocity = ((b - encoder2_previous) / 660) * 6.18 / sampling_interval;
 8000ec0:	4b79      	ldr	r3, [pc, #484]	@ (80010a8 <main+0x5a8>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8000eca:	f7ff f945 	bl	8000158 <__aeabi_dsub>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	4b74      	ldr	r3, [pc, #464]	@ (80010ac <main+0x5ac>)
 8000edc:	f7ff fc1e 	bl	800071c <__aeabi_ddiv>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	a36d      	add	r3, pc, #436	@ (adr r3, 80010a0 <main+0x5a0>)
 8000eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eee:	f7ff faeb 	bl	80004c8 <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4b6d      	ldr	r3, [pc, #436]	@ (80010b0 <main+0x5b0>)
 8000efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f00:	f7ff fc0c 	bl	800071c <__aeabi_ddiv>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	496a      	ldr	r1, [pc, #424]	@ (80010b4 <main+0x5b4>)
 8000f0a:	e9c1 2300 	strd	r2, r3, [r1]
	 	  	 		  	}
	 	  		  	encoder1_previous = a;
 8000f0e:	496a      	ldr	r1, [pc, #424]	@ (80010b8 <main+0x5b8>)
 8000f10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000f14:	e9c1 2300 	strd	r2, r3, [r1]
	 	  		  	encoder2_previous = b;
 8000f18:	4963      	ldr	r1, [pc, #396]	@ (80010a8 <main+0x5a8>)
 8000f1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000f1e:	e9c1 2300 	strd	r2, r3, [r1]

	 			//desired_trajectory(&v_r, x_r, y_r);
	 	  		velocity(&v, left_angular_velocity, right_angular_velocity);
 8000f22:	4b66      	ldr	r3, [pc, #408]	@ (80010bc <main+0x5bc>)
 8000f24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f28:	4b62      	ldr	r3, [pc, #392]	@ (80010b4 <main+0x5b4>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000f32:	e9cd 2300 	strd	r2, r3, [sp]
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f000 fbee 	bl	800171c <velocity>
	 	  		errors(&e_x, &e_y, &e_theta, x, y, theta, x_r, y_r, theta_r);
 8000f40:	4b5f      	ldr	r3, [pc, #380]	@ (80010c0 <main+0x5c0>)
 8000f42:	cb18      	ldmia	r3, {r3, r4}
 8000f44:	e9c7 3400 	strd	r3, r4, [r7]
 8000f48:	495e      	ldr	r1, [pc, #376]	@ (80010c4 <main+0x5c4>)
 8000f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f4e:	4c5e      	ldr	r4, [pc, #376]	@ (80010c8 <main+0x5c8>)
 8000f50:	cc30      	ldmia	r4, {r4, r5}
 8000f52:	4e5e      	ldr	r6, [pc, #376]	@ (80010cc <main+0x5cc>)
 8000f54:	e9d6 8900 	ldrd	r8, r9, [r6]
 8000f58:	4e5d      	ldr	r6, [pc, #372]	@ (80010d0 <main+0x5d0>)
 8000f5a:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8000f5e:	4e5d      	ldr	r6, [pc, #372]	@ (80010d4 <main+0x5d4>)
 8000f60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8000f64:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8000f68:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8000f6c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000f70:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f78:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f7c:	e9cd 3400 	strd	r3, r4, [sp]
 8000f80:	4a55      	ldr	r2, [pc, #340]	@ (80010d8 <main+0x5d8>)
 8000f82:	4956      	ldr	r1, [pc, #344]	@ (80010dc <main+0x5dc>)
 8000f84:	4856      	ldr	r0, [pc, #344]	@ (80010e0 <main+0x5e0>)
 8000f86:	f000 fc29 	bl	80017dc <errors>
	 	  		velocity_control_input(&v_c, &v_c_pre, v_r, K, e_x, e_y, e_theta);
 8000f8a:	4b55      	ldr	r3, [pc, #340]	@ (80010e0 <main+0x5e0>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	4952      	ldr	r1, [pc, #328]	@ (80010dc <main+0x5dc>)
 8000f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f96:	4c50      	ldr	r4, [pc, #320]	@ (80010d8 <main+0x5d8>)
 8000f98:	cc30      	ldmia	r4, {r4, r5}
 8000f9a:	f107 0c18 	add.w	ip, r7, #24
 8000f9e:	f107 0620 	add.w	r6, r7, #32
 8000fa2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8000fa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000faa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fae:	466a      	mov	r2, sp
 8000fb0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fb8:	e882 0003 	stmia.w	r2, {r0, r1}
 8000fbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fc0:	cb0c      	ldmia	r3, {r2, r3}
 8000fc2:	4661      	mov	r1, ip
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	f000 fc89 	bl	80018dc <velocity_control_input>
	 	  		control_input_signal(&u, v_c, v_c_pre, v, K_4);
 8000fca:	f107 0410 	add.w	r4, r7, #16
 8000fce:	aa03      	add	r2, sp, #12
 8000fd0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fd8:	e882 0003 	stmia.w	r2, {r0, r1}
 8000fdc:	aa01      	add	r2, sp, #4
 8000fde:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fe2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fe6:	e882 0003 	stmia.w	r2, {r0, r1}
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	f107 0220 	add.w	r2, r7, #32
 8000ff4:	ca06      	ldmia	r2, {r1, r2}
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f000 fd0c 	bl	8001a14 <control_input_signal>
	 	  		cal_torque(&torque, v, u);
 8000ffc:	f107 0008 	add.w	r0, r7, #8
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800100a:	ca06      	ldmia	r2, {r1, r2}
 800100c:	f000 fe86 	bl	8001d1c <cal_torque>
	 	  		voltage(&voltage_left, &voltage_right, left_angular_velocity, right_angular_velocity, &torque);
 8001010:	4b2a      	ldr	r3, [pc, #168]	@ (80010bc <main+0x5bc>)
 8001012:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001016:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <main+0x5b4>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f107 0408 	add.w	r4, r7, #8
 8001020:	9402      	str	r4, [sp, #8]
 8001022:	e9cd 2300 	strd	r2, r3, [sp]
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	492e      	ldr	r1, [pc, #184]	@ (80010e4 <main+0x5e4>)
 800102c:	482e      	ldr	r0, [pc, #184]	@ (80010e8 <main+0x5e8>)
 800102e:	f000 ff97 	bl	8001f60 <voltage>
	 	  		next_state(&x, &y, &theta, &x_r, &y_r, &theta_r, v, v_r);
 8001032:	aa04      	add	r2, sp, #16
 8001034:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001038:	e893 0003 	ldmia.w	r3, {r0, r1}
 800103c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001040:	aa02      	add	r2, sp, #8
 8001042:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001046:	e893 0003 	ldmia.w	r3, {r0, r1}
 800104a:	e882 0003 	stmia.w	r2, {r0, r1}
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <main+0x5d4>)
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <main+0x5d0>)
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <main+0x5cc>)
 8001058:	4a1b      	ldr	r2, [pc, #108]	@ (80010c8 <main+0x5c8>)
 800105a:	491a      	ldr	r1, [pc, #104]	@ (80010c4 <main+0x5c4>)
 800105c:	4818      	ldr	r0, [pc, #96]	@ (80010c0 <main+0x5c0>)
 800105e:	f000 fd7f 	bl	8001b60 <next_state>
	 	  		convert_v_to_pwm(&duty_cycle1, &duty_cycle2, voltage_left, voltage_right);
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <main+0x5e8>)
 8001064:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001068:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <main+0x5e4>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	e9cd 2300 	strd	r2, r3, [sp]
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	491d      	ldr	r1, [pc, #116]	@ (80010ec <main+0x5ec>)
 8001078:	481d      	ldr	r0, [pc, #116]	@ (80010f0 <main+0x5f0>)
 800107a:	f7ff fcfd 	bl	8000a78 <convert_v_to_pwm>
	 	  		pulse_modulation(&duty_cycle1, &duty_cycle2);
 800107e:	491b      	ldr	r1, [pc, #108]	@ (80010ec <main+0x5ec>)
 8001080:	481b      	ldr	r0, [pc, #108]	@ (80010f0 <main+0x5f0>)
 8001082:	f7ff fce3 	bl	8000a4c <pulse_modulation>
//
//	  		pulse_modulation_test();
	  		present_time = HAL_GetTick();
 8001086:	f001 fbd7 	bl	8002838 <HAL_GetTick>
 800108a:	4603      	mov	r3, r0
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f9a1 	bl	80003d4 <__aeabi_ui2d>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4917      	ldr	r1, [pc, #92]	@ (80010f4 <main+0x5f4>)
 8001098:	e9c1 2300 	strd	r2, r3, [r1]
  {
 800109c:	e5ea      	b.n	8000c74 <main+0x174>
 800109e:	bf00      	nop
 80010a0:	eb851eb8 	.word	0xeb851eb8
 80010a4:	4018b851 	.word	0x4018b851
 80010a8:	20000218 	.word	0x20000218
 80010ac:	4084a000 	.word	0x4084a000
 80010b0:	20000000 	.word	0x20000000
 80010b4:	200001b8 	.word	0x200001b8
 80010b8:	20000210 	.word	0x20000210
 80010bc:	200001b0 	.word	0x200001b0
 80010c0:	20000198 	.word	0x20000198
 80010c4:	200001a0 	.word	0x200001a0
 80010c8:	200001a8 	.word	0x200001a8
 80010cc:	200001c0 	.word	0x200001c0
 80010d0:	200001c8 	.word	0x200001c8
 80010d4:	200001d0 	.word	0x200001d0
 80010d8:	200001e8 	.word	0x200001e8
 80010dc:	200001e0 	.word	0x200001e0
 80010e0:	200001d8 	.word	0x200001d8
 80010e4:	200001f8 	.word	0x200001f8
 80010e8:	200001f0 	.word	0x200001f0
 80010ec:	20000222 	.word	0x20000222
 80010f0:	20000220 	.word	0x20000220
 80010f4:	20000228 	.word	0x20000228

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b090      	sub	sp, #64	@ 0x40
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	2228      	movs	r2, #40	@ 0x28
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f003 f81c 	bl	8004144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111e:	2301      	movs	r3, #1
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001122:	2310      	movs	r3, #16
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001126:	2300      	movs	r3, #0
 8001128:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112a:	f107 0318 	add.w	r3, r7, #24
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fdf4 	bl	8002d1c <HAL_RCC_OscConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800113a:	f000 f96d 	bl	8001418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113e:	230f      	movs	r3, #15
 8001140:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f002 f862 	bl	8003220 <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001162:	f000 f959 	bl	8001418 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3740      	adds	r7, #64	@ 0x40
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	@ 0x30
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	2224      	movs	r2, #36	@ 0x24
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f002 ffe0 	bl	8004144 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800118c:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <MX_TIM1_Init+0xa8>)
 800118e:	4a23      	ldr	r2, [pc, #140]	@ (800121c <MX_TIM1_Init+0xac>)
 8001190:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001192:	4b21      	ldr	r3, [pc, #132]	@ (8001218 <MX_TIM1_Init+0xa8>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <MX_TIM1_Init+0xa8>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <MX_TIM1_Init+0xa8>)
 80011a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <MX_TIM1_Init+0xa8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <MX_TIM1_Init+0xa8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b2:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <MX_TIM1_Init+0xa8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011b8:	2303      	movs	r3, #3
 80011ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011c0:	2301      	movs	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011d0:	2301      	movs	r3, #1
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	480d      	ldr	r0, [pc, #52]	@ (8001218 <MX_TIM1_Init+0xa8>)
 80011e4:	f002 fa6a 	bl	80036bc <HAL_TIM_Encoder_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80011ee:	f000 f913 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	@ (8001218 <MX_TIM1_Init+0xa8>)
 8001200:	f002 fe68 	bl	8003ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800120a:	f000 f905 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3730      	adds	r7, #48	@ 0x30
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200000bc 	.word	0x200000bc
 800121c:	40012c00 	.word	0x40012c00

08001220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	@ 0x30
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	2224      	movs	r2, #36	@ 0x24
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f002 ff88 	bl	8004144 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800123c:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <MX_TIM2_Init+0xa4>)
 800123e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001242:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001244:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <MX_TIM2_Init+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <MX_TIM2_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <MX_TIM2_Init+0xa4>)
 8001252:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001256:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_TIM2_Init+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <MX_TIM2_Init+0xa4>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001264:	2303      	movs	r3, #3
 8001266:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800126c:	2301      	movs	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800127c:	2301      	movs	r3, #1
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	4619      	mov	r1, r3
 800128e:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <MX_TIM2_Init+0xa4>)
 8001290:	f002 fa14 	bl	80036bc <HAL_TIM_Encoder_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800129a:	f000 f8bd 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4806      	ldr	r0, [pc, #24]	@ (80012c4 <MX_TIM2_Init+0xa4>)
 80012ac:	f002 fe12 	bl	8003ed4 <HAL_TIMEx_MasterConfigSynchronization>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012b6:	f000 f8af 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	3730      	adds	r7, #48	@ 0x30
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000104 	.word	0x20000104

080012c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ce:	f107 0320 	add.w	r3, r7, #32
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ea:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <MX_TIM4_Init+0xc0>)
 80012ec:	4a27      	ldr	r2, [pc, #156]	@ (800138c <MX_TIM4_Init+0xc4>)
 80012ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35;
 80012f0:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <MX_TIM4_Init+0xc0>)
 80012f2:	2223      	movs	r2, #35	@ 0x23
 80012f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <MX_TIM4_Init+0xc0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <MX_TIM4_Init+0xc0>)
 80012fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001302:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <MX_TIM4_Init+0xc0>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <MX_TIM4_Init+0xc0>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001310:	481d      	ldr	r0, [pc, #116]	@ (8001388 <MX_TIM4_Init+0xc0>)
 8001312:	f002 f8e1 	bl	80034d8 <HAL_TIM_PWM_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800131c:	f000 f87c 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001328:	f107 0320 	add.w	r3, r7, #32
 800132c:	4619      	mov	r1, r3
 800132e:	4816      	ldr	r0, [pc, #88]	@ (8001388 <MX_TIM4_Init+0xc0>)
 8001330:	f002 fdd0 	bl	8003ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800133a:	f000 f86d 	bl	8001418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133e:	2360      	movs	r3, #96	@ 0x60
 8001340:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2208      	movs	r2, #8
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <MX_TIM4_Init+0xc0>)
 8001356:	f002 fae1 	bl	800391c <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001360:	f000 f85a 	bl	8001418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	220c      	movs	r2, #12
 8001368:	4619      	mov	r1, r3
 800136a:	4807      	ldr	r0, [pc, #28]	@ (8001388 <MX_TIM4_Init+0xc0>)
 800136c:	f002 fad6 	bl	800391c <HAL_TIM_PWM_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001376:	f000 f84f 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800137a:	4803      	ldr	r0, [pc, #12]	@ (8001388 <MX_TIM4_Init+0xc0>)
 800137c:	f000 f90c 	bl	8001598 <HAL_TIM_MspPostInit>

}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	@ 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000014c 	.word	0x2000014c
 800138c:	40000800 	.word	0x40000800

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <MX_GPIO_Init+0x80>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <MX_GPIO_Init+0x80>)
 80013aa:	f043 0320 	orr.w	r3, r3, #32
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <MX_GPIO_Init+0x80>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0320 	and.w	r3, r3, #32
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <MX_GPIO_Init+0x80>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a13      	ldr	r2, [pc, #76]	@ (8001410 <MX_GPIO_Init+0x80>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <MX_GPIO_Init+0x80>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <MX_GPIO_Init+0x80>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <MX_GPIO_Init+0x80>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <MX_GPIO_Init+0x80>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : CFG0_Pin CFG1_Pin CFG2_Pin */
  GPIO_InitStruct.Pin = CFG0_Pin|CFG1_Pin|CFG2_Pin;
 80013ec:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80013f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4619      	mov	r1, r3
 8001400:	4804      	ldr	r0, [pc, #16]	@ (8001414 <MX_GPIO_Init+0x84>)
 8001402:	f001 fb07 	bl	8002a14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001406:	bf00      	nop
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	40010c00 	.word	0x40010c00

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <Error_Handler+0x8>

08001424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <HAL_MspInit+0x5c>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <HAL_MspInit+0x5c>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6193      	str	r3, [r2, #24]
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_MspInit+0x5c>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <HAL_MspInit+0x5c>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a0e      	ldr	r2, [pc, #56]	@ (8001480 <HAL_MspInit+0x5c>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144c:	61d3      	str	r3, [r2, #28]
 800144e:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <HAL_MspInit+0x5c>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_MspInit+0x60>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <HAL_MspInit+0x60>)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000
 8001484:	40010000 	.word	0x40010000

08001488 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	@ 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0318 	add.w	r3, r7, #24
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001550 <HAL_TIM_Encoder_MspInit+0xc8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d125      	bne.n	80014f4 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a29      	ldr	r2, [pc, #164]	@ (8001554 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b27      	ldr	r3, [pc, #156]	@ (8001554 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b24      	ldr	r3, [pc, #144]	@ (8001554 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a23      	ldr	r2, [pc, #140]	@ (8001554 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN1_1_Pin|EN1_2_Pin;
 80014d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0318 	add.w	r3, r7, #24
 80014ea:	4619      	mov	r1, r3
 80014ec:	481a      	ldr	r0, [pc, #104]	@ (8001558 <HAL_TIM_Encoder_MspInit+0xd0>)
 80014ee:	f001 fa91 	bl	8002a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014f2:	e028      	b.n	8001546 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014fc:	d123      	bne.n	8001546 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a14      	ldr	r2, [pc, #80]	@ (8001554 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <HAL_TIM_Encoder_MspInit+0xcc>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a0e      	ldr	r2, [pc, #56]	@ (8001554 <HAL_TIM_Encoder_MspInit+0xcc>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EN2_1_Pin|EN2_2_Pin;
 800152e:	2303      	movs	r3, #3
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001536:	2301      	movs	r3, #1
 8001538:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0318 	add.w	r3, r7, #24
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	@ (8001558 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001542:	f001 fa67 	bl	8002a14 <HAL_GPIO_Init>
}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	@ 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40012c00 	.word	0x40012c00
 8001554:	40021000 	.word	0x40021000
 8001558:	40010800 	.word	0x40010800

0800155c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <HAL_TIM_PWM_MspInit+0x34>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10b      	bne.n	8001586 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <HAL_TIM_PWM_MspInit+0x38>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a08      	ldr	r2, [pc, #32]	@ (8001594 <HAL_TIM_PWM_MspInit+0x38>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_TIM_PWM_MspInit+0x38>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	40000800 	.word	0x40000800
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a10      	ldr	r2, [pc, #64]	@ (80015f4 <HAL_TIM_MspPostInit+0x5c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d118      	bne.n	80015ea <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_TIM_MspPostInit+0x60>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a0e      	ldr	r2, [pc, #56]	@ (80015f8 <HAL_TIM_MspPostInit+0x60>)
 80015be:	f043 0308 	orr.w	r3, r3, #8
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <HAL_TIM_MspPostInit+0x60>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = MT1_Pin|MT2_Pin;
 80015d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015da:	2301      	movs	r3, #1
 80015dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	@ (80015fc <HAL_TIM_MspPostInit+0x64>)
 80015e6:	f001 fa15 	bl	8002a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40000800 	.word	0x40000800
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010c00 	.word	0x40010c00

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <NMI_Handler+0x4>

08001608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <MemManage_Handler+0x4>

08001618 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <UsageFault_Handler+0x4>

08001628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f001 f8e0 	bl	8002814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f002 fd74 	bl	8004174 <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	@ (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20005000 	.word	0x20005000
 80016b8:	00000400 	.word	0x00000400
 80016bc:	20000230 	.word	0x20000230
 80016c0:	20000380 	.word	0x20000380

080016c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d0:	f7ff fff8 	bl	80016c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d4:	480b      	ldr	r0, [pc, #44]	@ (8001704 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016d6:	490c      	ldr	r1, [pc, #48]	@ (8001708 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016d8:	4a0c      	ldr	r2, [pc, #48]	@ (800170c <LoopFillZerobss+0x16>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a09      	ldr	r2, [pc, #36]	@ (8001710 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016ec:	4c09      	ldr	r4, [pc, #36]	@ (8001714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fa:	f002 fd41 	bl	8004180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016fe:	f7ff f9ff 	bl	8000b00 <main>
  bx lr
 8001702:	4770      	bx	lr
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800170c:	080054b8 	.word	0x080054b8
  ldr r2, =_sbss
 8001710:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001714:	20000380 	.word	0x20000380

08001718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC1_2_IRQHandler>
	...

0800171c <velocity>:
//    / (pow(v_r->index[0][0] , 4) * pow(derivative_y_r , 2) + pow(d , 2) * ((derivative_x_r * derivative_v_r - derivative_x_r_2nd * pow(v_r->index[0][0] , 2))
//    + (derivative_x_r * derivative_v_r - derivative_x_r_2nd * v_r->index[0][0]) / (v_r->index[0][0] * derivative_y_r)));
//}

void velocity(matrix *v, double left_angular_velocity, double right_angular_velocity)
{
 800171c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	e9c7 2300 	strd	r2, r3, [r7]
    v->index[0][0] = r / 2 * (left_angular_velocity + right_angular_velocity);
 800172a:	4b2a      	ldr	r3, [pc, #168]	@ (80017d4 <velocity+0xb8>)
 800172c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001738:	f7fe fff0 	bl	800071c <__aeabi_ddiv>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4690      	mov	r8, r2
 8001742:	4699      	mov	r9, r3
 8001744:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800174c:	f7fe fd06 	bl	800015c <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681c      	ldr	r4, [r3, #0]
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4640      	mov	r0, r8
 8001764:	4649      	mov	r1, r9
 8001766:	f7fe feaf 	bl	80004c8 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	e9c4 2300 	strd	r2, r3, [r4]
    v->index[1][0] = r / (2 * R) * (right_angular_velocity - left_angular_velocity);
 8001772:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <velocity+0xb8>)
 8001774:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001778:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <velocity+0xbc>)
 800177a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	f7fe fceb 	bl	800015c <__adddf3>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4620      	mov	r0, r4
 800178c:	4629      	mov	r1, r5
 800178e:	f7fe ffc5 	bl	800071c <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4690      	mov	r8, r2
 8001798:	4699      	mov	r9, r3
 800179a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800179e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017a2:	f7fe fcd9 	bl	8000158 <__aeabi_dsub>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3304      	adds	r3, #4
 80017b4:	681c      	ldr	r4, [r3, #0]
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4640      	mov	r0, r8
 80017bc:	4649      	mov	r1, r9
 80017be:	f7fe fe83 	bl	80004c8 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	e9c4 2300 	strd	r2, r3, [r4]
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017d4:	20000010 	.word	0x20000010
 80017d8:	20000018 	.word	0x20000018

080017dc <errors>:

void errors(double *e_x, double *e_y, double *e_theta, double x, double y, double theta, double x_r, double y_r, double theta_r)
{
 80017dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
    *e_x = cos(theta) * (x_r - x) + sin(theta) * (y_r - y);
 80017ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80017ee:	f002 fd35 	bl	800425c <cos>
 80017f2:	4680      	mov	r8, r0
 80017f4:	4689      	mov	r9, r1
 80017f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80017fe:	f7fe fcab 	bl	8000158 <__aeabi_dsub>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4640      	mov	r0, r8
 8001808:	4649      	mov	r1, r9
 800180a:	f7fe fe5d 	bl	80004c8 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4692      	mov	sl, r2
 8001814:	469b      	mov	fp, r3
 8001816:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800181a:	f002 fd65 	bl	80042e8 <sin>
 800181e:	4680      	mov	r8, r0
 8001820:	4689      	mov	r9, r1
 8001822:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001826:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800182a:	f7fe fc95 	bl	8000158 <__aeabi_dsub>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4640      	mov	r0, r8
 8001834:	4649      	mov	r1, r9
 8001836:	f7fe fe47 	bl	80004c8 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4650      	mov	r0, sl
 8001840:	4659      	mov	r1, fp
 8001842:	f7fe fc8b 	bl	800015c <__adddf3>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	68f9      	ldr	r1, [r7, #12]
 800184c:	e9c1 2300 	strd	r2, r3, [r1]
    *e_y = (-1) * sin(theta) * (x_r - x) + cos(theta) * (y_r - y);
 8001850:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001854:	f002 fd48 	bl	80042e8 <sin>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4614      	mov	r4, r2
 800185e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001862:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001866:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800186a:	f7fe fc75 	bl	8000158 <__aeabi_dsub>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4620      	mov	r0, r4
 8001874:	4629      	mov	r1, r5
 8001876:	f7fe fe27 	bl	80004c8 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4690      	mov	r8, r2
 8001880:	4699      	mov	r9, r3
 8001882:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001886:	f002 fce9 	bl	800425c <cos>
 800188a:	4604      	mov	r4, r0
 800188c:	460d      	mov	r5, r1
 800188e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001892:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001896:	f7fe fc5f 	bl	8000158 <__aeabi_dsub>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f7fe fe11 	bl	80004c8 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4640      	mov	r0, r8
 80018ac:	4649      	mov	r1, r9
 80018ae:	f7fe fc55 	bl	800015c <__adddf3>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	e9c1 2300 	strd	r2, r3, [r1]
    *e_theta = theta_r - theta;
 80018bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80018c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80018c4:	f7fe fc48 	bl	8000158 <__aeabi_dsub>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	e9c1 2300 	strd	r2, r3, [r1]
}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080018dc <velocity_control_input>:

// Caculate virtural control signal
// Must allocate v_c matrix and K matrix in the main program
void velocity_control_input(matrix *v_c, matrix *v_c_pre, matrix v_r, matrix K, double e_x, double e_y, double e_theta)
{
 80018dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	4639      	mov	r1, r7
 80018ea:	e881 000c 	stmia.w	r1, {r2, r3}
    // lưu trữ v_c để tính derivative_v_c
    v_c_pre->index[0][0] = v_c->index[0][0];
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	6811      	ldr	r1, [r2, #0]
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	e9c1 2300 	strd	r2, r3, [r1]
    v_c_pre->index[1][0] = v_c->index[1][0];
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3304      	adds	r3, #4
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	3204      	adds	r2, #4
 8001910:	6811      	ldr	r1, [r2, #0]
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	e9c1 2300 	strd	r2, r3, [r1]

    // tính toán v_c tiếp theo
    v_c->index[0][0] = v_r.index[0][0] * cos(e_theta) + K.index[0][0] * e_x;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001922:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001926:	f002 fc99 	bl	800425c <cos>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4620      	mov	r0, r4
 8001930:	4629      	mov	r1, r5
 8001932:	f7fe fdc9 	bl	80004c8 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4690      	mov	r8, r2
 800193c:	4699      	mov	r9, r3
 800193e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001946:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800194a:	f7fe fdbd 	bl	80004c8 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681c      	ldr	r4, [r3, #0]
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4640      	mov	r0, r8
 8001962:	4649      	mov	r1, r9
 8001964:	f7fe fbfa 	bl	800015c <__adddf3>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	e9c4 2300 	strd	r2, r3, [r4]
    v_c->index[1][0] = v_r.index[1][0] + K.index[1][0] * v_r.index[0][0]* e_y + K.index[2][0] * v_r.index[0][0] * sin(e_theta);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	3304      	adds	r3, #4
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	e9d3 4500 	ldrd	r4, r5, [r3]
 800197a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197c:	3304      	adds	r3, #4
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe fd9c 	bl	80004c8 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800199c:	f7fe fd94 	bl	80004c8 <__aeabi_dmul>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4620      	mov	r0, r4
 80019a6:	4629      	mov	r1, r5
 80019a8:	f7fe fbd8 	bl	800015c <__adddf3>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4690      	mov	r8, r2
 80019b2:	4699      	mov	r9, r3
 80019b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b6:	3308      	adds	r3, #8
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	f7fe fd7f 	bl	80004c8 <__aeabi_dmul>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4614      	mov	r4, r2
 80019d0:	461d      	mov	r5, r3
 80019d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80019d6:	f002 fc87 	bl	80042e8 <sin>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4620      	mov	r0, r4
 80019e0:	4629      	mov	r1, r5
 80019e2:	f7fe fd71 	bl	80004c8 <__aeabi_dmul>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	3304      	adds	r3, #4
 80019f4:	681c      	ldr	r4, [r3, #0]
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4640      	mov	r0, r8
 80019fc:	4649      	mov	r1, r9
 80019fe:	f7fe fbad 	bl	800015c <__adddf3>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	e9c4 2300 	strd	r2, r3, [r4]
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001a14 <control_input_signal>:

// Calculate the control signal u
// Must allocate u matrix in the main program
void control_input_signal(matrix *u, matrix v_c, matrix v_c_pre, matrix v, matrix K_4)
{
 8001a14:	b082      	sub	sp, #8
 8001a16:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8001a1a:	b08b      	sub	sp, #44	@ 0x2c
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	1d38      	adds	r0, r7, #4
 8001a22:	e880 0006 	stmia.w	r0, {r1, r2}
 8001a26:	647b      	str	r3, [r7, #68]	@ 0x44

    matrix derivative_v_c;
    allocate_matrix(&derivative_v_c, 2, 1);
 8001a28:	f107 0320 	add.w	r3, r7, #32
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2102      	movs	r1, #2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fb0b 	bl	800204c <allocate_matrix>
    derivative_v_c.index[0][0] = (v_c.index[0][0] - v_c_pre.index[0][0]) / sampling_interval;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f7fe fb87 	bl	8000158 <__aeabi_dsub>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4690      	mov	r8, r2
 8001a50:	4699      	mov	r9, r3
 8001a52:	4b42      	ldr	r3, [pc, #264]	@ (8001b5c <control_input_signal+0x148>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	6a39      	ldr	r1, [r7, #32]
 8001a5a:	680c      	ldr	r4, [r1, #0]
 8001a5c:	4640      	mov	r0, r8
 8001a5e:	4649      	mov	r1, r9
 8001a60:	f7fe fe5c 	bl	800071c <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	e9c4 2300 	strd	r2, r3, [r4]
    derivative_v_c.index[1][0] = (v_c.index[1][0] - v_c_pre.index[1][0]) / sampling_interval;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a78:	3304      	adds	r3, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fb6a 	bl	8000158 <__aeabi_dsub>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4690      	mov	r8, r2
 8001a8a:	4699      	mov	r9, r3
 8001a8c:	4b33      	ldr	r3, [pc, #204]	@ (8001b5c <control_input_signal+0x148>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	6a39      	ldr	r1, [r7, #32]
 8001a94:	3104      	adds	r1, #4
 8001a96:	680c      	ldr	r4, [r1, #0]
 8001a98:	4640      	mov	r0, r8
 8001a9a:	4649      	mov	r1, r9
 8001a9c:	f7fe fe3e 	bl	800071c <__aeabi_ddiv>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	e9c4 2300 	strd	r2, r3, [r4]

    // tạo ra ma trận temp để v_c ko bị thay đổi trong hàm tính toán này
    matrix temp;
    allocate_matrix(&temp, 2, 1);
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	2201      	movs	r2, #1
 8001aae:	2102      	movs	r1, #2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 facb 	bl	800204c <allocate_matrix>
    temp = v_c;
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	1d3a      	adds	r2, r7, #4
 8001abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ac0:	e883 0003 	stmia.w	r3, {r0, r1}
    subtraction(&temp, &v);
 8001ac4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fb66 	bl	80021a0 <subtraction>

    matrix C;
    mutiplication(&K_4, &temp, &C);
 8001ad4:	f107 0210 	add.w	r2, r7, #16
 8001ad8:	f107 0118 	add.w	r1, r7, #24
 8001adc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fbef 	bl	80022c4 <mutiplication>

    deallocate_matrix(&temp);
 8001ae6:	f107 0318 	add.w	r3, r7, #24
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fae3 	bl	80020b6 <deallocate_matrix>

    // tính toán tín hiệu điều khiển
    u->index[0][0] = derivative_v_c.index[0][0] + C.index[0][0];
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	68fc      	ldr	r4, [r7, #12]
 8001b02:	6824      	ldr	r4, [r4, #0]
 8001b04:	6824      	ldr	r4, [r4, #0]
 8001b06:	f7fe fb29 	bl	800015c <__adddf3>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	e9c4 2300 	strd	r2, r3, [r4]
    u->index[1][0] = derivative_v_c.index[1][0] + C.index[1][0];
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	3304      	adds	r3, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	68fc      	ldr	r4, [r7, #12]
 8001b28:	6824      	ldr	r4, [r4, #0]
 8001b2a:	3404      	adds	r4, #4
 8001b2c:	6824      	ldr	r4, [r4, #0]
 8001b2e:	f7fe fb15 	bl	800015c <__adddf3>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	e9c4 2300 	strd	r2, r3, [r4]
    
    // giải phóng các vùng nhớ tạm thời xuất hiện trong hàm
    deallocate_matrix(&C);
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 fab9 	bl	80020b6 <deallocate_matrix>
    deallocate_matrix(&derivative_v_c);
 8001b44:	f107 0320 	add.w	r3, r7, #32
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fab4 	bl	80020b6 <deallocate_matrix>
}
 8001b4e:	bf00      	nop
 8001b50:	372c      	adds	r7, #44	@ 0x2c
 8001b52:	46bd      	mov	sp, r7
 8001b54:	e8bd 4390 	ldmia.w	sp!, {r4, r7, r8, r9, lr}
 8001b58:	b002      	add	sp, #8
 8001b5a:	4770      	bx	lr
 8001b5c:	20000000 	.word	0x20000000

08001b60 <next_state>:

// Calculate future coordinates of the robot
// Call after applying voltages to motors
void next_state(double *x, double *y, double *theta, double *x_r, double *y_r, double *theta_r, matrix v, matrix v_r)
{
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b090      	sub	sp, #64	@ 0x40
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
    double derivative_x = cos(*theta) * v.index[0][0];
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f002 fb70 	bl	800425c <cos>
 8001b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fca0 	bl	80004c8 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double derivative_y = sin(*theta) * v.index[0][0];
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f002 fba5 	bl	80042e8 <sin>
 8001b9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	f7fe fc8f 	bl	80004c8 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double derivative_theta = v.index[1][0];
 8001bb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    //tính toán tọa độ thực của xe
    *x += sampling_interval * derivative_x;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001bc6:	4b54      	ldr	r3, [pc, #336]	@ (8001d18 <next_state+0x1b8>)
 8001bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001bd0:	f7fe fc7a 	bl	80004c8 <__aeabi_dmul>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4620      	mov	r0, r4
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f7fe fabe 	bl	800015c <__adddf3>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	68f9      	ldr	r1, [r7, #12]
 8001be6:	e9c1 2300 	strd	r2, r3, [r1]
    *y += sampling_interval * derivative_y;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001bf0:	4b49      	ldr	r3, [pc, #292]	@ (8001d18 <next_state+0x1b8>)
 8001bf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bfa:	f7fe fc65 	bl	80004c8 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4620      	mov	r0, r4
 8001c04:	4629      	mov	r1, r5
 8001c06:	f7fe faa9 	bl	800015c <__adddf3>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	e9c1 2300 	strd	r2, r3, [r1]
    *theta += sampling_interval * derivative_theta;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d18 <next_state+0x1b8>)
 8001c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c24:	f7fe fc50 	bl	80004c8 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fa94 	bl	800015c <__adddf3>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	e9c1 2300 	strd	r2, r3, [r1]

    double derivative_x_r = cos(*theta_r) * v_r.index[0][0];
 8001c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f002 fb08 	bl	800425c <cos>
 8001c4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	f7fe fc38 	bl	80004c8 <__aeabi_dmul>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double derivative_y_r = sin(*theta_r) * v_r.index[0][0];
 8001c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f002 fb3d 	bl	80042e8 <sin>
 8001c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c76:	f7fe fc27 	bl	80004c8 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double derivative_theta_r = v_r.index[1][0];
 8001c82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c84:	3304      	adds	r3, #4
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    //tính toán tọa độ ref của xe
    *x_r +=  sampling_interval * derivative_x_r;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001c96:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <next_state+0x1b8>)
 8001c98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c9c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ca0:	f7fe fc12 	bl	80004c8 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4629      	mov	r1, r5
 8001cac:	f7fe fa56 	bl	800015c <__adddf3>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	6839      	ldr	r1, [r7, #0]
 8001cb6:	e9c1 2300 	strd	r2, r3, [r1]
    *y_r +=  sampling_interval * derivative_y_r;
 8001cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cbc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cc0:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <next_state+0x1b8>)
 8001cc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cca:	f7fe fbfd 	bl	80004c8 <__aeabi_dmul>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	f7fe fa41 	bl	800015c <__adddf3>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001ce0:	e9c1 2300 	strd	r2, r3, [r1]
    *theta_r +=  sampling_interval * derivative_theta_r;
 8001ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cea:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <next_state+0x1b8>)
 8001cec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cf4:	f7fe fbe8 	bl	80004c8 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	4629      	mov	r1, r5
 8001d00:	f7fe fa2c 	bl	800015c <__adddf3>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d0a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001d0e:	bf00      	nop
 8001d10:	3740      	adds	r7, #64	@ 0x40
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bdb0      	pop	{r4, r5, r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000000 	.word	0x20000000

08001d1c <cal_torque>:

// Calculate torque signal
// Must allocate tau matrix in the main program
void cal_torque(matrix *torque, matrix v, matrix u)
{
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d22:	b095      	sub	sp, #84	@ 0x54
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	1d38      	adds	r0, r7, #4
 8001d2a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d2e:	677b      	str	r3, [r7, #116]	@ 0x74
    matrix M;
    allocate_matrix(&M, 2, 2);
 8001d30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d34:	2202      	movs	r2, #2
 8001d36:	2102      	movs	r1, #2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 f987 	bl	800204c <allocate_matrix>
    M.index[0][0] = m;
 8001d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d40:	6819      	ldr	r1, [r3, #0]
 8001d42:	4b81      	ldr	r3, [pc, #516]	@ (8001f48 <cal_torque+0x22c>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	e9c1 2300 	strd	r2, r3, [r1]
    M.index[1][1] = I;
 8001d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d4e:	3304      	adds	r3, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f103 0108 	add.w	r1, r3, #8
 8001d56:	4b7d      	ldr	r3, [pc, #500]	@ (8001f4c <cal_torque+0x230>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	e9c1 2300 	strd	r2, r3, [r1]

    double derivative_theta = v.index[1][0];
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    matrix V;
    allocate_matrix(&V, 2, 2);
 8001d6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d72:	2202      	movs	r2, #2
 8001d74:	2102      	movs	r1, #2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f968 	bl	800204c <allocate_matrix>
    V.index[0][1] = m * d * derivative_theta;
 8001d7c:	4b72      	ldr	r3, [pc, #456]	@ (8001f48 <cal_torque+0x22c>)
 8001d7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d82:	4b73      	ldr	r3, [pc, #460]	@ (8001f50 <cal_torque+0x234>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fb9e 	bl	80004c8 <__aeabi_dmul>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f103 0608 	add.w	r6, r3, #8
 8001d9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001da0:	f7fe fb92 	bl	80004c8 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	e9c6 2300 	strd	r2, r3, [r6]
    V.index[1][0] = - m * d * derivative_theta;
 8001dac:	4b66      	ldr	r3, [pc, #408]	@ (8001f48 <cal_torque+0x22c>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	4690      	mov	r8, r2
 8001db4:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001db8:	4b65      	ldr	r3, [pc, #404]	@ (8001f50 <cal_torque+0x234>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	4640      	mov	r0, r8
 8001dc0:	4649      	mov	r1, r9
 8001dc2:	f7fe fb81 	bl	80004c8 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	681e      	ldr	r6, [r3, #0]
 8001dd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001dd8:	f7fe fb76 	bl	80004c8 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	e9c6 2300 	strd	r2, r3, [r6]

    matrix B;
    allocate_matrix(&B, 2, 2);
 8001de4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001de8:	2202      	movs	r2, #2
 8001dea:	2102      	movs	r1, #2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 f92d 	bl	800204c <allocate_matrix>
    B.index[0][0] = 1 / r;
 8001df2:	4b58      	ldr	r3, [pc, #352]	@ (8001f54 <cal_torque+0x238>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001dfa:	680e      	ldr	r6, [r1, #0]
 8001dfc:	f04f 0000 	mov.w	r0, #0
 8001e00:	4955      	ldr	r1, [pc, #340]	@ (8001f58 <cal_torque+0x23c>)
 8001e02:	f7fe fc8b 	bl	800071c <__aeabi_ddiv>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	e9c6 2300 	strd	r2, r3, [r6]
    B.index[0][1] = 1 / r;
 8001e0e:	4b51      	ldr	r3, [pc, #324]	@ (8001f54 <cal_torque+0x238>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e16:	6809      	ldr	r1, [r1, #0]
 8001e18:	f101 0608 	add.w	r6, r1, #8
 8001e1c:	f04f 0000 	mov.w	r0, #0
 8001e20:	494d      	ldr	r1, [pc, #308]	@ (8001f58 <cal_torque+0x23c>)
 8001e22:	f7fe fc7b 	bl	800071c <__aeabi_ddiv>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	e9c6 2300 	strd	r2, r3, [r6]
    B.index[1][0] = R / r;
 8001e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f5c <cal_torque+0x240>)
 8001e30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e34:	4b47      	ldr	r3, [pc, #284]	@ (8001f54 <cal_torque+0x238>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 8001e3c:	3604      	adds	r6, #4
 8001e3e:	6836      	ldr	r6, [r6, #0]
 8001e40:	f7fe fc6c 	bl	800071c <__aeabi_ddiv>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	e9c6 2300 	strd	r2, r3, [r6]
    B.index[1][1] = - R / r;
 8001e4c:	4b43      	ldr	r3, [pc, #268]	@ (8001f5c <cal_torque+0x240>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	4614      	mov	r4, r2
 8001e54:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001e58:	4b3e      	ldr	r3, [pc, #248]	@ (8001f54 <cal_torque+0x238>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e60:	3104      	adds	r1, #4
 8001e62:	6809      	ldr	r1, [r1, #0]
 8001e64:	f101 0608 	add.w	r6, r1, #8
 8001e68:	4620      	mov	r0, r4
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	f7fe fc56 	bl	800071c <__aeabi_ddiv>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	e9c6 2300 	strd	r2, r3, [r6]

    matrix B_inverse;
    inverse(&B, &B_inverse);
 8001e78:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001e7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fc5e 	bl	8002744 <inverse>

    deallocate_matrix(&B);
 8001e88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 f912 	bl	80020b6 <deallocate_matrix>

    matrix M_u;
    mutiplication(&M, &u, &M_u);
 8001e92:	f107 0220 	add.w	r2, r7, #32
 8001e96:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8001e9a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fa10 	bl	80022c4 <mutiplication>

    deallocate_matrix(&M);
 8001ea4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f904 	bl	80020b6 <deallocate_matrix>

    matrix V_v;
    mutiplication(&V, &v, &V_v);
 8001eae:	f107 0218 	add.w	r2, r7, #24
 8001eb2:	1d39      	adds	r1, r7, #4
 8001eb4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fa03 	bl	80022c4 <mutiplication>

    deallocate_matrix(&V);
 8001ebe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f8f7 	bl	80020b6 <deallocate_matrix>

    addition(&M_u, &V_v);
 8001ec8:	f107 0218 	add.w	r2, r7, #24
 8001ecc:	f107 0320 	add.w	r3, r7, #32
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f911 	bl	80020fa <addition>

    deallocate_matrix(&V_v);
 8001ed8:	f107 0318 	add.w	r3, r7, #24
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 f8ea 	bl	80020b6 <deallocate_matrix>

    matrix tau;
    mutiplication(&B_inverse, &M_u, &tau);
 8001ee2:	f107 0210 	add.w	r2, r7, #16
 8001ee6:	f107 0120 	add.w	r1, r7, #32
 8001eea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f9e8 	bl	80022c4 <mutiplication>

    deallocate_matrix(&B_inverse);
 8001ef4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f8dc 	bl	80020b6 <deallocate_matrix>
    deallocate_matrix(&M_u);
 8001efe:	f107 0320 	add.w	r3, r7, #32
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f8d7 	bl	80020b6 <deallocate_matrix>

    torque->index[0][0] = tau.index[0][0];
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	6811      	ldr	r1, [r2, #0]
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	e9c1 2300 	strd	r2, r3, [r1]
    torque->index[1][0] = tau.index[1][0];
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	3204      	adds	r2, #4
 8001f26:	6811      	ldr	r1, [r2, #0]
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	e9c1 2300 	strd	r2, r3, [r1]

    deallocate_matrix(&tau);
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 f8be 	bl	80020b6 <deallocate_matrix>
}
 8001f3a:	bf00      	nop
 8001f3c:	3754      	adds	r7, #84	@ 0x54
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f44:	b002      	add	sp, #8
 8001f46:	4770      	bx	lr
 8001f48:	20000028 	.word	0x20000028
 8001f4c:	20000008 	.word	0x20000008
 8001f50:	20000020 	.word	0x20000020
 8001f54:	20000010 	.word	0x20000010
 8001f58:	3ff00000 	.word	0x3ff00000
 8001f5c:	20000018 	.word	0x20000018

08001f60 <voltage>:

// Calculate the linear velocity and angular velocity of the vehicle
void voltage(double *voltage_left, double *voltage_right, double left_angular_velocity, double right_angular_velocity, matrix *torque)
{
 8001f60:	b5b0      	push	{r4, r5, r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	e9c7 2300 	strd	r2, r3, [r7]
    *voltage_left = k_phi * left_angular_velocity * 30 + R_a * torque->index[1][0] / k_phi;
 8001f6e:	4b34      	ldr	r3, [pc, #208]	@ (8002040 <voltage+0xe0>)
 8001f70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f78:	f7fe faa6 	bl	80004c8 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	4b2e      	ldr	r3, [pc, #184]	@ (8002044 <voltage+0xe4>)
 8001f8a:	f7fe fa9d 	bl	80004c8 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4614      	mov	r4, r2
 8001f94:	461d      	mov	r5, r3
 8001f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa2:	4b29      	ldr	r3, [pc, #164]	@ (8002048 <voltage+0xe8>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	f7fe fa8e 	bl	80004c8 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <voltage+0xe0>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe fbaf 	bl	800071c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	f7fe f8c9 	bl	800015c <__adddf3>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	68f9      	ldr	r1, [r7, #12]
 8001fd0:	e9c1 2300 	strd	r2, r3, [r1]
    *voltage_right = k_phi * right_angular_velocity * 30 + R_a * torque->index[0][0] / k_phi;
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <voltage+0xe0>)
 8001fd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fde:	f7fe fa73 	bl	80004c8 <__aeabi_dmul>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <voltage+0xe4>)
 8001ff0:	f7fe fa6a 	bl	80004c8 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4614      	mov	r4, r2
 8001ffa:	461d      	mov	r5, r3
 8001ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <voltage+0xe8>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	f7fe fa5c 	bl	80004c8 <__aeabi_dmul>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <voltage+0xe0>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe fb7d 	bl	800071c <__aeabi_ddiv>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4620      	mov	r0, r4
 8002028:	4629      	mov	r1, r5
 800202a:	f7fe f897 	bl	800015c <__adddf3>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bdb0      	pop	{r4, r5, r7, pc}
 8002040:	20000030 	.word	0x20000030
 8002044:	403e0000 	.word	0x403e0000
 8002048:	20000038 	.word	0x20000038

0800204c <allocate_matrix>:
#include "matrices_op2.h"

//Allocate memmory space and matrix A
void allocate_matrix(matrix *A, unsigned_int8 num_rows, unsigned_int8 num_columns)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	70fb      	strb	r3, [r7, #3]
 8002058:	4613      	mov	r3, r2
 800205a:	70bb      	strb	r3, [r7, #2]
    A->index = (double **) malloc(sizeof(double *) * num_rows);
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4618      	mov	r0, r3
 8002062:	f001 ffb1 	bl	8003fc8 <malloc>
 8002066:	4603      	mov	r3, r0
 8002068:	461a      	mov	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	601a      	str	r2, [r3, #0]
    A->num_columns = num_columns;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	78ba      	ldrb	r2, [r7, #2]
 8002072:	711a      	strb	r2, [r3, #4]
    A->num_rows = num_rows;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	715a      	strb	r2, [r3, #5]

    for (int i = 0; i < A->num_rows; i++)
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	e00f      	b.n	80020a0 <allocate_matrix+0x54>
        A->index[i] = (double *) calloc(sizeof(double), A->num_columns);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	791b      	ldrb	r3, [r3, #4]
 8002084:	4619      	mov	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	18d4      	adds	r4, r2, r3
 8002090:	2008      	movs	r0, #8
 8002092:	f001 ff7d 	bl	8003f90 <calloc>
 8002096:	4603      	mov	r3, r0
 8002098:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < A->num_rows; i++)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3301      	adds	r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	795b      	ldrb	r3, [r3, #5]
 80020a4:	461a      	mov	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4293      	cmp	r3, r2
 80020aa:	dbe9      	blt.n	8002080 <allocate_matrix+0x34>
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd90      	pop	{r4, r7, pc}

080020b6 <deallocate_matrix>:

//Deallocate memory space for matrix A
void deallocate_matrix(matrix *A)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < A->num_rows; i++){
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	e00b      	b.n	80020dc <deallocate_matrix+0x26>
        free(A->index[i]);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 ff81 	bl	8003fd8 <free>
    for (int i = 0; i < A->num_rows; i++){
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3301      	adds	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	795b      	ldrb	r3, [r3, #5]
 80020e0:	461a      	mov	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4293      	cmp	r3, r2
 80020e6:	dbed      	blt.n	80020c4 <deallocate_matrix+0xe>
    }
    free(A->index);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f001 ff73 	bl	8003fd8 <free>
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <addition>:
}

//Calculate addtion of matrix A and B
//Answer is directly assigned to A
void addition(matrix *A, matrix *B)
{
 80020fa:	b5b0      	push	{r4, r5, r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
    //Check dimensions of all matrix operands
    if ((A->num_rows != B->num_rows) || (A->num_columns != B->num_columns))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	795a      	ldrb	r2, [r3, #5]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	795b      	ldrb	r3, [r3, #5]
 800210c:	429a      	cmp	r2, r3
 800210e:	d143      	bne.n	8002198 <addition+0x9e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	791a      	ldrb	r2, [r3, #4]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	791b      	ldrb	r3, [r3, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	d13d      	bne.n	8002198 <addition+0x9e>
        return;
    
    //Calculate addition
    for (int i  = 0; i < A->num_rows; i++){
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e033      	b.n	800218a <addition+0x90>
        for (int j = 0; j < A->num_columns; j++){
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	e027      	b.n	8002178 <addition+0x7e>
            A->index[i][j] += B->index[i][j];
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002154:	687c      	ldr	r4, [r7, #4]
 8002156:	6825      	ldr	r5, [r4, #0]
 8002158:	68fc      	ldr	r4, [r7, #12]
 800215a:	00a4      	lsls	r4, r4, #2
 800215c:	442c      	add	r4, r5
 800215e:	6825      	ldr	r5, [r4, #0]
 8002160:	68bc      	ldr	r4, [r7, #8]
 8002162:	00e4      	lsls	r4, r4, #3
 8002164:	442c      	add	r4, r5
 8002166:	f7fd fff9 	bl	800015c <__adddf3>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	3301      	adds	r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	791b      	ldrb	r3, [r3, #4]
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4293      	cmp	r3, r2
 8002182:	dbd1      	blt.n	8002128 <addition+0x2e>
    for (int i  = 0; i < A->num_rows; i++){
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3301      	adds	r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	795b      	ldrb	r3, [r3, #5]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4293      	cmp	r3, r2
 8002194:	dbc5      	blt.n	8002122 <addition+0x28>
 8002196:	e000      	b.n	800219a <addition+0xa0>
        return;
 8002198:	bf00      	nop
        }
    }
}
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bdb0      	pop	{r4, r5, r7, pc}

080021a0 <subtraction>:

//Calculate subtraction of matrix A and B (A - B)
//Answer is directly assigned to A
void subtraction(matrix *A, matrix *B)
{
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
    //Check dimensions of all matrix operands
    if ((A->num_rows != B->num_rows) || (A->num_columns != B->num_columns))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	795a      	ldrb	r2, [r3, #5]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	795b      	ldrb	r3, [r3, #5]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d143      	bne.n	800223e <subtraction+0x9e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	791a      	ldrb	r2, [r3, #4]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	791b      	ldrb	r3, [r3, #4]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d13d      	bne.n	800223e <subtraction+0x9e>
        return;
    
    //Calculate Subtraction
    for (int i  = 0; i < A->num_rows; i++){
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	e033      	b.n	8002230 <subtraction+0x90>
        for (int j = 0; j < A->num_columns; j++){
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	e027      	b.n	800221e <subtraction+0x7e>
            A->index[i][j] -= B->index[i][j];
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	687c      	ldr	r4, [r7, #4]
 80021fc:	6825      	ldr	r5, [r4, #0]
 80021fe:	68fc      	ldr	r4, [r7, #12]
 8002200:	00a4      	lsls	r4, r4, #2
 8002202:	442c      	add	r4, r5
 8002204:	6825      	ldr	r5, [r4, #0]
 8002206:	68bc      	ldr	r4, [r7, #8]
 8002208:	00e4      	lsls	r4, r4, #3
 800220a:	442c      	add	r4, r5
 800220c:	f7fd ffa4 	bl	8000158 <__aeabi_dsub>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	3301      	adds	r3, #1
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	791b      	ldrb	r3, [r3, #4]
 8002222:	461a      	mov	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4293      	cmp	r3, r2
 8002228:	dbd1      	blt.n	80021ce <subtraction+0x2e>
    for (int i  = 0; i < A->num_rows; i++){
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3301      	adds	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	795b      	ldrb	r3, [r3, #5]
 8002234:	461a      	mov	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4293      	cmp	r3, r2
 800223a:	dbc5      	blt.n	80021c8 <subtraction+0x28>
 800223c:	e000      	b.n	8002240 <subtraction+0xa0>
        return;
 800223e:	bf00      	nop
        }
    }
}
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bdb0      	pop	{r4, r5, r7, pc}

08002246 <scalar_multiplication>:

//Scalar multiplication of matrix
////Answer is directly assigned to A
void scalar_multiplication(matrix *A, double scalar)
{
 8002246:	b590      	push	{r4, r7, lr}
 8002248:	b087      	sub	sp, #28
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	e9c7 2300 	strd	r2, r3, [r7]
    for (int i  = 0; i < A->num_rows; i++){
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e02a      	b.n	80022ae <scalar_multiplication+0x68>
        for (int j = 0; j < A->num_columns; j++){
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e01e      	b.n	800229c <scalar_multiplication+0x56>
            A->index[i][j] *= scalar;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	18d4      	adds	r4, r2, r3
 8002286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800228a:	f7fe f91d 	bl	80004c8 <__aeabi_dmul>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	3301      	adds	r3, #1
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	791b      	ldrb	r3, [r3, #4]
 80022a0:	461a      	mov	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4293      	cmp	r3, r2
 80022a6:	dbda      	blt.n	800225e <scalar_multiplication+0x18>
    for (int i  = 0; i < A->num_rows; i++){
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	3301      	adds	r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	795b      	ldrb	r3, [r3, #5]
 80022b2:	461a      	mov	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	4293      	cmp	r3, r2
 80022b8:	dbce      	blt.n	8002258 <scalar_multiplication+0x12>
        }
    }
}
 80022ba:	bf00      	nop
 80022bc:	bf00      	nop
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd90      	pop	{r4, r7, pc}

080022c4 <mutiplication>:

//Calculate multiplication of matrix A and B
//Answer is directly assigned to Ans
void mutiplication(matrix *A, matrix *B, matrix *Ans)
{
 80022c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c6:	b089      	sub	sp, #36	@ 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
    //Check for appropriate size
    if (A->num_columns != B->num_rows)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	791a      	ldrb	r2, [r3, #4]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	795b      	ldrb	r3, [r3, #5]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d166      	bne.n	80023aa <mutiplication+0xe6>
        return;

    //Allocate memory space for answer
    allocate_matrix(Ans, A->num_rows, B->num_columns);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	7959      	ldrb	r1, [r3, #5]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	791b      	ldrb	r3, [r3, #4]
 80022e4:	461a      	mov	r2, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff feb0 	bl	800204c <allocate_matrix>

    //Perform multiplication
    for (int i = 0; i < Ans->num_rows; i++){
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	e054      	b.n	800239c <mutiplication+0xd8>
        for(int j = 0; j < Ans->num_columns; j++){
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	e048      	b.n	800238a <mutiplication+0xc6>
            for (int x = 0; x < A->num_columns; x++){
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e03c      	b.n	8002378 <mutiplication+0xb4>
                Ans->index[i][j] += (A->index[i][x] * B->index[x][j]); 
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fe f8c2 	bl	80004c8 <__aeabi_dmul>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	18d6      	adds	r6, r2, r3
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4620      	mov	r0, r4
 8002364:	4629      	mov	r1, r5
 8002366:	f7fd fef9 	bl	800015c <__adddf3>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	e9c6 2300 	strd	r2, r3, [r6]
            for (int x = 0; x < A->num_columns; x++){
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	3301      	adds	r3, #1
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	791b      	ldrb	r3, [r3, #4]
 800237c:	461a      	mov	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	4293      	cmp	r3, r2
 8002382:	dbbc      	blt.n	80022fe <mutiplication+0x3a>
        for(int j = 0; j < Ans->num_columns; j++){
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	3301      	adds	r3, #1
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	791b      	ldrb	r3, [r3, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	4293      	cmp	r3, r2
 8002394:	dbb0      	blt.n	80022f8 <mutiplication+0x34>
    for (int i = 0; i < Ans->num_rows; i++){
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3301      	adds	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	795b      	ldrb	r3, [r3, #5]
 80023a0:	461a      	mov	r2, r3
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4293      	cmp	r3, r2
 80023a6:	dba4      	blt.n	80022f2 <mutiplication+0x2e>
 80023a8:	e000      	b.n	80023ac <mutiplication+0xe8>
        return;
 80023aa:	bf00      	nop
            }
        }
    }
}
 80023ac:	3724      	adds	r7, #36	@ 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023b2 <transpose>:

//Perform transpose of A
void transpose(matrix *A, matrix *transpose_A)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
    allocate_matrix(transpose_A, A->num_columns, A->num_rows);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	7919      	ldrb	r1, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	795b      	ldrb	r3, [r3, #5]
 80023c4:	461a      	mov	r2, r3
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	f7ff fe40 	bl	800204c <allocate_matrix>

    //Perform transpose operation
    for (int i = 0; i < transpose_A->num_rows; i++){
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	e024      	b.n	800241c <transpose+0x6a>
        for (int j = 0; j < transpose_A->num_columns; j++){
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	e018      	b.n	800240a <transpose+0x58>
            transpose_A->index[i][j] = A->index[j][i];
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	6811      	ldr	r1, [r2, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	0092      	lsls	r2, r2, #2
 80023f2:	440a      	add	r2, r1
 80023f4:	6811      	ldr	r1, [r2, #0]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	00d2      	lsls	r2, r2, #3
 80023fa:	4411      	add	r1, r2
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < transpose_A->num_columns; j++){
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	3301      	adds	r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	791b      	ldrb	r3, [r3, #4]
 800240e:	461a      	mov	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4293      	cmp	r3, r2
 8002414:	dbe0      	blt.n	80023d8 <transpose+0x26>
    for (int i = 0; i < transpose_A->num_rows; i++){
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3301      	adds	r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	795b      	ldrb	r3, [r3, #5]
 8002420:	461a      	mov	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4293      	cmp	r3, r2
 8002426:	dbd4      	blt.n	80023d2 <transpose+0x20>
        }
    }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <minor>:

void minor(matrix *major, matrix *minor, unsigned_int8 skip_row, unsigned_int8 skip_column)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b088      	sub	sp, #32
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	4611      	mov	r1, r2
 800243e:	461a      	mov	r2, r3
 8002440:	460b      	mov	r3, r1
 8002442:	71fb      	strb	r3, [r7, #7]
 8002444:	4613      	mov	r3, r2
 8002446:	71bb      	strb	r3, [r7, #6]
    //Allocate memory space for minor
    allocate_matrix(minor, major->num_rows - 1, major->num_columns - 1);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	795b      	ldrb	r3, [r3, #5]
 800244c:	3b01      	subs	r3, #1
 800244e:	b2d9      	uxtb	r1, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	791b      	ldrb	r3, [r3, #4]
 8002454:	3b01      	subs	r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	68b8      	ldr	r0, [r7, #8]
 800245c:	f7ff fdf6 	bl	800204c <allocate_matrix>

    int x = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
    int y = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]

    //Assign element to minor
    //Skip row skip_row
    //Skip column skip_column
    for (int i = 0; i < major->num_rows; i++){
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	e038      	b.n	80024e0 <minor+0xae>
        if (i != skip_row){
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	429a      	cmp	r2, r3
 8002474:	d030      	beq.n	80024d8 <minor+0xa6>
            for (int j = 0; j < major->num_columns; j++){
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	e021      	b.n	80024c0 <minor+0x8e>
                if (j != skip_column){
 800247c:	79bb      	ldrb	r3, [r7, #6]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d019      	beq.n	80024b8 <minor+0x86>
                    minor->index[x][y] = major->index[i][j];
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	6811      	ldr	r1, [r2, #0]
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	0092      	lsls	r2, r2, #2
 800249e:	440a      	add	r2, r1
 80024a0:	6811      	ldr	r1, [r2, #0]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	00d2      	lsls	r2, r2, #3
 80024a6:	4411      	add	r1, r2
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	e9c1 2300 	strd	r2, r3, [r1]
                    y++;
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	3301      	adds	r3, #1
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	e000      	b.n	80024ba <minor+0x88>
                } else {
                    continue;
 80024b8:	bf00      	nop
            for (int j = 0; j < major->num_columns; j++){
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	3301      	adds	r3, #1
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	791b      	ldrb	r3, [r3, #4]
 80024c4:	461a      	mov	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4293      	cmp	r3, r2
 80024ca:	dbd7      	blt.n	800247c <minor+0x4a>
                }
            }
            x++;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	3301      	adds	r3, #1
 80024d0:	61fb      	str	r3, [r7, #28]
            y = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	e000      	b.n	80024da <minor+0xa8>
        } else {
            continue;
 80024d8:	bf00      	nop
    for (int i = 0; i < major->num_rows; i++){
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	795b      	ldrb	r3, [r3, #5]
 80024e4:	461a      	mov	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	4293      	cmp	r3, r2
 80024ea:	dbc0      	blt.n	800246e <minor+0x3c>
        }
    }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <determinant>:

// Calculate the determinant of A
double determinant(matrix *A, unsigned_int8 expand_row)
{
 80024f6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
    double result = 0;
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    if (A->num_rows == 1 && A->num_columns == 1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	795b      	ldrb	r3, [r3, #5]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10d      	bne.n	8002534 <determinant+0x3e>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	791b      	ldrb	r3, [r3, #4]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d109      	bne.n	8002534 <determinant+0x3e>
        return result = A->index[0][0];
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800252e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002532:	e09a      	b.n	800266a <determinant+0x174>

    //Calculate determinant with chosen expand_row
    for (int j = 0; j < A->num_columns; j++){
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	e08e      	b.n	8002658 <determinant+0x162>
        
        //Create minor matrix
        matrix M;
        minor(A, &M, expand_row, j);
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	f107 010c 	add.w	r1, r7, #12
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff74 	bl	8002432 <minor>
        
        if ((expand_row + j) % 2 == 0){
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	4413      	add	r3, r2
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d13a      	bne.n	80025ce <determinant+0xd8>
            result += (A->index[expand_row][j] == 0) ? (0) : (A->index[expand_row][j] * determinant(&M, 0));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	f7fe fa0f 	bl	8000998 <__aeabi_dcmpeq>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d119      	bne.n	80025b4 <determinant+0xbe>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ffaa 	bl	80024f6 <determinant>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4640      	mov	r0, r8
 80025a8:	4649      	mov	r1, r9
 80025aa:	f7fd ff8d 	bl	80004c8 <__aeabi_dmul>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	e003      	b.n	80025bc <determinant+0xc6>
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025c0:	f7fd fdcc 	bl	800015c <__adddf3>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80025cc:	e03c      	b.n	8002648 <determinant+0x152>
        } else {
            result += (A->index[expand_row][j] == 0) ? (0) : ((-1) * A->index[expand_row][j] * determinant(&M, 0));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	f7fe f9d4 	bl	8000998 <__aeabi_dcmpeq>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11c      	bne.n	8002630 <determinant+0x13a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	4614      	mov	r4, r2
 800260e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002612:	f107 030c 	add.w	r3, r7, #12
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff6c 	bl	80024f6 <determinant>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4620      	mov	r0, r4
 8002624:	4629      	mov	r1, r5
 8002626:	f7fd ff4f 	bl	80004c8 <__aeabi_dmul>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	e003      	b.n	8002638 <determinant+0x142>
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800263c:	f7fd fd8e 	bl	800015c <__adddf3>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }

        //Deallocate minor matrix
        deallocate_matrix(&M);
 8002648:	f107 030c 	add.w	r3, r7, #12
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fd32 	bl	80020b6 <deallocate_matrix>
    for (int j = 0; j < A->num_columns; j++){
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3301      	adds	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	791b      	ldrb	r3, [r3, #4]
 800265c:	461a      	mov	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	4293      	cmp	r3, r2
 8002662:	f6ff af6a 	blt.w	800253a <determinant+0x44>
    }

    return result;
 8002666:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002676 <adjoint>:

//Calculate adjoint matrix
void adjoint(matrix *A, matrix *Ans)
{
 8002676:	b5b0      	push	{r4, r5, r7, lr}
 8002678:	b088      	sub	sp, #32
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
    matrix temp;
    allocate_matrix(&temp, A->num_rows, A->num_columns);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7959      	ldrb	r1, [r3, #5]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	791a      	ldrb	r2, [r3, #4]
 8002688:	f107 0310 	add.w	r3, r7, #16
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fcdd 	bl	800204c <allocate_matrix>
    for (int i = 0; i < temp.num_rows; i++){
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	e040      	b.n	800271a <adjoint+0xa4>
        for (int j = 0; j < temp.num_columns; j++){
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	e035      	b.n	800270a <adjoint+0x94>
            matrix M;
            minor(A, &M, i, j);
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f107 0108 	add.w	r1, r7, #8
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff fec1 	bl	8002432 <minor>

            temp.index[i][j] = ((i + j) % 2 == 0) ? (determinant(&M, 0)) : ((-1) * determinant(&M, 0));
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4413      	add	r3, r2
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d108      	bne.n	80026d0 <adjoint+0x5a>
 80026be:	f107 0308 	add.w	r3, r7, #8
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff16 	bl	80024f6 <determinant>
 80026ca:	4604      	mov	r4, r0
 80026cc:	460d      	mov	r5, r1
 80026ce:	e00a      	b.n	80026e6 <adjoint+0x70>
 80026d0:	f107 0308 	add.w	r3, r7, #8
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff0d 	bl	80024f6 <determinant>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4614      	mov	r4, r2
 80026e2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	e9c3 4500 	strd	r4, r5, [r3]
            
            //Deallocate minor matrix
            deallocate_matrix(&M);
 80026fa:	f107 0308 	add.w	r3, r7, #8
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fcd9 	bl	80020b6 <deallocate_matrix>
        for (int j = 0; j < temp.num_columns; j++){
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	3301      	adds	r3, #1
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	7d3b      	ldrb	r3, [r7, #20]
 800270c:	461a      	mov	r2, r3
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4293      	cmp	r3, r2
 8002712:	dbc4      	blt.n	800269e <adjoint+0x28>
    for (int i = 0; i < temp.num_rows; i++){
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	3301      	adds	r3, #1
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	7d7b      	ldrb	r3, [r7, #21]
 800271c:	461a      	mov	r2, r3
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	4293      	cmp	r3, r2
 8002722:	dbb9      	blt.n	8002698 <adjoint+0x22>
        }
    }
    transpose(&temp, Ans);
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	6839      	ldr	r1, [r7, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fe41 	bl	80023b2 <transpose>
    deallocate_matrix(&temp);
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fcbe 	bl	80020b6 <deallocate_matrix>
}
 800273a:	bf00      	nop
 800273c:	3720      	adds	r7, #32
 800273e:	46bd      	mov	sp, r7
 8002740:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002744 <inverse>:

void inverse(matrix *A, matrix *inverse_of_A)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
    //Calculate determinant of A
    double determinant_of_A = determinant(A, 0);
 800274e:	2100      	movs	r1, #0
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff fed0 	bl	80024f6 <determinant>
 8002756:	e9c7 0102 	strd	r0, r1, [r7, #8]

    //Calculate adjoint matrix of A
    adjoint(A, inverse_of_A);
 800275a:	6839      	ldr	r1, [r7, #0]
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff8a 	bl	8002676 <adjoint>

    //Calculate inverse of A
    scalar_multiplication(inverse_of_A, 1 / determinant_of_A);
 8002762:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	4906      	ldr	r1, [pc, #24]	@ (8002784 <inverse+0x40>)
 800276c:	f7fd ffd6 	bl	800071c <__aeabi_ddiv>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	6838      	ldr	r0, [r7, #0]
 8002776:	f7ff fd66 	bl	8002246 <scalar_multiplication>
}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	3ff00000 	.word	0x3ff00000

08002788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800278c:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <HAL_Init+0x28>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a07      	ldr	r2, [pc, #28]	@ (80027b0 <HAL_Init+0x28>)
 8002792:	f043 0310 	orr.w	r3, r3, #16
 8002796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002798:	2003      	movs	r0, #3
 800279a:	f000 f907 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800279e:	200f      	movs	r0, #15
 80027a0:	f000 f808 	bl	80027b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a4:	f7fe fe3e 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40022000 	.word	0x40022000

080027b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027bc:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <HAL_InitTick+0x54>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b12      	ldr	r3, [pc, #72]	@ (800280c <HAL_InitTick+0x58>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f911 	bl	80029fa <HAL_SYSTICK_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e00e      	b.n	8002800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b0f      	cmp	r3, #15
 80027e6:	d80a      	bhi.n	80027fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e8:	2200      	movs	r2, #0
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295
 80027f0:	f000 f8e7 	bl	80029c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f4:	4a06      	ldr	r2, [pc, #24]	@ (8002810 <HAL_InitTick+0x5c>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000040 	.word	0x20000040
 800280c:	20000048 	.word	0x20000048
 8002810:	20000044 	.word	0x20000044

08002814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <HAL_IncTick+0x1c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_IncTick+0x20>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4413      	add	r3, r2
 8002824:	4a03      	ldr	r2, [pc, #12]	@ (8002834 <HAL_IncTick+0x20>)
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	20000048 	.word	0x20000048
 8002834:	20000234 	.word	0x20000234

08002838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return uwTick;
 800283c:	4b02      	ldr	r3, [pc, #8]	@ (8002848 <HAL_GetTick+0x10>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	20000234 	.word	0x20000234

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	@ (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	@ (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	@ 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
         );
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	@ 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002978:	d301      	bcc.n	800297e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297a:	2301      	movs	r3, #1
 800297c:	e00f      	b.n	800299e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297e:	4a0a      	ldr	r2, [pc, #40]	@ (80029a8 <SysTick_Config+0x40>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002986:	210f      	movs	r1, #15
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	f7ff ff90 	bl	80028b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <SysTick_Config+0x40>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002996:	4b04      	ldr	r3, [pc, #16]	@ (80029a8 <SysTick_Config+0x40>)
 8002998:	2207      	movs	r2, #7
 800299a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000e010 	.word	0xe000e010

080029ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff49 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d4:	f7ff ff5e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 80029d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff ff90 	bl	8002904 <NVIC_EncodePriority>
 80029e4:	4602      	mov	r2, r0
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff5f 	bl	80028b0 <__NVIC_SetPriority>
}
 80029f2:	bf00      	nop
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ffb0 	bl	8002968 <SysTick_Config>
 8002a08:	4603      	mov	r3, r0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b08b      	sub	sp, #44	@ 0x2c
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a22:	2300      	movs	r3, #0
 8002a24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a26:	e169      	b.n	8002cfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a28:	2201      	movs	r2, #1
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	f040 8158 	bne.w	8002cf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4a9a      	ldr	r2, [pc, #616]	@ (8002cb4 <HAL_GPIO_Init+0x2a0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d05e      	beq.n	8002b0e <HAL_GPIO_Init+0xfa>
 8002a50:	4a98      	ldr	r2, [pc, #608]	@ (8002cb4 <HAL_GPIO_Init+0x2a0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d875      	bhi.n	8002b42 <HAL_GPIO_Init+0x12e>
 8002a56:	4a98      	ldr	r2, [pc, #608]	@ (8002cb8 <HAL_GPIO_Init+0x2a4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d058      	beq.n	8002b0e <HAL_GPIO_Init+0xfa>
 8002a5c:	4a96      	ldr	r2, [pc, #600]	@ (8002cb8 <HAL_GPIO_Init+0x2a4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d86f      	bhi.n	8002b42 <HAL_GPIO_Init+0x12e>
 8002a62:	4a96      	ldr	r2, [pc, #600]	@ (8002cbc <HAL_GPIO_Init+0x2a8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d052      	beq.n	8002b0e <HAL_GPIO_Init+0xfa>
 8002a68:	4a94      	ldr	r2, [pc, #592]	@ (8002cbc <HAL_GPIO_Init+0x2a8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d869      	bhi.n	8002b42 <HAL_GPIO_Init+0x12e>
 8002a6e:	4a94      	ldr	r2, [pc, #592]	@ (8002cc0 <HAL_GPIO_Init+0x2ac>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d04c      	beq.n	8002b0e <HAL_GPIO_Init+0xfa>
 8002a74:	4a92      	ldr	r2, [pc, #584]	@ (8002cc0 <HAL_GPIO_Init+0x2ac>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d863      	bhi.n	8002b42 <HAL_GPIO_Init+0x12e>
 8002a7a:	4a92      	ldr	r2, [pc, #584]	@ (8002cc4 <HAL_GPIO_Init+0x2b0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d046      	beq.n	8002b0e <HAL_GPIO_Init+0xfa>
 8002a80:	4a90      	ldr	r2, [pc, #576]	@ (8002cc4 <HAL_GPIO_Init+0x2b0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d85d      	bhi.n	8002b42 <HAL_GPIO_Init+0x12e>
 8002a86:	2b12      	cmp	r3, #18
 8002a88:	d82a      	bhi.n	8002ae0 <HAL_GPIO_Init+0xcc>
 8002a8a:	2b12      	cmp	r3, #18
 8002a8c:	d859      	bhi.n	8002b42 <HAL_GPIO_Init+0x12e>
 8002a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a94 <HAL_GPIO_Init+0x80>)
 8002a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a94:	08002b0f 	.word	0x08002b0f
 8002a98:	08002ae9 	.word	0x08002ae9
 8002a9c:	08002afb 	.word	0x08002afb
 8002aa0:	08002b3d 	.word	0x08002b3d
 8002aa4:	08002b43 	.word	0x08002b43
 8002aa8:	08002b43 	.word	0x08002b43
 8002aac:	08002b43 	.word	0x08002b43
 8002ab0:	08002b43 	.word	0x08002b43
 8002ab4:	08002b43 	.word	0x08002b43
 8002ab8:	08002b43 	.word	0x08002b43
 8002abc:	08002b43 	.word	0x08002b43
 8002ac0:	08002b43 	.word	0x08002b43
 8002ac4:	08002b43 	.word	0x08002b43
 8002ac8:	08002b43 	.word	0x08002b43
 8002acc:	08002b43 	.word	0x08002b43
 8002ad0:	08002b43 	.word	0x08002b43
 8002ad4:	08002b43 	.word	0x08002b43
 8002ad8:	08002af1 	.word	0x08002af1
 8002adc:	08002b05 	.word	0x08002b05
 8002ae0:	4a79      	ldr	r2, [pc, #484]	@ (8002cc8 <HAL_GPIO_Init+0x2b4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ae6:	e02c      	b.n	8002b42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	623b      	str	r3, [r7, #32]
          break;
 8002aee:	e029      	b.n	8002b44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	3304      	adds	r3, #4
 8002af6:	623b      	str	r3, [r7, #32]
          break;
 8002af8:	e024      	b.n	8002b44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	3308      	adds	r3, #8
 8002b00:	623b      	str	r3, [r7, #32]
          break;
 8002b02:	e01f      	b.n	8002b44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	623b      	str	r3, [r7, #32]
          break;
 8002b0c:	e01a      	b.n	8002b44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b16:	2304      	movs	r3, #4
 8002b18:	623b      	str	r3, [r7, #32]
          break;
 8002b1a:	e013      	b.n	8002b44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d105      	bne.n	8002b30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b24:	2308      	movs	r3, #8
 8002b26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	611a      	str	r2, [r3, #16]
          break;
 8002b2e:	e009      	b.n	8002b44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b30:	2308      	movs	r3, #8
 8002b32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	615a      	str	r2, [r3, #20]
          break;
 8002b3a:	e003      	b.n	8002b44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	623b      	str	r3, [r7, #32]
          break;
 8002b40:	e000      	b.n	8002b44 <HAL_GPIO_Init+0x130>
          break;
 8002b42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	2bff      	cmp	r3, #255	@ 0xff
 8002b48:	d801      	bhi.n	8002b4e <HAL_GPIO_Init+0x13a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	e001      	b.n	8002b52 <HAL_GPIO_Init+0x13e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3304      	adds	r3, #4
 8002b52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2bff      	cmp	r3, #255	@ 0xff
 8002b58:	d802      	bhi.n	8002b60 <HAL_GPIO_Init+0x14c>
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	e002      	b.n	8002b66 <HAL_GPIO_Init+0x152>
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	3b08      	subs	r3, #8
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	210f      	movs	r1, #15
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	401a      	ands	r2, r3
 8002b78:	6a39      	ldr	r1, [r7, #32]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	431a      	orrs	r2, r3
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80b1 	beq.w	8002cf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b94:	4b4d      	ldr	r3, [pc, #308]	@ (8002ccc <HAL_GPIO_Init+0x2b8>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	4a4c      	ldr	r2, [pc, #304]	@ (8002ccc <HAL_GPIO_Init+0x2b8>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6193      	str	r3, [r2, #24]
 8002ba0:	4b4a      	ldr	r3, [pc, #296]	@ (8002ccc <HAL_GPIO_Init+0x2b8>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bac:	4a48      	ldr	r2, [pc, #288]	@ (8002cd0 <HAL_GPIO_Init+0x2bc>)
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a40      	ldr	r2, [pc, #256]	@ (8002cd4 <HAL_GPIO_Init+0x2c0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d013      	beq.n	8002c00 <HAL_GPIO_Init+0x1ec>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a3f      	ldr	r2, [pc, #252]	@ (8002cd8 <HAL_GPIO_Init+0x2c4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00d      	beq.n	8002bfc <HAL_GPIO_Init+0x1e8>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a3e      	ldr	r2, [pc, #248]	@ (8002cdc <HAL_GPIO_Init+0x2c8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d007      	beq.n	8002bf8 <HAL_GPIO_Init+0x1e4>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a3d      	ldr	r2, [pc, #244]	@ (8002ce0 <HAL_GPIO_Init+0x2cc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d101      	bne.n	8002bf4 <HAL_GPIO_Init+0x1e0>
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e006      	b.n	8002c02 <HAL_GPIO_Init+0x1ee>
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	e004      	b.n	8002c02 <HAL_GPIO_Init+0x1ee>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e002      	b.n	8002c02 <HAL_GPIO_Init+0x1ee>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_GPIO_Init+0x1ee>
 8002c00:	2300      	movs	r3, #0
 8002c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c04:	f002 0203 	and.w	r2, r2, #3
 8002c08:	0092      	lsls	r2, r2, #2
 8002c0a:	4093      	lsls	r3, r2
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c12:	492f      	ldr	r1, [pc, #188]	@ (8002cd0 <HAL_GPIO_Init+0x2bc>)
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d006      	beq.n	8002c3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	492c      	ldr	r1, [pc, #176]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	4928      	ldr	r1, [pc, #160]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c54:	4b23      	ldr	r3, [pc, #140]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	4922      	ldr	r1, [pc, #136]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60cb      	str	r3, [r1, #12]
 8002c60:	e006      	b.n	8002c70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c62:	4b20      	ldr	r3, [pc, #128]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	491e      	ldr	r1, [pc, #120]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	4918      	ldr	r1, [pc, #96]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	4914      	ldr	r1, [pc, #80]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d021      	beq.n	8002ce8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	490e      	ldr	r1, [pc, #56]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	600b      	str	r3, [r1, #0]
 8002cb0:	e021      	b.n	8002cf6 <HAL_GPIO_Init+0x2e2>
 8002cb2:	bf00      	nop
 8002cb4:	10320000 	.word	0x10320000
 8002cb8:	10310000 	.word	0x10310000
 8002cbc:	10220000 	.word	0x10220000
 8002cc0:	10210000 	.word	0x10210000
 8002cc4:	10120000 	.word	0x10120000
 8002cc8:	10110000 	.word	0x10110000
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40010000 	.word	0x40010000
 8002cd4:	40010800 	.word	0x40010800
 8002cd8:	40010c00 	.word	0x40010c00
 8002cdc:	40011000 	.word	0x40011000
 8002ce0:	40011400 	.word	0x40011400
 8002ce4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_GPIO_Init+0x304>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	4909      	ldr	r1, [pc, #36]	@ (8002d18 <HAL_GPIO_Init+0x304>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	fa22 f303 	lsr.w	r3, r2, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f47f ae8e 	bne.w	8002a28 <HAL_GPIO_Init+0x14>
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	372c      	adds	r7, #44	@ 0x2c
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	40010400 	.word	0x40010400

08002d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e272      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8087 	beq.w	8002e4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d3c:	4b92      	ldr	r3, [pc, #584]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d00c      	beq.n	8002d62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d48:	4b8f      	ldr	r3, [pc, #572]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d112      	bne.n	8002d7a <HAL_RCC_OscConfig+0x5e>
 8002d54:	4b8c      	ldr	r3, [pc, #560]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d60:	d10b      	bne.n	8002d7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d62:	4b89      	ldr	r3, [pc, #548]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d06c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x12c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d168      	bne.n	8002e48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e24c      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x76>
 8002d84:	4b80      	ldr	r3, [pc, #512]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a7f      	ldr	r2, [pc, #508]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	e02e      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x98>
 8002d9a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a7a      	ldr	r2, [pc, #488]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b78      	ldr	r3, [pc, #480]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a77      	ldr	r2, [pc, #476]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e01d      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xbc>
 8002dbe:	4b72      	ldr	r3, [pc, #456]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a71      	ldr	r2, [pc, #452]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b6f      	ldr	r3, [pc, #444]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a6e      	ldr	r2, [pc, #440]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a6a      	ldr	r2, [pc, #424]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	4b68      	ldr	r3, [pc, #416]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a67      	ldr	r2, [pc, #412]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d013      	beq.n	8002e20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7ff fd1e 	bl	8002838 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e00:	f7ff fd1a 	bl	8002838 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	@ 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e200      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e12:	4b5d      	ldr	r3, [pc, #372]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0xe4>
 8002e1e:	e014      	b.n	8002e4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7ff fd0a 	bl	8002838 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e28:	f7ff fd06 	bl	8002838 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	@ 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e1ec      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3a:	4b53      	ldr	r3, [pc, #332]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x10c>
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d063      	beq.n	8002f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e56:	4b4c      	ldr	r3, [pc, #304]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e62:	4b49      	ldr	r3, [pc, #292]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d11c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x18c>
 8002e6e:	4b46      	ldr	r3, [pc, #280]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d116      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7a:	4b43      	ldr	r3, [pc, #268]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_RCC_OscConfig+0x176>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e1c0      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e92:	4b3d      	ldr	r3, [pc, #244]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4939      	ldr	r1, [pc, #228]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea6:	e03a      	b.n	8002f1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb0:	4b36      	ldr	r3, [pc, #216]	@ (8002f8c <HAL_RCC_OscConfig+0x270>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7ff fcbf 	bl	8002838 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7ff fcbb 	bl	8002838 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1a1      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002edc:	4b2a      	ldr	r3, [pc, #168]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4927      	ldr	r1, [pc, #156]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]
 8002ef0:	e015      	b.n	8002f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef2:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <HAL_RCC_OscConfig+0x270>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7ff fc9e 	bl	8002838 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f00:	f7ff fc9a 	bl	8002838 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e180      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f12:	4b1d      	ldr	r3, [pc, #116]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d03a      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d019      	beq.n	8002f66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f32:	4b17      	ldr	r3, [pc, #92]	@ (8002f90 <HAL_RCC_OscConfig+0x274>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7ff fc7e 	bl	8002838 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f40:	f7ff fc7a 	bl	8002838 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e160      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f52:	4b0d      	ldr	r3, [pc, #52]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f000 fa9c 	bl	800349c <RCC_Delay>
 8002f64:	e01c      	b.n	8002fa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f66:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <HAL_RCC_OscConfig+0x274>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6c:	f7ff fc64 	bl	8002838 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f72:	e00f      	b.n	8002f94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f74:	f7ff fc60 	bl	8002838 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d908      	bls.n	8002f94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e146      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	42420000 	.word	0x42420000
 8002f90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f94:	4b92      	ldr	r3, [pc, #584]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e9      	bne.n	8002f74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80a6 	beq.w	80030fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb2:	4b8b      	ldr	r3, [pc, #556]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10d      	bne.n	8002fda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fbe:	4b88      	ldr	r3, [pc, #544]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4a87      	ldr	r2, [pc, #540]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc8:	61d3      	str	r3, [r2, #28]
 8002fca:	4b85      	ldr	r3, [pc, #532]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	4b82      	ldr	r3, [pc, #520]	@ (80031e4 <HAL_RCC_OscConfig+0x4c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d118      	bne.n	8003018 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe6:	4b7f      	ldr	r3, [pc, #508]	@ (80031e4 <HAL_RCC_OscConfig+0x4c8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a7e      	ldr	r2, [pc, #504]	@ (80031e4 <HAL_RCC_OscConfig+0x4c8>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff2:	f7ff fc21 	bl	8002838 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffa:	f7ff fc1d 	bl	8002838 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b64      	cmp	r3, #100	@ 0x64
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e103      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	4b75      	ldr	r3, [pc, #468]	@ (80031e4 <HAL_RCC_OscConfig+0x4c8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d106      	bne.n	800302e <HAL_RCC_OscConfig+0x312>
 8003020:	4b6f      	ldr	r3, [pc, #444]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4a6e      	ldr	r2, [pc, #440]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	6213      	str	r3, [r2, #32]
 800302c:	e02d      	b.n	800308a <HAL_RCC_OscConfig+0x36e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0x334>
 8003036:	4b6a      	ldr	r3, [pc, #424]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4a69      	ldr	r2, [pc, #420]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	6213      	str	r3, [r2, #32]
 8003042:	4b67      	ldr	r3, [pc, #412]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4a66      	ldr	r2, [pc, #408]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	f023 0304 	bic.w	r3, r3, #4
 800304c:	6213      	str	r3, [r2, #32]
 800304e:	e01c      	b.n	800308a <HAL_RCC_OscConfig+0x36e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b05      	cmp	r3, #5
 8003056:	d10c      	bne.n	8003072 <HAL_RCC_OscConfig+0x356>
 8003058:	4b61      	ldr	r3, [pc, #388]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	4a60      	ldr	r2, [pc, #384]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	f043 0304 	orr.w	r3, r3, #4
 8003062:	6213      	str	r3, [r2, #32]
 8003064:	4b5e      	ldr	r3, [pc, #376]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4a5d      	ldr	r2, [pc, #372]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6213      	str	r3, [r2, #32]
 8003070:	e00b      	b.n	800308a <HAL_RCC_OscConfig+0x36e>
 8003072:	4b5b      	ldr	r3, [pc, #364]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	4a5a      	ldr	r2, [pc, #360]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	6213      	str	r3, [r2, #32]
 800307e:	4b58      	ldr	r3, [pc, #352]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	4a57      	ldr	r2, [pc, #348]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	f023 0304 	bic.w	r3, r3, #4
 8003088:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d015      	beq.n	80030be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7ff fbd1 	bl	8002838 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003098:	e00a      	b.n	80030b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7ff fbcd 	bl	8002838 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e0b1      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	4b4b      	ldr	r3, [pc, #300]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ee      	beq.n	800309a <HAL_RCC_OscConfig+0x37e>
 80030bc:	e014      	b.n	80030e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030be:	f7ff fbbb 	bl	8002838 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c4:	e00a      	b.n	80030dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7ff fbb7 	bl	8002838 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e09b      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030dc:	4b40      	ldr	r3, [pc, #256]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1ee      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d105      	bne.n	80030fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ee:	4b3c      	ldr	r3, [pc, #240]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	4a3b      	ldr	r2, [pc, #236]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8087 	beq.w	8003212 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003104:	4b36      	ldr	r3, [pc, #216]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b08      	cmp	r3, #8
 800310e:	d061      	beq.n	80031d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d146      	bne.n	80031a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003118:	4b33      	ldr	r3, [pc, #204]	@ (80031e8 <HAL_RCC_OscConfig+0x4cc>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7ff fb8b 	bl	8002838 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003126:	f7ff fb87 	bl	8002838 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e06d      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003138:	4b29      	ldr	r3, [pc, #164]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f0      	bne.n	8003126 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800314c:	d108      	bne.n	8003160 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800314e:	4b24      	ldr	r3, [pc, #144]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	4921      	ldr	r1, [pc, #132]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003160:	4b1f      	ldr	r3, [pc, #124]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a19      	ldr	r1, [r3, #32]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	430b      	orrs	r3, r1
 8003172:	491b      	ldr	r1, [pc, #108]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003178:	4b1b      	ldr	r3, [pc, #108]	@ (80031e8 <HAL_RCC_OscConfig+0x4cc>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7ff fb5b 	bl	8002838 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003186:	f7ff fb57 	bl	8002838 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e03d      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003198:	4b11      	ldr	r3, [pc, #68]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x46a>
 80031a4:	e035      	b.n	8003212 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <HAL_RCC_OscConfig+0x4cc>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7ff fb44 	bl	8002838 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b4:	f7ff fb40 	bl	8002838 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e026      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c6:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x498>
 80031d2:	e01e      	b.n	8003212 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e019      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ec:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <HAL_RCC_OscConfig+0x500>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d001      	beq.n	8003212 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0d0      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003234:	4b6a      	ldr	r3, [pc, #424]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d910      	bls.n	8003264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b67      	ldr	r3, [pc, #412]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 0207 	bic.w	r2, r3, #7
 800324a:	4965      	ldr	r1, [pc, #404]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b63      	ldr	r3, [pc, #396]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0b8      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800327c:	4b59      	ldr	r3, [pc, #356]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4a58      	ldr	r2, [pc, #352]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003286:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003294:	4b53      	ldr	r3, [pc, #332]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4a52      	ldr	r2, [pc, #328]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800329e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a0:	4b50      	ldr	r3, [pc, #320]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	494d      	ldr	r1, [pc, #308]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d040      	beq.n	8003340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	4b47      	ldr	r3, [pc, #284]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d115      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e07f      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	4b41      	ldr	r3, [pc, #260]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e073      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ee:	4b3d      	ldr	r3, [pc, #244]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e06b      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fe:	4b39      	ldr	r3, [pc, #228]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f023 0203 	bic.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4936      	ldr	r1, [pc, #216]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003310:	f7ff fa92 	bl	8002838 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	e00a      	b.n	800332e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7ff fa8e 	bl	8002838 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e053      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	4b2d      	ldr	r3, [pc, #180]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 020c 	and.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	429a      	cmp	r2, r3
 800333e:	d1eb      	bne.n	8003318 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003340:	4b27      	ldr	r3, [pc, #156]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d210      	bcs.n	8003370 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b24      	ldr	r3, [pc, #144]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 0207 	bic.w	r2, r3, #7
 8003356:	4922      	ldr	r1, [pc, #136]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	4313      	orrs	r3, r2
 800335c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b20      	ldr	r3, [pc, #128]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e032      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800337c:	4b19      	ldr	r3, [pc, #100]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4916      	ldr	r1, [pc, #88]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800339a:	4b12      	ldr	r3, [pc, #72]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	490e      	ldr	r1, [pc, #56]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ae:	f000 f821 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80033b2:	4602      	mov	r2, r0
 80033b4:	4b0b      	ldr	r3, [pc, #44]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	490a      	ldr	r1, [pc, #40]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c8>)
 80033c0:	5ccb      	ldrb	r3, [r1, r3]
 80033c2:	fa22 f303 	lsr.w	r3, r2, r3
 80033c6:	4a09      	ldr	r2, [pc, #36]	@ (80033ec <HAL_RCC_ClockConfig+0x1cc>)
 80033c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ca:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <HAL_RCC_ClockConfig+0x1d0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff f9f0 	bl	80027b4 <HAL_InitTick>

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40022000 	.word	0x40022000
 80033e4:	40021000 	.word	0x40021000
 80033e8:	080052b0 	.word	0x080052b0
 80033ec:	20000040 	.word	0x20000040
 80033f0:	20000044 	.word	0x20000044

080033f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800340e:	4b1e      	ldr	r3, [pc, #120]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x94>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d002      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x30>
 800341e:	2b08      	cmp	r3, #8
 8003420:	d003      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x36>
 8003422:	e027      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003424:	4b19      	ldr	r3, [pc, #100]	@ (800348c <HAL_RCC_GetSysClockFreq+0x98>)
 8003426:	613b      	str	r3, [r7, #16]
      break;
 8003428:	e027      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	0c9b      	lsrs	r3, r3, #18
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	4a17      	ldr	r2, [pc, #92]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003434:	5cd3      	ldrb	r3, [r2, r3]
 8003436:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d010      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003442:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x94>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	0c5b      	lsrs	r3, r3, #17
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	4a11      	ldr	r2, [pc, #68]	@ (8003494 <HAL_RCC_GetSysClockFreq+0xa0>)
 800344e:	5cd3      	ldrb	r3, [r2, r3]
 8003450:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a0d      	ldr	r2, [pc, #52]	@ (800348c <HAL_RCC_GetSysClockFreq+0x98>)
 8003456:	fb03 f202 	mul.w	r2, r3, r2
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	e004      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a0c      	ldr	r2, [pc, #48]	@ (8003498 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003468:	fb02 f303 	mul.w	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	613b      	str	r3, [r7, #16]
      break;
 8003472:	e002      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003474:	4b05      	ldr	r3, [pc, #20]	@ (800348c <HAL_RCC_GetSysClockFreq+0x98>)
 8003476:	613b      	str	r3, [r7, #16]
      break;
 8003478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347a:	693b      	ldr	r3, [r7, #16]
}
 800347c:	4618      	mov	r0, r3
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000
 800348c:	007a1200 	.word	0x007a1200
 8003490:	080052c0 	.word	0x080052c0
 8003494:	080052d0 	.word	0x080052d0
 8003498:	003d0900 	.word	0x003d0900

0800349c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034a4:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <RCC_Delay+0x34>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0a      	ldr	r2, [pc, #40]	@ (80034d4 <RCC_Delay+0x38>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	0a5b      	lsrs	r3, r3, #9
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034b8:	bf00      	nop
  }
  while (Delay --);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1e5a      	subs	r2, r3, #1
 80034be:	60fa      	str	r2, [r7, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f9      	bne.n	80034b8 <RCC_Delay+0x1c>
}
 80034c4:	bf00      	nop
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	20000040 	.word	0x20000040
 80034d4:	10624dd3 	.word	0x10624dd3

080034d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e041      	b.n	800356e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fe f82c 	bl	800155c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3304      	adds	r3, #4
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f000 fac2 	bl	8003aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d109      	bne.n	800359c <HAL_TIM_PWM_Start+0x24>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e022      	b.n	80035e2 <HAL_TIM_PWM_Start+0x6a>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d109      	bne.n	80035b6 <HAL_TIM_PWM_Start+0x3e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	bf14      	ite	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	2300      	moveq	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	e015      	b.n	80035e2 <HAL_TIM_PWM_Start+0x6a>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d109      	bne.n	80035d0 <HAL_TIM_PWM_Start+0x58>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e008      	b.n	80035e2 <HAL_TIM_PWM_Start+0x6a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e05e      	b.n	80036a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_PWM_Start+0x82>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035f8:	e013      	b.n	8003622 <HAL_TIM_PWM_Start+0xaa>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d104      	bne.n	800360a <HAL_TIM_PWM_Start+0x92>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003608:	e00b      	b.n	8003622 <HAL_TIM_PWM_Start+0xaa>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d104      	bne.n	800361a <HAL_TIM_PWM_Start+0xa2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003618:	e003      	b.n	8003622 <HAL_TIM_PWM_Start+0xaa>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2201      	movs	r2, #1
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fc2e 	bl	8003e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1e      	ldr	r2, [pc, #120]	@ (80036b0 <HAL_TIM_PWM_Start+0x138>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d107      	bne.n	800364a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003648:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a18      	ldr	r2, [pc, #96]	@ (80036b0 <HAL_TIM_PWM_Start+0x138>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00e      	beq.n	8003672 <HAL_TIM_PWM_Start+0xfa>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365c:	d009      	beq.n	8003672 <HAL_TIM_PWM_Start+0xfa>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a14      	ldr	r2, [pc, #80]	@ (80036b4 <HAL_TIM_PWM_Start+0x13c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_TIM_PWM_Start+0xfa>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a12      	ldr	r2, [pc, #72]	@ (80036b8 <HAL_TIM_PWM_Start+0x140>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d111      	bne.n	8003696 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b06      	cmp	r3, #6
 8003682:	d010      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003694:	e007      	b.n	80036a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800

080036bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e093      	b.n	80037f8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7fd fecf 	bl	8001488 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003700:	f023 0307 	bic.w	r3, r3, #7
 8003704:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f000 f9c5 	bl	8003aa0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	4313      	orrs	r3, r2
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800375c:	f023 030c 	bic.w	r3, r3, #12
 8003760:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003768:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800376c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	4313      	orrs	r3, r2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	011a      	lsls	r2, r3, #4
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	031b      	lsls	r3, r3, #12
 800378c:	4313      	orrs	r3, r2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800379a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	4313      	orrs	r3, r2
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003810:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003818:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003820:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003828:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d110      	bne.n	8003852 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d102      	bne.n	800383c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003836:	7b7b      	ldrb	r3, [r7, #13]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d001      	beq.n	8003840 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e069      	b.n	8003914 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003850:	e031      	b.n	80038b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d110      	bne.n	800387a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003858:	7bbb      	ldrb	r3, [r7, #14]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d102      	bne.n	8003864 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800385e:	7b3b      	ldrb	r3, [r7, #12]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d001      	beq.n	8003868 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e055      	b.n	8003914 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003878:	e01d      	b.n	80038b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d108      	bne.n	8003892 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003880:	7bbb      	ldrb	r3, [r7, #14]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003886:	7b7b      	ldrb	r3, [r7, #13]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d102      	bne.n	8003892 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800388c:	7b3b      	ldrb	r3, [r7, #12]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d001      	beq.n	8003896 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e03e      	b.n	8003914 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_TIM_Encoder_Start+0xc4>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d008      	beq.n	80038d4 <HAL_TIM_Encoder_Start+0xd4>
 80038c2:	e00f      	b.n	80038e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2201      	movs	r2, #1
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fadd 	bl	8003e8c <TIM_CCxChannelCmd>
      break;
 80038d2:	e016      	b.n	8003902 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2201      	movs	r2, #1
 80038da:	2104      	movs	r1, #4
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fad5 	bl	8003e8c <TIM_CCxChannelCmd>
      break;
 80038e2:	e00e      	b.n	8003902 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2201      	movs	r2, #1
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 facd 	bl	8003e8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2201      	movs	r2, #1
 80038f8:	2104      	movs	r1, #4
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fac6 	bl	8003e8c <TIM_CCxChannelCmd>
      break;
 8003900:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003936:	2302      	movs	r3, #2
 8003938:	e0ae      	b.n	8003a98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b0c      	cmp	r3, #12
 8003946:	f200 809f 	bhi.w	8003a88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800394a:	a201      	add	r2, pc, #4	@ (adr r2, 8003950 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003950:	08003985 	.word	0x08003985
 8003954:	08003a89 	.word	0x08003a89
 8003958:	08003a89 	.word	0x08003a89
 800395c:	08003a89 	.word	0x08003a89
 8003960:	080039c5 	.word	0x080039c5
 8003964:	08003a89 	.word	0x08003a89
 8003968:	08003a89 	.word	0x08003a89
 800396c:	08003a89 	.word	0x08003a89
 8003970:	08003a07 	.word	0x08003a07
 8003974:	08003a89 	.word	0x08003a89
 8003978:	08003a89 	.word	0x08003a89
 800397c:	08003a89 	.word	0x08003a89
 8003980:	08003a47 	.word	0x08003a47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f8f6 	bl	8003b7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0208 	orr.w	r2, r2, #8
 800399e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0204 	bic.w	r2, r2, #4
 80039ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6999      	ldr	r1, [r3, #24]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	619a      	str	r2, [r3, #24]
      break;
 80039c2:	e064      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f93c 	bl	8003c48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6999      	ldr	r1, [r3, #24]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	021a      	lsls	r2, r3, #8
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	619a      	str	r2, [r3, #24]
      break;
 8003a04:	e043      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 f985 	bl	8003d1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0208 	orr.w	r2, r2, #8
 8003a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0204 	bic.w	r2, r2, #4
 8003a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69d9      	ldr	r1, [r3, #28]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	61da      	str	r2, [r3, #28]
      break;
 8003a44:	e023      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 f9cf 	bl	8003df0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69d9      	ldr	r1, [r3, #28]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	021a      	lsls	r2, r3, #8
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	61da      	str	r2, [r3, #28]
      break;
 8003a86:	e002      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a2f      	ldr	r2, [pc, #188]	@ (8003b70 <TIM_Base_SetConfig+0xd0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00b      	beq.n	8003ad0 <TIM_Base_SetConfig+0x30>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003abe:	d007      	beq.n	8003ad0 <TIM_Base_SetConfig+0x30>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b74 <TIM_Base_SetConfig+0xd4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <TIM_Base_SetConfig+0x30>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a2b      	ldr	r2, [pc, #172]	@ (8003b78 <TIM_Base_SetConfig+0xd8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d108      	bne.n	8003ae2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a22      	ldr	r2, [pc, #136]	@ (8003b70 <TIM_Base_SetConfig+0xd0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_Base_SetConfig+0x62>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af0:	d007      	beq.n	8003b02 <TIM_Base_SetConfig+0x62>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b74 <TIM_Base_SetConfig+0xd4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_Base_SetConfig+0x62>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b78 <TIM_Base_SetConfig+0xd8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d108      	bne.n	8003b14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003b70 <TIM_Base_SetConfig+0xd0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d103      	bne.n	8003b48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f023 0201 	bic.w	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	611a      	str	r2, [r3, #16]
  }
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800

08003b7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f023 0201 	bic.w	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0303 	bic.w	r3, r3, #3
 8003bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f023 0302 	bic.w	r3, r3, #2
 8003bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c44 <TIM_OC1_SetConfig+0xc8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d10c      	bne.n	8003bf2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 0308 	bic.w	r3, r3, #8
 8003bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f023 0304 	bic.w	r3, r3, #4
 8003bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a13      	ldr	r2, [pc, #76]	@ (8003c44 <TIM_OC1_SetConfig+0xc8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d111      	bne.n	8003c1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	621a      	str	r2, [r3, #32]
}
 8003c38:	bf00      	nop
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40012c00 	.word	0x40012c00

08003c48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f023 0210 	bic.w	r2, r3, #16
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f023 0320 	bic.w	r3, r3, #32
 8003c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d18 <TIM_OC2_SetConfig+0xd0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d10d      	bne.n	8003cc4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a14      	ldr	r2, [pc, #80]	@ (8003d18 <TIM_OC2_SetConfig+0xd0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d113      	bne.n	8003cf4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	40012c00 	.word	0x40012c00

08003d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0303 	bic.w	r3, r3, #3
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1d      	ldr	r2, [pc, #116]	@ (8003dec <TIM_OC3_SetConfig+0xd0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d10d      	bne.n	8003d96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a14      	ldr	r2, [pc, #80]	@ (8003dec <TIM_OC3_SetConfig+0xd0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d113      	bne.n	8003dc6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	621a      	str	r2, [r3, #32]
}
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40012c00 	.word	0x40012c00

08003df0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	031b      	lsls	r3, r3, #12
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a0f      	ldr	r2, [pc, #60]	@ (8003e88 <TIM_OC4_SetConfig+0x98>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d109      	bne.n	8003e64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	019b      	lsls	r3, r3, #6
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	40012c00 	.word	0x40012c00

08003e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1a      	ldr	r2, [r3, #32]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	43db      	mvns	r3, r3
 8003eae:	401a      	ands	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1a      	ldr	r2, [r3, #32]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	621a      	str	r2, [r3, #32]
}
 8003eca:	bf00      	nop
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e046      	b.n	8003f7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a16      	ldr	r2, [pc, #88]	@ (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f38:	d009      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a12      	ldr	r2, [pc, #72]	@ (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a10      	ldr	r2, [pc, #64]	@ (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10c      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800

08003f90 <calloc>:
 8003f90:	4b02      	ldr	r3, [pc, #8]	@ (8003f9c <calloc+0xc>)
 8003f92:	460a      	mov	r2, r1
 8003f94:	4601      	mov	r1, r0
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	f000 b802 	b.w	8003fa0 <_calloc_r>
 8003f9c:	2000004c 	.word	0x2000004c

08003fa0 <_calloc_r>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	fba1 5402 	umull	r5, r4, r1, r2
 8003fa6:	b93c      	cbnz	r4, 8003fb8 <_calloc_r+0x18>
 8003fa8:	4629      	mov	r1, r5
 8003faa:	f000 f83f 	bl	800402c <_malloc_r>
 8003fae:	4606      	mov	r6, r0
 8003fb0:	b928      	cbnz	r0, 8003fbe <_calloc_r+0x1e>
 8003fb2:	2600      	movs	r6, #0
 8003fb4:	4630      	mov	r0, r6
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	220c      	movs	r2, #12
 8003fba:	6002      	str	r2, [r0, #0]
 8003fbc:	e7f9      	b.n	8003fb2 <_calloc_r+0x12>
 8003fbe:	462a      	mov	r2, r5
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	f000 f8bf 	bl	8004144 <memset>
 8003fc6:	e7f5      	b.n	8003fb4 <_calloc_r+0x14>

08003fc8 <malloc>:
 8003fc8:	4b02      	ldr	r3, [pc, #8]	@ (8003fd4 <malloc+0xc>)
 8003fca:	4601      	mov	r1, r0
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	f000 b82d 	b.w	800402c <_malloc_r>
 8003fd2:	bf00      	nop
 8003fd4:	2000004c 	.word	0x2000004c

08003fd8 <free>:
 8003fd8:	4b02      	ldr	r3, [pc, #8]	@ (8003fe4 <free+0xc>)
 8003fda:	4601      	mov	r1, r0
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	f000 b8f5 	b.w	80041cc <_free_r>
 8003fe2:	bf00      	nop
 8003fe4:	2000004c 	.word	0x2000004c

08003fe8 <sbrk_aligned>:
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	4e0f      	ldr	r6, [pc, #60]	@ (8004028 <sbrk_aligned+0x40>)
 8003fec:	460c      	mov	r4, r1
 8003fee:	6831      	ldr	r1, [r6, #0]
 8003ff0:	4605      	mov	r5, r0
 8003ff2:	b911      	cbnz	r1, 8003ffa <sbrk_aligned+0x12>
 8003ff4:	f000 f8ae 	bl	8004154 <_sbrk_r>
 8003ff8:	6030      	str	r0, [r6, #0]
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	f000 f8a9 	bl	8004154 <_sbrk_r>
 8004002:	1c43      	adds	r3, r0, #1
 8004004:	d103      	bne.n	800400e <sbrk_aligned+0x26>
 8004006:	f04f 34ff 	mov.w	r4, #4294967295
 800400a:	4620      	mov	r0, r4
 800400c:	bd70      	pop	{r4, r5, r6, pc}
 800400e:	1cc4      	adds	r4, r0, #3
 8004010:	f024 0403 	bic.w	r4, r4, #3
 8004014:	42a0      	cmp	r0, r4
 8004016:	d0f8      	beq.n	800400a <sbrk_aligned+0x22>
 8004018:	1a21      	subs	r1, r4, r0
 800401a:	4628      	mov	r0, r5
 800401c:	f000 f89a 	bl	8004154 <_sbrk_r>
 8004020:	3001      	adds	r0, #1
 8004022:	d1f2      	bne.n	800400a <sbrk_aligned+0x22>
 8004024:	e7ef      	b.n	8004006 <sbrk_aligned+0x1e>
 8004026:	bf00      	nop
 8004028:	20000238 	.word	0x20000238

0800402c <_malloc_r>:
 800402c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004030:	1ccd      	adds	r5, r1, #3
 8004032:	f025 0503 	bic.w	r5, r5, #3
 8004036:	3508      	adds	r5, #8
 8004038:	2d0c      	cmp	r5, #12
 800403a:	bf38      	it	cc
 800403c:	250c      	movcc	r5, #12
 800403e:	2d00      	cmp	r5, #0
 8004040:	4606      	mov	r6, r0
 8004042:	db01      	blt.n	8004048 <_malloc_r+0x1c>
 8004044:	42a9      	cmp	r1, r5
 8004046:	d904      	bls.n	8004052 <_malloc_r+0x26>
 8004048:	230c      	movs	r3, #12
 800404a:	6033      	str	r3, [r6, #0]
 800404c:	2000      	movs	r0, #0
 800404e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004052:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004128 <_malloc_r+0xfc>
 8004056:	f000 f869 	bl	800412c <__malloc_lock>
 800405a:	f8d8 3000 	ldr.w	r3, [r8]
 800405e:	461c      	mov	r4, r3
 8004060:	bb44      	cbnz	r4, 80040b4 <_malloc_r+0x88>
 8004062:	4629      	mov	r1, r5
 8004064:	4630      	mov	r0, r6
 8004066:	f7ff ffbf 	bl	8003fe8 <sbrk_aligned>
 800406a:	1c43      	adds	r3, r0, #1
 800406c:	4604      	mov	r4, r0
 800406e:	d158      	bne.n	8004122 <_malloc_r+0xf6>
 8004070:	f8d8 4000 	ldr.w	r4, [r8]
 8004074:	4627      	mov	r7, r4
 8004076:	2f00      	cmp	r7, #0
 8004078:	d143      	bne.n	8004102 <_malloc_r+0xd6>
 800407a:	2c00      	cmp	r4, #0
 800407c:	d04b      	beq.n	8004116 <_malloc_r+0xea>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	4639      	mov	r1, r7
 8004082:	4630      	mov	r0, r6
 8004084:	eb04 0903 	add.w	r9, r4, r3
 8004088:	f000 f864 	bl	8004154 <_sbrk_r>
 800408c:	4581      	cmp	r9, r0
 800408e:	d142      	bne.n	8004116 <_malloc_r+0xea>
 8004090:	6821      	ldr	r1, [r4, #0]
 8004092:	4630      	mov	r0, r6
 8004094:	1a6d      	subs	r5, r5, r1
 8004096:	4629      	mov	r1, r5
 8004098:	f7ff ffa6 	bl	8003fe8 <sbrk_aligned>
 800409c:	3001      	adds	r0, #1
 800409e:	d03a      	beq.n	8004116 <_malloc_r+0xea>
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	442b      	add	r3, r5
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	f8d8 3000 	ldr.w	r3, [r8]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	bb62      	cbnz	r2, 8004108 <_malloc_r+0xdc>
 80040ae:	f8c8 7000 	str.w	r7, [r8]
 80040b2:	e00f      	b.n	80040d4 <_malloc_r+0xa8>
 80040b4:	6822      	ldr	r2, [r4, #0]
 80040b6:	1b52      	subs	r2, r2, r5
 80040b8:	d420      	bmi.n	80040fc <_malloc_r+0xd0>
 80040ba:	2a0b      	cmp	r2, #11
 80040bc:	d917      	bls.n	80040ee <_malloc_r+0xc2>
 80040be:	1961      	adds	r1, r4, r5
 80040c0:	42a3      	cmp	r3, r4
 80040c2:	6025      	str	r5, [r4, #0]
 80040c4:	bf18      	it	ne
 80040c6:	6059      	strne	r1, [r3, #4]
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	bf08      	it	eq
 80040cc:	f8c8 1000 	streq.w	r1, [r8]
 80040d0:	5162      	str	r2, [r4, r5]
 80040d2:	604b      	str	r3, [r1, #4]
 80040d4:	4630      	mov	r0, r6
 80040d6:	f000 f82f 	bl	8004138 <__malloc_unlock>
 80040da:	f104 000b 	add.w	r0, r4, #11
 80040de:	1d23      	adds	r3, r4, #4
 80040e0:	f020 0007 	bic.w	r0, r0, #7
 80040e4:	1ac2      	subs	r2, r0, r3
 80040e6:	bf1c      	itt	ne
 80040e8:	1a1b      	subne	r3, r3, r0
 80040ea:	50a3      	strne	r3, [r4, r2]
 80040ec:	e7af      	b.n	800404e <_malloc_r+0x22>
 80040ee:	6862      	ldr	r2, [r4, #4]
 80040f0:	42a3      	cmp	r3, r4
 80040f2:	bf0c      	ite	eq
 80040f4:	f8c8 2000 	streq.w	r2, [r8]
 80040f8:	605a      	strne	r2, [r3, #4]
 80040fa:	e7eb      	b.n	80040d4 <_malloc_r+0xa8>
 80040fc:	4623      	mov	r3, r4
 80040fe:	6864      	ldr	r4, [r4, #4]
 8004100:	e7ae      	b.n	8004060 <_malloc_r+0x34>
 8004102:	463c      	mov	r4, r7
 8004104:	687f      	ldr	r7, [r7, #4]
 8004106:	e7b6      	b.n	8004076 <_malloc_r+0x4a>
 8004108:	461a      	mov	r2, r3
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	42a3      	cmp	r3, r4
 800410e:	d1fb      	bne.n	8004108 <_malloc_r+0xdc>
 8004110:	2300      	movs	r3, #0
 8004112:	6053      	str	r3, [r2, #4]
 8004114:	e7de      	b.n	80040d4 <_malloc_r+0xa8>
 8004116:	230c      	movs	r3, #12
 8004118:	4630      	mov	r0, r6
 800411a:	6033      	str	r3, [r6, #0]
 800411c:	f000 f80c 	bl	8004138 <__malloc_unlock>
 8004120:	e794      	b.n	800404c <_malloc_r+0x20>
 8004122:	6005      	str	r5, [r0, #0]
 8004124:	e7d6      	b.n	80040d4 <_malloc_r+0xa8>
 8004126:	bf00      	nop
 8004128:	2000023c 	.word	0x2000023c

0800412c <__malloc_lock>:
 800412c:	4801      	ldr	r0, [pc, #4]	@ (8004134 <__malloc_lock+0x8>)
 800412e:	f000 b84b 	b.w	80041c8 <__retarget_lock_acquire_recursive>
 8004132:	bf00      	nop
 8004134:	2000037c 	.word	0x2000037c

08004138 <__malloc_unlock>:
 8004138:	4801      	ldr	r0, [pc, #4]	@ (8004140 <__malloc_unlock+0x8>)
 800413a:	f000 b846 	b.w	80041ca <__retarget_lock_release_recursive>
 800413e:	bf00      	nop
 8004140:	2000037c 	.word	0x2000037c

08004144 <memset>:
 8004144:	4603      	mov	r3, r0
 8004146:	4402      	add	r2, r0
 8004148:	4293      	cmp	r3, r2
 800414a:	d100      	bne.n	800414e <memset+0xa>
 800414c:	4770      	bx	lr
 800414e:	f803 1b01 	strb.w	r1, [r3], #1
 8004152:	e7f9      	b.n	8004148 <memset+0x4>

08004154 <_sbrk_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	2300      	movs	r3, #0
 8004158:	4d05      	ldr	r5, [pc, #20]	@ (8004170 <_sbrk_r+0x1c>)
 800415a:	4604      	mov	r4, r0
 800415c:	4608      	mov	r0, r1
 800415e:	602b      	str	r3, [r5, #0]
 8004160:	f7fd fa7a 	bl	8001658 <_sbrk>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d102      	bne.n	800416e <_sbrk_r+0x1a>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	b103      	cbz	r3, 800416e <_sbrk_r+0x1a>
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	bd38      	pop	{r3, r4, r5, pc}
 8004170:	20000378 	.word	0x20000378

08004174 <__errno>:
 8004174:	4b01      	ldr	r3, [pc, #4]	@ (800417c <__errno+0x8>)
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	2000004c 	.word	0x2000004c

08004180 <__libc_init_array>:
 8004180:	b570      	push	{r4, r5, r6, lr}
 8004182:	2600      	movs	r6, #0
 8004184:	4d0c      	ldr	r5, [pc, #48]	@ (80041b8 <__libc_init_array+0x38>)
 8004186:	4c0d      	ldr	r4, [pc, #52]	@ (80041bc <__libc_init_array+0x3c>)
 8004188:	1b64      	subs	r4, r4, r5
 800418a:	10a4      	asrs	r4, r4, #2
 800418c:	42a6      	cmp	r6, r4
 800418e:	d109      	bne.n	80041a4 <__libc_init_array+0x24>
 8004190:	f001 f882 	bl	8005298 <_init>
 8004194:	2600      	movs	r6, #0
 8004196:	4d0a      	ldr	r5, [pc, #40]	@ (80041c0 <__libc_init_array+0x40>)
 8004198:	4c0a      	ldr	r4, [pc, #40]	@ (80041c4 <__libc_init_array+0x44>)
 800419a:	1b64      	subs	r4, r4, r5
 800419c:	10a4      	asrs	r4, r4, #2
 800419e:	42a6      	cmp	r6, r4
 80041a0:	d105      	bne.n	80041ae <__libc_init_array+0x2e>
 80041a2:	bd70      	pop	{r4, r5, r6, pc}
 80041a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a8:	4798      	blx	r3
 80041aa:	3601      	adds	r6, #1
 80041ac:	e7ee      	b.n	800418c <__libc_init_array+0xc>
 80041ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b2:	4798      	blx	r3
 80041b4:	3601      	adds	r6, #1
 80041b6:	e7f2      	b.n	800419e <__libc_init_array+0x1e>
 80041b8:	080054b0 	.word	0x080054b0
 80041bc:	080054b0 	.word	0x080054b0
 80041c0:	080054b0 	.word	0x080054b0
 80041c4:	080054b4 	.word	0x080054b4

080041c8 <__retarget_lock_acquire_recursive>:
 80041c8:	4770      	bx	lr

080041ca <__retarget_lock_release_recursive>:
 80041ca:	4770      	bx	lr

080041cc <_free_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4605      	mov	r5, r0
 80041d0:	2900      	cmp	r1, #0
 80041d2:	d040      	beq.n	8004256 <_free_r+0x8a>
 80041d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d8:	1f0c      	subs	r4, r1, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bfb8      	it	lt
 80041de:	18e4      	addlt	r4, r4, r3
 80041e0:	f7ff ffa4 	bl	800412c <__malloc_lock>
 80041e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004258 <_free_r+0x8c>)
 80041e6:	6813      	ldr	r3, [r2, #0]
 80041e8:	b933      	cbnz	r3, 80041f8 <_free_r+0x2c>
 80041ea:	6063      	str	r3, [r4, #4]
 80041ec:	6014      	str	r4, [r2, #0]
 80041ee:	4628      	mov	r0, r5
 80041f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041f4:	f7ff bfa0 	b.w	8004138 <__malloc_unlock>
 80041f8:	42a3      	cmp	r3, r4
 80041fa:	d908      	bls.n	800420e <_free_r+0x42>
 80041fc:	6820      	ldr	r0, [r4, #0]
 80041fe:	1821      	adds	r1, r4, r0
 8004200:	428b      	cmp	r3, r1
 8004202:	bf01      	itttt	eq
 8004204:	6819      	ldreq	r1, [r3, #0]
 8004206:	685b      	ldreq	r3, [r3, #4]
 8004208:	1809      	addeq	r1, r1, r0
 800420a:	6021      	streq	r1, [r4, #0]
 800420c:	e7ed      	b.n	80041ea <_free_r+0x1e>
 800420e:	461a      	mov	r2, r3
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	b10b      	cbz	r3, 8004218 <_free_r+0x4c>
 8004214:	42a3      	cmp	r3, r4
 8004216:	d9fa      	bls.n	800420e <_free_r+0x42>
 8004218:	6811      	ldr	r1, [r2, #0]
 800421a:	1850      	adds	r0, r2, r1
 800421c:	42a0      	cmp	r0, r4
 800421e:	d10b      	bne.n	8004238 <_free_r+0x6c>
 8004220:	6820      	ldr	r0, [r4, #0]
 8004222:	4401      	add	r1, r0
 8004224:	1850      	adds	r0, r2, r1
 8004226:	4283      	cmp	r3, r0
 8004228:	6011      	str	r1, [r2, #0]
 800422a:	d1e0      	bne.n	80041ee <_free_r+0x22>
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4408      	add	r0, r1
 8004232:	6010      	str	r0, [r2, #0]
 8004234:	6053      	str	r3, [r2, #4]
 8004236:	e7da      	b.n	80041ee <_free_r+0x22>
 8004238:	d902      	bls.n	8004240 <_free_r+0x74>
 800423a:	230c      	movs	r3, #12
 800423c:	602b      	str	r3, [r5, #0]
 800423e:	e7d6      	b.n	80041ee <_free_r+0x22>
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	1821      	adds	r1, r4, r0
 8004244:	428b      	cmp	r3, r1
 8004246:	bf01      	itttt	eq
 8004248:	6819      	ldreq	r1, [r3, #0]
 800424a:	685b      	ldreq	r3, [r3, #4]
 800424c:	1809      	addeq	r1, r1, r0
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	6063      	str	r3, [r4, #4]
 8004252:	6054      	str	r4, [r2, #4]
 8004254:	e7cb      	b.n	80041ee <_free_r+0x22>
 8004256:	bd38      	pop	{r3, r4, r5, pc}
 8004258:	2000023c 	.word	0x2000023c

0800425c <cos>:
 800425c:	b530      	push	{r4, r5, lr}
 800425e:	4d20      	ldr	r5, [pc, #128]	@ (80042e0 <cos+0x84>)
 8004260:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004264:	42ac      	cmp	r4, r5
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	b087      	sub	sp, #28
 800426c:	d806      	bhi.n	800427c <cos+0x20>
 800426e:	2200      	movs	r2, #0
 8004270:	2300      	movs	r3, #0
 8004272:	b007      	add	sp, #28
 8004274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004278:	f000 b87e 	b.w	8004378 <__kernel_cos>
 800427c:	4d19      	ldr	r5, [pc, #100]	@ (80042e4 <cos+0x88>)
 800427e:	42ac      	cmp	r4, r5
 8004280:	d903      	bls.n	800428a <cos+0x2e>
 8004282:	f7fb ff69 	bl	8000158 <__aeabi_dsub>
 8004286:	b007      	add	sp, #28
 8004288:	bd30      	pop	{r4, r5, pc}
 800428a:	aa02      	add	r2, sp, #8
 800428c:	f000 f9ec 	bl	8004668 <__ieee754_rem_pio2>
 8004290:	f000 0003 	and.w	r0, r0, #3
 8004294:	2801      	cmp	r0, #1
 8004296:	d009      	beq.n	80042ac <cos+0x50>
 8004298:	2802      	cmp	r0, #2
 800429a:	d011      	beq.n	80042c0 <cos+0x64>
 800429c:	b9b8      	cbnz	r0, 80042ce <cos+0x72>
 800429e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042a6:	f000 f867 	bl	8004378 <__kernel_cos>
 80042aa:	e7ec      	b.n	8004286 <cos+0x2a>
 80042ac:	9000      	str	r0, [sp, #0]
 80042ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042b6:	f000 f91f 	bl	80044f8 <__kernel_sin>
 80042ba:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80042be:	e7e2      	b.n	8004286 <cos+0x2a>
 80042c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042c8:	f000 f856 	bl	8004378 <__kernel_cos>
 80042cc:	e7f5      	b.n	80042ba <cos+0x5e>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042da:	f000 f90d 	bl	80044f8 <__kernel_sin>
 80042de:	e7d2      	b.n	8004286 <cos+0x2a>
 80042e0:	3fe921fb 	.word	0x3fe921fb
 80042e4:	7fefffff 	.word	0x7fefffff

080042e8 <sin>:
 80042e8:	b530      	push	{r4, r5, lr}
 80042ea:	4d20      	ldr	r5, [pc, #128]	@ (800436c <sin+0x84>)
 80042ec:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80042f0:	42ac      	cmp	r4, r5
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	b087      	sub	sp, #28
 80042f8:	d806      	bhi.n	8004308 <sin+0x20>
 80042fa:	2300      	movs	r3, #0
 80042fc:	2200      	movs	r2, #0
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2300      	movs	r3, #0
 8004302:	f000 f8f9 	bl	80044f8 <__kernel_sin>
 8004306:	e004      	b.n	8004312 <sin+0x2a>
 8004308:	4d19      	ldr	r5, [pc, #100]	@ (8004370 <sin+0x88>)
 800430a:	42ac      	cmp	r4, r5
 800430c:	d903      	bls.n	8004316 <sin+0x2e>
 800430e:	f7fb ff23 	bl	8000158 <__aeabi_dsub>
 8004312:	b007      	add	sp, #28
 8004314:	bd30      	pop	{r4, r5, pc}
 8004316:	aa02      	add	r2, sp, #8
 8004318:	f000 f9a6 	bl	8004668 <__ieee754_rem_pio2>
 800431c:	f000 0003 	and.w	r0, r0, #3
 8004320:	2801      	cmp	r0, #1
 8004322:	d009      	beq.n	8004338 <sin+0x50>
 8004324:	2802      	cmp	r0, #2
 8004326:	d00e      	beq.n	8004346 <sin+0x5e>
 8004328:	b9c0      	cbnz	r0, 800435c <sin+0x74>
 800432a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800432e:	2301      	movs	r3, #1
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004336:	e7e4      	b.n	8004302 <sin+0x1a>
 8004338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800433c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004340:	f000 f81a 	bl	8004378 <__kernel_cos>
 8004344:	e7e5      	b.n	8004312 <sin+0x2a>
 8004346:	2301      	movs	r3, #1
 8004348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004352:	f000 f8d1 	bl	80044f8 <__kernel_sin>
 8004356:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800435a:	e7da      	b.n	8004312 <sin+0x2a>
 800435c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004364:	f000 f808 	bl	8004378 <__kernel_cos>
 8004368:	e7f5      	b.n	8004356 <sin+0x6e>
 800436a:	bf00      	nop
 800436c:	3fe921fb 	.word	0x3fe921fb
 8004370:	7fefffff 	.word	0x7fefffff
 8004374:	00000000 	.word	0x00000000

08004378 <__kernel_cos>:
 8004378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8004380:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8004384:	4680      	mov	r8, r0
 8004386:	4689      	mov	r9, r1
 8004388:	e9cd 2300 	strd	r2, r3, [sp]
 800438c:	d204      	bcs.n	8004398 <__kernel_cos+0x20>
 800438e:	f7fc fb35 	bl	80009fc <__aeabi_d2iz>
 8004392:	2800      	cmp	r0, #0
 8004394:	f000 8086 	beq.w	80044a4 <__kernel_cos+0x12c>
 8004398:	4642      	mov	r2, r8
 800439a:	464b      	mov	r3, r9
 800439c:	4640      	mov	r0, r8
 800439e:	4649      	mov	r1, r9
 80043a0:	f7fc f892 	bl	80004c8 <__aeabi_dmul>
 80043a4:	2200      	movs	r2, #0
 80043a6:	4b4e      	ldr	r3, [pc, #312]	@ (80044e0 <__kernel_cos+0x168>)
 80043a8:	4604      	mov	r4, r0
 80043aa:	460d      	mov	r5, r1
 80043ac:	f7fc f88c 	bl	80004c8 <__aeabi_dmul>
 80043b0:	a33f      	add	r3, pc, #252	@ (adr r3, 80044b0 <__kernel_cos+0x138>)
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	4682      	mov	sl, r0
 80043b8:	468b      	mov	fp, r1
 80043ba:	4620      	mov	r0, r4
 80043bc:	4629      	mov	r1, r5
 80043be:	f7fc f883 	bl	80004c8 <__aeabi_dmul>
 80043c2:	a33d      	add	r3, pc, #244	@ (adr r3, 80044b8 <__kernel_cos+0x140>)
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f7fb fec8 	bl	800015c <__adddf3>
 80043cc:	4622      	mov	r2, r4
 80043ce:	462b      	mov	r3, r5
 80043d0:	f7fc f87a 	bl	80004c8 <__aeabi_dmul>
 80043d4:	a33a      	add	r3, pc, #232	@ (adr r3, 80044c0 <__kernel_cos+0x148>)
 80043d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043da:	f7fb febd 	bl	8000158 <__aeabi_dsub>
 80043de:	4622      	mov	r2, r4
 80043e0:	462b      	mov	r3, r5
 80043e2:	f7fc f871 	bl	80004c8 <__aeabi_dmul>
 80043e6:	a338      	add	r3, pc, #224	@ (adr r3, 80044c8 <__kernel_cos+0x150>)
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f7fb feb6 	bl	800015c <__adddf3>
 80043f0:	4622      	mov	r2, r4
 80043f2:	462b      	mov	r3, r5
 80043f4:	f7fc f868 	bl	80004c8 <__aeabi_dmul>
 80043f8:	a335      	add	r3, pc, #212	@ (adr r3, 80044d0 <__kernel_cos+0x158>)
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f7fb feab 	bl	8000158 <__aeabi_dsub>
 8004402:	4622      	mov	r2, r4
 8004404:	462b      	mov	r3, r5
 8004406:	f7fc f85f 	bl	80004c8 <__aeabi_dmul>
 800440a:	a333      	add	r3, pc, #204	@ (adr r3, 80044d8 <__kernel_cos+0x160>)
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f7fb fea4 	bl	800015c <__adddf3>
 8004414:	4622      	mov	r2, r4
 8004416:	462b      	mov	r3, r5
 8004418:	f7fc f856 	bl	80004c8 <__aeabi_dmul>
 800441c:	4622      	mov	r2, r4
 800441e:	462b      	mov	r3, r5
 8004420:	f7fc f852 	bl	80004c8 <__aeabi_dmul>
 8004424:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004428:	4604      	mov	r4, r0
 800442a:	460d      	mov	r5, r1
 800442c:	4640      	mov	r0, r8
 800442e:	4649      	mov	r1, r9
 8004430:	f7fc f84a 	bl	80004c8 <__aeabi_dmul>
 8004434:	460b      	mov	r3, r1
 8004436:	4602      	mov	r2, r0
 8004438:	4629      	mov	r1, r5
 800443a:	4620      	mov	r0, r4
 800443c:	f7fb fe8c 	bl	8000158 <__aeabi_dsub>
 8004440:	4b28      	ldr	r3, [pc, #160]	@ (80044e4 <__kernel_cos+0x16c>)
 8004442:	4680      	mov	r8, r0
 8004444:	429e      	cmp	r6, r3
 8004446:	4689      	mov	r9, r1
 8004448:	d80e      	bhi.n	8004468 <__kernel_cos+0xf0>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4650      	mov	r0, sl
 8004450:	4659      	mov	r1, fp
 8004452:	f7fb fe81 	bl	8000158 <__aeabi_dsub>
 8004456:	4602      	mov	r2, r0
 8004458:	2000      	movs	r0, #0
 800445a:	460b      	mov	r3, r1
 800445c:	4922      	ldr	r1, [pc, #136]	@ (80044e8 <__kernel_cos+0x170>)
 800445e:	f7fb fe7b 	bl	8000158 <__aeabi_dsub>
 8004462:	b003      	add	sp, #12
 8004464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004468:	2400      	movs	r4, #0
 800446a:	4b20      	ldr	r3, [pc, #128]	@ (80044ec <__kernel_cos+0x174>)
 800446c:	4622      	mov	r2, r4
 800446e:	429e      	cmp	r6, r3
 8004470:	bf8c      	ite	hi
 8004472:	4d1f      	ldrhi	r5, [pc, #124]	@ (80044f0 <__kernel_cos+0x178>)
 8004474:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8004478:	462b      	mov	r3, r5
 800447a:	2000      	movs	r0, #0
 800447c:	491a      	ldr	r1, [pc, #104]	@ (80044e8 <__kernel_cos+0x170>)
 800447e:	f7fb fe6b 	bl	8000158 <__aeabi_dsub>
 8004482:	4622      	mov	r2, r4
 8004484:	4606      	mov	r6, r0
 8004486:	460f      	mov	r7, r1
 8004488:	462b      	mov	r3, r5
 800448a:	4650      	mov	r0, sl
 800448c:	4659      	mov	r1, fp
 800448e:	f7fb fe63 	bl	8000158 <__aeabi_dsub>
 8004492:	4642      	mov	r2, r8
 8004494:	464b      	mov	r3, r9
 8004496:	f7fb fe5f 	bl	8000158 <__aeabi_dsub>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4630      	mov	r0, r6
 80044a0:	4639      	mov	r1, r7
 80044a2:	e7dc      	b.n	800445e <__kernel_cos+0xe6>
 80044a4:	2000      	movs	r0, #0
 80044a6:	4910      	ldr	r1, [pc, #64]	@ (80044e8 <__kernel_cos+0x170>)
 80044a8:	e7db      	b.n	8004462 <__kernel_cos+0xea>
 80044aa:	bf00      	nop
 80044ac:	f3af 8000 	nop.w
 80044b0:	be8838d4 	.word	0xbe8838d4
 80044b4:	bda8fae9 	.word	0xbda8fae9
 80044b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80044bc:	3e21ee9e 	.word	0x3e21ee9e
 80044c0:	809c52ad 	.word	0x809c52ad
 80044c4:	3e927e4f 	.word	0x3e927e4f
 80044c8:	19cb1590 	.word	0x19cb1590
 80044cc:	3efa01a0 	.word	0x3efa01a0
 80044d0:	16c15177 	.word	0x16c15177
 80044d4:	3f56c16c 	.word	0x3f56c16c
 80044d8:	5555554c 	.word	0x5555554c
 80044dc:	3fa55555 	.word	0x3fa55555
 80044e0:	3fe00000 	.word	0x3fe00000
 80044e4:	3fd33332 	.word	0x3fd33332
 80044e8:	3ff00000 	.word	0x3ff00000
 80044ec:	3fe90000 	.word	0x3fe90000
 80044f0:	3fd20000 	.word	0x3fd20000
 80044f4:	00000000 	.word	0x00000000

080044f8 <__kernel_sin>:
 80044f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fc:	461f      	mov	r7, r3
 80044fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004502:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004506:	4604      	mov	r4, r0
 8004508:	460d      	mov	r5, r1
 800450a:	4616      	mov	r6, r2
 800450c:	b085      	sub	sp, #20
 800450e:	d203      	bcs.n	8004518 <__kernel_sin+0x20>
 8004510:	f7fc fa74 	bl	80009fc <__aeabi_d2iz>
 8004514:	2800      	cmp	r0, #0
 8004516:	d051      	beq.n	80045bc <__kernel_sin+0xc4>
 8004518:	4622      	mov	r2, r4
 800451a:	462b      	mov	r3, r5
 800451c:	4620      	mov	r0, r4
 800451e:	4629      	mov	r1, r5
 8004520:	f7fb ffd2 	bl	80004c8 <__aeabi_dmul>
 8004524:	4682      	mov	sl, r0
 8004526:	468b      	mov	fp, r1
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4620      	mov	r0, r4
 800452e:	4629      	mov	r1, r5
 8004530:	f7fb ffca 	bl	80004c8 <__aeabi_dmul>
 8004534:	a33e      	add	r3, pc, #248	@ (adr r3, 8004630 <__kernel_sin+0x138>)
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	4680      	mov	r8, r0
 800453c:	4689      	mov	r9, r1
 800453e:	4650      	mov	r0, sl
 8004540:	4659      	mov	r1, fp
 8004542:	f7fb ffc1 	bl	80004c8 <__aeabi_dmul>
 8004546:	a33c      	add	r3, pc, #240	@ (adr r3, 8004638 <__kernel_sin+0x140>)
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	f7fb fe04 	bl	8000158 <__aeabi_dsub>
 8004550:	4652      	mov	r2, sl
 8004552:	465b      	mov	r3, fp
 8004554:	f7fb ffb8 	bl	80004c8 <__aeabi_dmul>
 8004558:	a339      	add	r3, pc, #228	@ (adr r3, 8004640 <__kernel_sin+0x148>)
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f7fb fdfd 	bl	800015c <__adddf3>
 8004562:	4652      	mov	r2, sl
 8004564:	465b      	mov	r3, fp
 8004566:	f7fb ffaf 	bl	80004c8 <__aeabi_dmul>
 800456a:	a337      	add	r3, pc, #220	@ (adr r3, 8004648 <__kernel_sin+0x150>)
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	f7fb fdf2 	bl	8000158 <__aeabi_dsub>
 8004574:	4652      	mov	r2, sl
 8004576:	465b      	mov	r3, fp
 8004578:	f7fb ffa6 	bl	80004c8 <__aeabi_dmul>
 800457c:	a334      	add	r3, pc, #208	@ (adr r3, 8004650 <__kernel_sin+0x158>)
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f7fb fdeb 	bl	800015c <__adddf3>
 8004586:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004588:	e9cd 0100 	strd	r0, r1, [sp]
 800458c:	b9db      	cbnz	r3, 80045c6 <__kernel_sin+0xce>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4650      	mov	r0, sl
 8004594:	4659      	mov	r1, fp
 8004596:	f7fb ff97 	bl	80004c8 <__aeabi_dmul>
 800459a:	a32f      	add	r3, pc, #188	@ (adr r3, 8004658 <__kernel_sin+0x160>)
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f7fb fdda 	bl	8000158 <__aeabi_dsub>
 80045a4:	4642      	mov	r2, r8
 80045a6:	464b      	mov	r3, r9
 80045a8:	f7fb ff8e 	bl	80004c8 <__aeabi_dmul>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4620      	mov	r0, r4
 80045b2:	4629      	mov	r1, r5
 80045b4:	f7fb fdd2 	bl	800015c <__adddf3>
 80045b8:	4604      	mov	r4, r0
 80045ba:	460d      	mov	r5, r1
 80045bc:	4620      	mov	r0, r4
 80045be:	4629      	mov	r1, r5
 80045c0:	b005      	add	sp, #20
 80045c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c6:	2200      	movs	r2, #0
 80045c8:	4630      	mov	r0, r6
 80045ca:	4639      	mov	r1, r7
 80045cc:	4b24      	ldr	r3, [pc, #144]	@ (8004660 <__kernel_sin+0x168>)
 80045ce:	f7fb ff7b 	bl	80004c8 <__aeabi_dmul>
 80045d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045da:	4640      	mov	r0, r8
 80045dc:	4649      	mov	r1, r9
 80045de:	f7fb ff73 	bl	80004c8 <__aeabi_dmul>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ea:	f7fb fdb5 	bl	8000158 <__aeabi_dsub>
 80045ee:	4652      	mov	r2, sl
 80045f0:	465b      	mov	r3, fp
 80045f2:	f7fb ff69 	bl	80004c8 <__aeabi_dmul>
 80045f6:	4632      	mov	r2, r6
 80045f8:	463b      	mov	r3, r7
 80045fa:	f7fb fdad 	bl	8000158 <__aeabi_dsub>
 80045fe:	a316      	add	r3, pc, #88	@ (adr r3, 8004658 <__kernel_sin+0x160>)
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	4606      	mov	r6, r0
 8004606:	460f      	mov	r7, r1
 8004608:	4640      	mov	r0, r8
 800460a:	4649      	mov	r1, r9
 800460c:	f7fb ff5c 	bl	80004c8 <__aeabi_dmul>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4630      	mov	r0, r6
 8004616:	4639      	mov	r1, r7
 8004618:	f7fb fda0 	bl	800015c <__adddf3>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4620      	mov	r0, r4
 8004622:	4629      	mov	r1, r5
 8004624:	f7fb fd98 	bl	8000158 <__aeabi_dsub>
 8004628:	e7c6      	b.n	80045b8 <__kernel_sin+0xc0>
 800462a:	bf00      	nop
 800462c:	f3af 8000 	nop.w
 8004630:	5acfd57c 	.word	0x5acfd57c
 8004634:	3de5d93a 	.word	0x3de5d93a
 8004638:	8a2b9ceb 	.word	0x8a2b9ceb
 800463c:	3e5ae5e6 	.word	0x3e5ae5e6
 8004640:	57b1fe7d 	.word	0x57b1fe7d
 8004644:	3ec71de3 	.word	0x3ec71de3
 8004648:	19c161d5 	.word	0x19c161d5
 800464c:	3f2a01a0 	.word	0x3f2a01a0
 8004650:	1110f8a6 	.word	0x1110f8a6
 8004654:	3f811111 	.word	0x3f811111
 8004658:	55555549 	.word	0x55555549
 800465c:	3fc55555 	.word	0x3fc55555
 8004660:	3fe00000 	.word	0x3fe00000
 8004664:	00000000 	.word	0x00000000

08004668 <__ieee754_rem_pio2>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	4bc4      	ldr	r3, [pc, #784]	@ (8004980 <__ieee754_rem_pio2+0x318>)
 800466e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8004672:	b08d      	sub	sp, #52	@ 0x34
 8004674:	4598      	cmp	r8, r3
 8004676:	4606      	mov	r6, r0
 8004678:	460f      	mov	r7, r1
 800467a:	4614      	mov	r4, r2
 800467c:	9104      	str	r1, [sp, #16]
 800467e:	d807      	bhi.n	8004690 <__ieee754_rem_pio2+0x28>
 8004680:	e9c2 6700 	strd	r6, r7, [r2]
 8004684:	2300      	movs	r3, #0
 8004686:	2200      	movs	r2, #0
 8004688:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800468c:	2500      	movs	r5, #0
 800468e:	e026      	b.n	80046de <__ieee754_rem_pio2+0x76>
 8004690:	4bbc      	ldr	r3, [pc, #752]	@ (8004984 <__ieee754_rem_pio2+0x31c>)
 8004692:	4598      	cmp	r8, r3
 8004694:	d876      	bhi.n	8004784 <__ieee754_rem_pio2+0x11c>
 8004696:	9b04      	ldr	r3, [sp, #16]
 8004698:	4dbb      	ldr	r5, [pc, #748]	@ (8004988 <__ieee754_rem_pio2+0x320>)
 800469a:	2b00      	cmp	r3, #0
 800469c:	a3aa      	add	r3, pc, #680	@ (adr r3, 8004948 <__ieee754_rem_pio2+0x2e0>)
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	dd38      	ble.n	8004716 <__ieee754_rem_pio2+0xae>
 80046a4:	f7fb fd58 	bl	8000158 <__aeabi_dsub>
 80046a8:	45a8      	cmp	r8, r5
 80046aa:	4606      	mov	r6, r0
 80046ac:	460f      	mov	r7, r1
 80046ae:	d01a      	beq.n	80046e6 <__ieee754_rem_pio2+0x7e>
 80046b0:	a3a7      	add	r3, pc, #668	@ (adr r3, 8004950 <__ieee754_rem_pio2+0x2e8>)
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	f7fb fd4f 	bl	8000158 <__aeabi_dsub>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4680      	mov	r8, r0
 80046c0:	4689      	mov	r9, r1
 80046c2:	4630      	mov	r0, r6
 80046c4:	4639      	mov	r1, r7
 80046c6:	f7fb fd47 	bl	8000158 <__aeabi_dsub>
 80046ca:	a3a1      	add	r3, pc, #644	@ (adr r3, 8004950 <__ieee754_rem_pio2+0x2e8>)
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f7fb fd42 	bl	8000158 <__aeabi_dsub>
 80046d4:	2501      	movs	r5, #1
 80046d6:	e9c4 8900 	strd	r8, r9, [r4]
 80046da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80046de:	4628      	mov	r0, r5
 80046e0:	b00d      	add	sp, #52	@ 0x34
 80046e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e6:	a39c      	add	r3, pc, #624	@ (adr r3, 8004958 <__ieee754_rem_pio2+0x2f0>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f7fb fd34 	bl	8000158 <__aeabi_dsub>
 80046f0:	a39b      	add	r3, pc, #620	@ (adr r3, 8004960 <__ieee754_rem_pio2+0x2f8>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	4606      	mov	r6, r0
 80046f8:	460f      	mov	r7, r1
 80046fa:	f7fb fd2d 	bl	8000158 <__aeabi_dsub>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4680      	mov	r8, r0
 8004704:	4689      	mov	r9, r1
 8004706:	4630      	mov	r0, r6
 8004708:	4639      	mov	r1, r7
 800470a:	f7fb fd25 	bl	8000158 <__aeabi_dsub>
 800470e:	a394      	add	r3, pc, #592	@ (adr r3, 8004960 <__ieee754_rem_pio2+0x2f8>)
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	e7dc      	b.n	80046d0 <__ieee754_rem_pio2+0x68>
 8004716:	f7fb fd21 	bl	800015c <__adddf3>
 800471a:	45a8      	cmp	r8, r5
 800471c:	4606      	mov	r6, r0
 800471e:	460f      	mov	r7, r1
 8004720:	d018      	beq.n	8004754 <__ieee754_rem_pio2+0xec>
 8004722:	a38b      	add	r3, pc, #556	@ (adr r3, 8004950 <__ieee754_rem_pio2+0x2e8>)
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f7fb fd18 	bl	800015c <__adddf3>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4680      	mov	r8, r0
 8004732:	4689      	mov	r9, r1
 8004734:	4630      	mov	r0, r6
 8004736:	4639      	mov	r1, r7
 8004738:	f7fb fd0e 	bl	8000158 <__aeabi_dsub>
 800473c:	a384      	add	r3, pc, #528	@ (adr r3, 8004950 <__ieee754_rem_pio2+0x2e8>)
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	f7fb fd0b 	bl	800015c <__adddf3>
 8004746:	f04f 35ff 	mov.w	r5, #4294967295
 800474a:	e9c4 8900 	strd	r8, r9, [r4]
 800474e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004752:	e7c4      	b.n	80046de <__ieee754_rem_pio2+0x76>
 8004754:	a380      	add	r3, pc, #512	@ (adr r3, 8004958 <__ieee754_rem_pio2+0x2f0>)
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	f7fb fcff 	bl	800015c <__adddf3>
 800475e:	a380      	add	r3, pc, #512	@ (adr r3, 8004960 <__ieee754_rem_pio2+0x2f8>)
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	4606      	mov	r6, r0
 8004766:	460f      	mov	r7, r1
 8004768:	f7fb fcf8 	bl	800015c <__adddf3>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4680      	mov	r8, r0
 8004772:	4689      	mov	r9, r1
 8004774:	4630      	mov	r0, r6
 8004776:	4639      	mov	r1, r7
 8004778:	f7fb fcee 	bl	8000158 <__aeabi_dsub>
 800477c:	a378      	add	r3, pc, #480	@ (adr r3, 8004960 <__ieee754_rem_pio2+0x2f8>)
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	e7de      	b.n	8004742 <__ieee754_rem_pio2+0xda>
 8004784:	4b81      	ldr	r3, [pc, #516]	@ (800498c <__ieee754_rem_pio2+0x324>)
 8004786:	4598      	cmp	r8, r3
 8004788:	f200 80cf 	bhi.w	800492a <__ieee754_rem_pio2+0x2c2>
 800478c:	f000 f962 	bl	8004a54 <fabs>
 8004790:	a375      	add	r3, pc, #468	@ (adr r3, 8004968 <__ieee754_rem_pio2+0x300>)
 8004792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004796:	4606      	mov	r6, r0
 8004798:	460f      	mov	r7, r1
 800479a:	f7fb fe95 	bl	80004c8 <__aeabi_dmul>
 800479e:	2200      	movs	r2, #0
 80047a0:	4b7b      	ldr	r3, [pc, #492]	@ (8004990 <__ieee754_rem_pio2+0x328>)
 80047a2:	f7fb fcdb 	bl	800015c <__adddf3>
 80047a6:	f7fc f929 	bl	80009fc <__aeabi_d2iz>
 80047aa:	4605      	mov	r5, r0
 80047ac:	f7fb fe22 	bl	80003f4 <__aeabi_i2d>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047b8:	a363      	add	r3, pc, #396	@ (adr r3, 8004948 <__ieee754_rem_pio2+0x2e0>)
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f7fb fe83 	bl	80004c8 <__aeabi_dmul>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4630      	mov	r0, r6
 80047c8:	4639      	mov	r1, r7
 80047ca:	f7fb fcc5 	bl	8000158 <__aeabi_dsub>
 80047ce:	a360      	add	r3, pc, #384	@ (adr r3, 8004950 <__ieee754_rem_pio2+0x2e8>)
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	4682      	mov	sl, r0
 80047d6:	468b      	mov	fp, r1
 80047d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047dc:	f7fb fe74 	bl	80004c8 <__aeabi_dmul>
 80047e0:	2d1f      	cmp	r5, #31
 80047e2:	4606      	mov	r6, r0
 80047e4:	460f      	mov	r7, r1
 80047e6:	dc0c      	bgt.n	8004802 <__ieee754_rem_pio2+0x19a>
 80047e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004994 <__ieee754_rem_pio2+0x32c>)
 80047ea:	1e6a      	subs	r2, r5, #1
 80047ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f0:	4543      	cmp	r3, r8
 80047f2:	d006      	beq.n	8004802 <__ieee754_rem_pio2+0x19a>
 80047f4:	4632      	mov	r2, r6
 80047f6:	463b      	mov	r3, r7
 80047f8:	4650      	mov	r0, sl
 80047fa:	4659      	mov	r1, fp
 80047fc:	f7fb fcac 	bl	8000158 <__aeabi_dsub>
 8004800:	e00e      	b.n	8004820 <__ieee754_rem_pio2+0x1b8>
 8004802:	463b      	mov	r3, r7
 8004804:	4632      	mov	r2, r6
 8004806:	4650      	mov	r0, sl
 8004808:	4659      	mov	r1, fp
 800480a:	f7fb fca5 	bl	8000158 <__aeabi_dsub>
 800480e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004812:	9305      	str	r3, [sp, #20]
 8004814:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004818:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800481c:	2b10      	cmp	r3, #16
 800481e:	dc02      	bgt.n	8004826 <__ieee754_rem_pio2+0x1be>
 8004820:	e9c4 0100 	strd	r0, r1, [r4]
 8004824:	e039      	b.n	800489a <__ieee754_rem_pio2+0x232>
 8004826:	a34c      	add	r3, pc, #304	@ (adr r3, 8004958 <__ieee754_rem_pio2+0x2f0>)
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004830:	f7fb fe4a 	bl	80004c8 <__aeabi_dmul>
 8004834:	4606      	mov	r6, r0
 8004836:	460f      	mov	r7, r1
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4650      	mov	r0, sl
 800483e:	4659      	mov	r1, fp
 8004840:	f7fb fc8a 	bl	8000158 <__aeabi_dsub>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4680      	mov	r8, r0
 800484a:	4689      	mov	r9, r1
 800484c:	4650      	mov	r0, sl
 800484e:	4659      	mov	r1, fp
 8004850:	f7fb fc82 	bl	8000158 <__aeabi_dsub>
 8004854:	4632      	mov	r2, r6
 8004856:	463b      	mov	r3, r7
 8004858:	f7fb fc7e 	bl	8000158 <__aeabi_dsub>
 800485c:	a340      	add	r3, pc, #256	@ (adr r3, 8004960 <__ieee754_rem_pio2+0x2f8>)
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	4606      	mov	r6, r0
 8004864:	460f      	mov	r7, r1
 8004866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800486a:	f7fb fe2d 	bl	80004c8 <__aeabi_dmul>
 800486e:	4632      	mov	r2, r6
 8004870:	463b      	mov	r3, r7
 8004872:	f7fb fc71 	bl	8000158 <__aeabi_dsub>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4606      	mov	r6, r0
 800487c:	460f      	mov	r7, r1
 800487e:	4640      	mov	r0, r8
 8004880:	4649      	mov	r1, r9
 8004882:	f7fb fc69 	bl	8000158 <__aeabi_dsub>
 8004886:	9a05      	ldr	r2, [sp, #20]
 8004888:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b31      	cmp	r3, #49	@ 0x31
 8004890:	dc20      	bgt.n	80048d4 <__ieee754_rem_pio2+0x26c>
 8004892:	46c2      	mov	sl, r8
 8004894:	46cb      	mov	fp, r9
 8004896:	e9c4 0100 	strd	r0, r1, [r4]
 800489a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800489e:	4650      	mov	r0, sl
 80048a0:	4642      	mov	r2, r8
 80048a2:	464b      	mov	r3, r9
 80048a4:	4659      	mov	r1, fp
 80048a6:	f7fb fc57 	bl	8000158 <__aeabi_dsub>
 80048aa:	463b      	mov	r3, r7
 80048ac:	4632      	mov	r2, r6
 80048ae:	f7fb fc53 	bl	8000158 <__aeabi_dsub>
 80048b2:	9b04      	ldr	r3, [sp, #16]
 80048b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f6bf af10 	bge.w	80046de <__ieee754_rem_pio2+0x76>
 80048be:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80048c2:	6063      	str	r3, [r4, #4]
 80048c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048c8:	f8c4 8000 	str.w	r8, [r4]
 80048cc:	60a0      	str	r0, [r4, #8]
 80048ce:	60e3      	str	r3, [r4, #12]
 80048d0:	426d      	negs	r5, r5
 80048d2:	e704      	b.n	80046de <__ieee754_rem_pio2+0x76>
 80048d4:	a326      	add	r3, pc, #152	@ (adr r3, 8004970 <__ieee754_rem_pio2+0x308>)
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048de:	f7fb fdf3 	bl	80004c8 <__aeabi_dmul>
 80048e2:	4606      	mov	r6, r0
 80048e4:	460f      	mov	r7, r1
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4640      	mov	r0, r8
 80048ec:	4649      	mov	r1, r9
 80048ee:	f7fb fc33 	bl	8000158 <__aeabi_dsub>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4682      	mov	sl, r0
 80048f8:	468b      	mov	fp, r1
 80048fa:	4640      	mov	r0, r8
 80048fc:	4649      	mov	r1, r9
 80048fe:	f7fb fc2b 	bl	8000158 <__aeabi_dsub>
 8004902:	4632      	mov	r2, r6
 8004904:	463b      	mov	r3, r7
 8004906:	f7fb fc27 	bl	8000158 <__aeabi_dsub>
 800490a:	a31b      	add	r3, pc, #108	@ (adr r3, 8004978 <__ieee754_rem_pio2+0x310>)
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	4606      	mov	r6, r0
 8004912:	460f      	mov	r7, r1
 8004914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004918:	f7fb fdd6 	bl	80004c8 <__aeabi_dmul>
 800491c:	4632      	mov	r2, r6
 800491e:	463b      	mov	r3, r7
 8004920:	f7fb fc1a 	bl	8000158 <__aeabi_dsub>
 8004924:	4606      	mov	r6, r0
 8004926:	460f      	mov	r7, r1
 8004928:	e764      	b.n	80047f4 <__ieee754_rem_pio2+0x18c>
 800492a:	4b1b      	ldr	r3, [pc, #108]	@ (8004998 <__ieee754_rem_pio2+0x330>)
 800492c:	4598      	cmp	r8, r3
 800492e:	d935      	bls.n	800499c <__ieee754_rem_pio2+0x334>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	f7fb fc10 	bl	8000158 <__aeabi_dsub>
 8004938:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800493c:	e9c4 0100 	strd	r0, r1, [r4]
 8004940:	e6a4      	b.n	800468c <__ieee754_rem_pio2+0x24>
 8004942:	bf00      	nop
 8004944:	f3af 8000 	nop.w
 8004948:	54400000 	.word	0x54400000
 800494c:	3ff921fb 	.word	0x3ff921fb
 8004950:	1a626331 	.word	0x1a626331
 8004954:	3dd0b461 	.word	0x3dd0b461
 8004958:	1a600000 	.word	0x1a600000
 800495c:	3dd0b461 	.word	0x3dd0b461
 8004960:	2e037073 	.word	0x2e037073
 8004964:	3ba3198a 	.word	0x3ba3198a
 8004968:	6dc9c883 	.word	0x6dc9c883
 800496c:	3fe45f30 	.word	0x3fe45f30
 8004970:	2e000000 	.word	0x2e000000
 8004974:	3ba3198a 	.word	0x3ba3198a
 8004978:	252049c1 	.word	0x252049c1
 800497c:	397b839a 	.word	0x397b839a
 8004980:	3fe921fb 	.word	0x3fe921fb
 8004984:	4002d97b 	.word	0x4002d97b
 8004988:	3ff921fb 	.word	0x3ff921fb
 800498c:	413921fb 	.word	0x413921fb
 8004990:	3fe00000 	.word	0x3fe00000
 8004994:	080052d4 	.word	0x080052d4
 8004998:	7fefffff 	.word	0x7fefffff
 800499c:	ea4f 5528 	mov.w	r5, r8, asr #20
 80049a0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80049a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80049a8:	460f      	mov	r7, r1
 80049aa:	f7fc f827 	bl	80009fc <__aeabi_d2iz>
 80049ae:	f7fb fd21 	bl	80003f4 <__aeabi_i2d>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4630      	mov	r0, r6
 80049b8:	4639      	mov	r1, r7
 80049ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80049be:	f7fb fbcb 	bl	8000158 <__aeabi_dsub>
 80049c2:	2200      	movs	r2, #0
 80049c4:	4b21      	ldr	r3, [pc, #132]	@ (8004a4c <__ieee754_rem_pio2+0x3e4>)
 80049c6:	f7fb fd7f 	bl	80004c8 <__aeabi_dmul>
 80049ca:	460f      	mov	r7, r1
 80049cc:	4606      	mov	r6, r0
 80049ce:	f7fc f815 	bl	80009fc <__aeabi_d2iz>
 80049d2:	f7fb fd0f 	bl	80003f4 <__aeabi_i2d>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4630      	mov	r0, r6
 80049dc:	4639      	mov	r1, r7
 80049de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80049e2:	f7fb fbb9 	bl	8000158 <__aeabi_dsub>
 80049e6:	2200      	movs	r2, #0
 80049e8:	4b18      	ldr	r3, [pc, #96]	@ (8004a4c <__ieee754_rem_pio2+0x3e4>)
 80049ea:	f7fb fd6d 	bl	80004c8 <__aeabi_dmul>
 80049ee:	f04f 0803 	mov.w	r8, #3
 80049f2:	2600      	movs	r6, #0
 80049f4:	2700      	movs	r7, #0
 80049f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80049fa:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80049fe:	4632      	mov	r2, r6
 8004a00:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004a04:	463b      	mov	r3, r7
 8004a06:	46c2      	mov	sl, r8
 8004a08:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a0c:	f7fb ffc4 	bl	8000998 <__aeabi_dcmpeq>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d1f4      	bne.n	80049fe <__ieee754_rem_pio2+0x396>
 8004a14:	4b0e      	ldr	r3, [pc, #56]	@ (8004a50 <__ieee754_rem_pio2+0x3e8>)
 8004a16:	462a      	mov	r2, r5
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	a806      	add	r0, sp, #24
 8004a22:	4653      	mov	r3, sl
 8004a24:	f000 f81a 	bl	8004a5c <__kernel_rem_pio2>
 8004a28:	9b04      	ldr	r3, [sp, #16]
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f6bf ae56 	bge.w	80046de <__ieee754_rem_pio2+0x76>
 8004a32:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004a36:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a3a:	e9c4 2300 	strd	r2, r3, [r4]
 8004a3e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004a42:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a46:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004a4a:	e741      	b.n	80048d0 <__ieee754_rem_pio2+0x268>
 8004a4c:	41700000 	.word	0x41700000
 8004a50:	08005354 	.word	0x08005354

08004a54 <fabs>:
 8004a54:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4770      	bx	lr

08004a5c <__kernel_rem_pio2>:
 8004a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a60:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004a64:	9308      	str	r3, [sp, #32]
 8004a66:	9104      	str	r1, [sp, #16]
 8004a68:	4bb6      	ldr	r3, [pc, #728]	@ (8004d44 <__kernel_rem_pio2+0x2e8>)
 8004a6a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8004a6c:	f112 0f14 	cmn.w	r2, #20
 8004a70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a74:	bfa8      	it	ge
 8004a76:	1ed4      	subge	r4, r2, #3
 8004a78:	9302      	str	r3, [sp, #8]
 8004a7a:	9b08      	ldr	r3, [sp, #32]
 8004a7c:	bfb8      	it	lt
 8004a7e:	2400      	movlt	r4, #0
 8004a80:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a84:	9306      	str	r3, [sp, #24]
 8004a86:	bfa4      	itt	ge
 8004a88:	2318      	movge	r3, #24
 8004a8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8004a8e:	f06f 0317 	mvn.w	r3, #23
 8004a92:	fb04 3303 	mla	r3, r4, r3, r3
 8004a96:	eb03 0a02 	add.w	sl, r3, r2
 8004a9a:	9a06      	ldr	r2, [sp, #24]
 8004a9c:	9b02      	ldr	r3, [sp, #8]
 8004a9e:	1aa7      	subs	r7, r4, r2
 8004aa0:	eb03 0802 	add.w	r8, r3, r2
 8004aa4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8004aa6:	2500      	movs	r5, #0
 8004aa8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004aac:	2200      	movs	r2, #0
 8004aae:	2300      	movs	r3, #0
 8004ab0:	9009      	str	r0, [sp, #36]	@ 0x24
 8004ab2:	ae20      	add	r6, sp, #128	@ 0x80
 8004ab4:	4545      	cmp	r5, r8
 8004ab6:	dd14      	ble.n	8004ae2 <__kernel_rem_pio2+0x86>
 8004ab8:	f04f 0800 	mov.w	r8, #0
 8004abc:	9a08      	ldr	r2, [sp, #32]
 8004abe:	ab20      	add	r3, sp, #128	@ 0x80
 8004ac0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8004ac4:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8004ac8:	9b02      	ldr	r3, [sp, #8]
 8004aca:	4598      	cmp	r8, r3
 8004acc:	dc35      	bgt.n	8004b3a <__kernel_rem_pio2+0xde>
 8004ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f1a3 0908 	sub.w	r9, r3, #8
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	462f      	mov	r7, r5
 8004ada:	2600      	movs	r6, #0
 8004adc:	e9cd 2300 	strd	r2, r3, [sp]
 8004ae0:	e01f      	b.n	8004b22 <__kernel_rem_pio2+0xc6>
 8004ae2:	42ef      	cmn	r7, r5
 8004ae4:	d40b      	bmi.n	8004afe <__kernel_rem_pio2+0xa2>
 8004ae6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004aea:	e9cd 2300 	strd	r2, r3, [sp]
 8004aee:	f7fb fc81 	bl	80003f4 <__aeabi_i2d>
 8004af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004af6:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004afa:	3501      	adds	r5, #1
 8004afc:	e7da      	b.n	8004ab4 <__kernel_rem_pio2+0x58>
 8004afe:	4610      	mov	r0, r2
 8004b00:	4619      	mov	r1, r3
 8004b02:	e7f8      	b.n	8004af6 <__kernel_rem_pio2+0x9a>
 8004b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b08:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004b0c:	f7fb fcdc 	bl	80004c8 <__aeabi_dmul>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b18:	f7fb fb20 	bl	800015c <__adddf3>
 8004b1c:	e9cd 0100 	strd	r0, r1, [sp]
 8004b20:	3601      	adds	r6, #1
 8004b22:	9b06      	ldr	r3, [sp, #24]
 8004b24:	3f08      	subs	r7, #8
 8004b26:	429e      	cmp	r6, r3
 8004b28:	ddec      	ble.n	8004b04 <__kernel_rem_pio2+0xa8>
 8004b2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b2e:	f108 0801 	add.w	r8, r8, #1
 8004b32:	e8eb 2302 	strd	r2, r3, [fp], #8
 8004b36:	3508      	adds	r5, #8
 8004b38:	e7c6      	b.n	8004ac8 <__kernel_rem_pio2+0x6c>
 8004b3a:	9b02      	ldr	r3, [sp, #8]
 8004b3c:	aa0c      	add	r2, sp, #48	@ 0x30
 8004b3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004b42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b44:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8004b46:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004b4a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004b4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b50:	ab98      	add	r3, sp, #608	@ 0x260
 8004b52:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004b56:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8004b5a:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004b5c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004b60:	ae0c      	add	r6, sp, #48	@ 0x30
 8004b62:	4698      	mov	r8, r3
 8004b64:	46b1      	mov	r9, r6
 8004b66:	465f      	mov	r7, fp
 8004b68:	9307      	str	r3, [sp, #28]
 8004b6a:	2f00      	cmp	r7, #0
 8004b6c:	f1a8 0808 	sub.w	r8, r8, #8
 8004b70:	dc71      	bgt.n	8004c56 <__kernel_rem_pio2+0x1fa>
 8004b72:	4652      	mov	r2, sl
 8004b74:	4620      	mov	r0, r4
 8004b76:	4629      	mov	r1, r5
 8004b78:	f000 fa96 	bl	80050a8 <scalbn>
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004b82:	4604      	mov	r4, r0
 8004b84:	460d      	mov	r5, r1
 8004b86:	f7fb fc9f 	bl	80004c8 <__aeabi_dmul>
 8004b8a:	f000 fb05 	bl	8005198 <floor>
 8004b8e:	2200      	movs	r2, #0
 8004b90:	4b6d      	ldr	r3, [pc, #436]	@ (8004d48 <__kernel_rem_pio2+0x2ec>)
 8004b92:	f7fb fc99 	bl	80004c8 <__aeabi_dmul>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	f7fb fadb 	bl	8000158 <__aeabi_dsub>
 8004ba2:	460d      	mov	r5, r1
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	f7fb ff29 	bl	80009fc <__aeabi_d2iz>
 8004baa:	9005      	str	r0, [sp, #20]
 8004bac:	f7fb fc22 	bl	80003f4 <__aeabi_i2d>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	f7fb face 	bl	8000158 <__aeabi_dsub>
 8004bbc:	f1ba 0f00 	cmp.w	sl, #0
 8004bc0:	4680      	mov	r8, r0
 8004bc2:	4689      	mov	r9, r1
 8004bc4:	dd6d      	ble.n	8004ca2 <__kernel_rem_pio2+0x246>
 8004bc6:	f10b 31ff 	add.w	r1, fp, #4294967295
 8004bca:	ab0c      	add	r3, sp, #48	@ 0x30
 8004bcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004bd0:	9c05      	ldr	r4, [sp, #20]
 8004bd2:	f1ca 0018 	rsb	r0, sl, #24
 8004bd6:	fa43 f200 	asr.w	r2, r3, r0
 8004bda:	4414      	add	r4, r2
 8004bdc:	4082      	lsls	r2, r0
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	aa0c      	add	r2, sp, #48	@ 0x30
 8004be2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004be6:	f1ca 0217 	rsb	r2, sl, #23
 8004bea:	9405      	str	r4, [sp, #20]
 8004bec:	4113      	asrs	r3, r2
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	9b00      	ldr	r3, [sp, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	dd64      	ble.n	8004cc0 <__kernel_rem_pio2+0x264>
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	9b05      	ldr	r3, [sp, #20]
 8004c00:	3301      	adds	r3, #1
 8004c02:	9305      	str	r3, [sp, #20]
 8004c04:	4593      	cmp	fp, r2
 8004c06:	f300 80ab 	bgt.w	8004d60 <__kernel_rem_pio2+0x304>
 8004c0a:	f1ba 0f00 	cmp.w	sl, #0
 8004c0e:	dd07      	ble.n	8004c20 <__kernel_rem_pio2+0x1c4>
 8004c10:	f1ba 0f01 	cmp.w	sl, #1
 8004c14:	f000 80b2 	beq.w	8004d7c <__kernel_rem_pio2+0x320>
 8004c18:	f1ba 0f02 	cmp.w	sl, #2
 8004c1c:	f000 80b9 	beq.w	8004d92 <__kernel_rem_pio2+0x336>
 8004c20:	9b00      	ldr	r3, [sp, #0]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d14c      	bne.n	8004cc0 <__kernel_rem_pio2+0x264>
 8004c26:	4642      	mov	r2, r8
 8004c28:	464b      	mov	r3, r9
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	4947      	ldr	r1, [pc, #284]	@ (8004d4c <__kernel_rem_pio2+0x2f0>)
 8004c2e:	f7fb fa93 	bl	8000158 <__aeabi_dsub>
 8004c32:	4680      	mov	r8, r0
 8004c34:	4689      	mov	r9, r1
 8004c36:	2c00      	cmp	r4, #0
 8004c38:	d042      	beq.n	8004cc0 <__kernel_rem_pio2+0x264>
 8004c3a:	4652      	mov	r2, sl
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	4943      	ldr	r1, [pc, #268]	@ (8004d4c <__kernel_rem_pio2+0x2f0>)
 8004c40:	f000 fa32 	bl	80050a8 <scalbn>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4640      	mov	r0, r8
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	f7fb fa84 	bl	8000158 <__aeabi_dsub>
 8004c50:	4680      	mov	r8, r0
 8004c52:	4689      	mov	r9, r1
 8004c54:	e034      	b.n	8004cc0 <__kernel_rem_pio2+0x264>
 8004c56:	2200      	movs	r2, #0
 8004c58:	4b3d      	ldr	r3, [pc, #244]	@ (8004d50 <__kernel_rem_pio2+0x2f4>)
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	f7fb fc33 	bl	80004c8 <__aeabi_dmul>
 8004c62:	f7fb fecb 	bl	80009fc <__aeabi_d2iz>
 8004c66:	f7fb fbc5 	bl	80003f4 <__aeabi_i2d>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	e9cd 2300 	strd	r2, r3, [sp]
 8004c72:	2200      	movs	r2, #0
 8004c74:	4b37      	ldr	r3, [pc, #220]	@ (8004d54 <__kernel_rem_pio2+0x2f8>)
 8004c76:	f7fb fc27 	bl	80004c8 <__aeabi_dmul>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4620      	mov	r0, r4
 8004c80:	4629      	mov	r1, r5
 8004c82:	f7fb fa69 	bl	8000158 <__aeabi_dsub>
 8004c86:	f7fb feb9 	bl	80009fc <__aeabi_d2iz>
 8004c8a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004c8e:	f849 0b04 	str.w	r0, [r9], #4
 8004c92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c96:	f7fb fa61 	bl	800015c <__adddf3>
 8004c9a:	3f01      	subs	r7, #1
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	460d      	mov	r5, r1
 8004ca0:	e763      	b.n	8004b6a <__kernel_rem_pio2+0x10e>
 8004ca2:	d106      	bne.n	8004cb2 <__kernel_rem_pio2+0x256>
 8004ca4:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004ca8:	aa0c      	add	r2, sp, #48	@ 0x30
 8004caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cae:	15db      	asrs	r3, r3, #23
 8004cb0:	e79d      	b.n	8004bee <__kernel_rem_pio2+0x192>
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	4b28      	ldr	r3, [pc, #160]	@ (8004d58 <__kernel_rem_pio2+0x2fc>)
 8004cb6:	f7fb fe8d 	bl	80009d4 <__aeabi_dcmpge>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d13f      	bne.n	8004d3e <__kernel_rem_pio2+0x2e2>
 8004cbe:	9000      	str	r0, [sp, #0]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	f7fb fe66 	bl	8000998 <__aeabi_dcmpeq>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	f000 80af 	beq.w	8004e30 <__kernel_rem_pio2+0x3d4>
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004cd8:	9902      	ldr	r1, [sp, #8]
 8004cda:	428b      	cmp	r3, r1
 8004cdc:	da61      	bge.n	8004da2 <__kernel_rem_pio2+0x346>
 8004cde:	2a00      	cmp	r2, #0
 8004ce0:	d076      	beq.n	8004dd0 <__kernel_rem_pio2+0x374>
 8004ce2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ce6:	ab0c      	add	r3, sp, #48	@ 0x30
 8004ce8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8004cec:	f1aa 0a18 	sub.w	sl, sl, #24
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f6      	beq.n	8004ce2 <__kernel_rem_pio2+0x286>
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	4914      	ldr	r1, [pc, #80]	@ (8004d4c <__kernel_rem_pio2+0x2f0>)
 8004cfa:	f000 f9d5 	bl	80050a8 <scalbn>
 8004cfe:	465d      	mov	r5, fp
 8004d00:	4606      	mov	r6, r0
 8004d02:	460f      	mov	r7, r1
 8004d04:	f04f 0900 	mov.w	r9, #0
 8004d08:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004d0a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8004d50 <__kernel_rem_pio2+0x2f4>
 8004d0e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8004d12:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8004d16:	2d00      	cmp	r5, #0
 8004d18:	f280 80c0 	bge.w	8004e9c <__kernel_rem_pio2+0x440>
 8004d1c:	465d      	mov	r5, fp
 8004d1e:	2d00      	cmp	r5, #0
 8004d20:	f2c0 80f0 	blt.w	8004f04 <__kernel_rem_pio2+0x4a8>
 8004d24:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <__kernel_rem_pio2+0x300>)
 8004d26:	f04f 0900 	mov.w	r9, #0
 8004d2a:	9306      	str	r3, [sp, #24]
 8004d2c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004d2e:	f04f 0a00 	mov.w	sl, #0
 8004d32:	2700      	movs	r7, #0
 8004d34:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8004d38:	ebab 0605 	sub.w	r6, fp, r5
 8004d3c:	e0d6      	b.n	8004eec <__kernel_rem_pio2+0x490>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	e758      	b.n	8004bf6 <__kernel_rem_pio2+0x19a>
 8004d44:	080054a0 	.word	0x080054a0
 8004d48:	40200000 	.word	0x40200000
 8004d4c:	3ff00000 	.word	0x3ff00000
 8004d50:	3e700000 	.word	0x3e700000
 8004d54:	41700000 	.word	0x41700000
 8004d58:	3fe00000 	.word	0x3fe00000
 8004d5c:	08005460 	.word	0x08005460
 8004d60:	f856 3b04 	ldr.w	r3, [r6], #4
 8004d64:	b944      	cbnz	r4, 8004d78 <__kernel_rem_pio2+0x31c>
 8004d66:	b123      	cbz	r3, 8004d72 <__kernel_rem_pio2+0x316>
 8004d68:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004d6c:	f846 3c04 	str.w	r3, [r6, #-4]
 8004d70:	2301      	movs	r3, #1
 8004d72:	461c      	mov	r4, r3
 8004d74:	3201      	adds	r2, #1
 8004d76:	e745      	b.n	8004c04 <__kernel_rem_pio2+0x1a8>
 8004d78:	1acb      	subs	r3, r1, r3
 8004d7a:	e7f7      	b.n	8004d6c <__kernel_rem_pio2+0x310>
 8004d7c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004d80:	ab0c      	add	r3, sp, #48	@ 0x30
 8004d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d86:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004d8a:	a90c      	add	r1, sp, #48	@ 0x30
 8004d8c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004d90:	e746      	b.n	8004c20 <__kernel_rem_pio2+0x1c4>
 8004d92:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004d96:	ab0c      	add	r3, sp, #48	@ 0x30
 8004d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d9c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004da0:	e7f3      	b.n	8004d8a <__kernel_rem_pio2+0x32e>
 8004da2:	a90c      	add	r1, sp, #48	@ 0x30
 8004da4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	430a      	orrs	r2, r1
 8004dac:	e794      	b.n	8004cd8 <__kernel_rem_pio2+0x27c>
 8004dae:	3401      	adds	r4, #1
 8004db0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004db4:	2a00      	cmp	r2, #0
 8004db6:	d0fa      	beq.n	8004dae <__kernel_rem_pio2+0x352>
 8004db8:	9b08      	ldr	r3, [sp, #32]
 8004dba:	aa20      	add	r2, sp, #128	@ 0x80
 8004dbc:	445b      	add	r3, fp
 8004dbe:	f10b 0801 	add.w	r8, fp, #1
 8004dc2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004dc6:	445c      	add	r4, fp
 8004dc8:	4544      	cmp	r4, r8
 8004dca:	da04      	bge.n	8004dd6 <__kernel_rem_pio2+0x37a>
 8004dcc:	46a3      	mov	fp, r4
 8004dce:	e6bf      	b.n	8004b50 <__kernel_rem_pio2+0xf4>
 8004dd0:	2401      	movs	r4, #1
 8004dd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004dd4:	e7ec      	b.n	8004db0 <__kernel_rem_pio2+0x354>
 8004dd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dd8:	46ab      	mov	fp, r5
 8004dda:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004dde:	f7fb fb09 	bl	80003f4 <__aeabi_i2d>
 8004de2:	f04f 0900 	mov.w	r9, #0
 8004de6:	2600      	movs	r6, #0
 8004de8:	2700      	movs	r7, #0
 8004dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dec:	e9c5 0100 	strd	r0, r1, [r5]
 8004df0:	3b08      	subs	r3, #8
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	9b06      	ldr	r3, [sp, #24]
 8004df6:	4599      	cmp	r9, r3
 8004df8:	dd07      	ble.n	8004e0a <__kernel_rem_pio2+0x3ae>
 8004dfa:	9b07      	ldr	r3, [sp, #28]
 8004dfc:	f108 0801 	add.w	r8, r8, #1
 8004e00:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8004e04:	3508      	adds	r5, #8
 8004e06:	9307      	str	r3, [sp, #28]
 8004e08:	e7de      	b.n	8004dc8 <__kernel_rem_pio2+0x36c>
 8004e0a:	9900      	ldr	r1, [sp, #0]
 8004e0c:	f109 0901 	add.w	r9, r9, #1
 8004e10:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004e14:	9100      	str	r1, [sp, #0]
 8004e16:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8004e1a:	f7fb fb55 	bl	80004c8 <__aeabi_dmul>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4630      	mov	r0, r6
 8004e24:	4639      	mov	r1, r7
 8004e26:	f7fb f999 	bl	800015c <__adddf3>
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	460f      	mov	r7, r1
 8004e2e:	e7e1      	b.n	8004df4 <__kernel_rem_pio2+0x398>
 8004e30:	f1ca 0200 	rsb	r2, sl, #0
 8004e34:	4640      	mov	r0, r8
 8004e36:	4649      	mov	r1, r9
 8004e38:	f000 f936 	bl	80050a8 <scalbn>
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	4b97      	ldr	r3, [pc, #604]	@ (800509c <__kernel_rem_pio2+0x640>)
 8004e40:	4604      	mov	r4, r0
 8004e42:	460d      	mov	r5, r1
 8004e44:	f7fb fdc6 	bl	80009d4 <__aeabi_dcmpge>
 8004e48:	b300      	cbz	r0, 8004e8c <__kernel_rem_pio2+0x430>
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	4b94      	ldr	r3, [pc, #592]	@ (80050a0 <__kernel_rem_pio2+0x644>)
 8004e4e:	4620      	mov	r0, r4
 8004e50:	4629      	mov	r1, r5
 8004e52:	f7fb fb39 	bl	80004c8 <__aeabi_dmul>
 8004e56:	f7fb fdd1 	bl	80009fc <__aeabi_d2iz>
 8004e5a:	4606      	mov	r6, r0
 8004e5c:	f7fb faca 	bl	80003f4 <__aeabi_i2d>
 8004e60:	2200      	movs	r2, #0
 8004e62:	4b8e      	ldr	r3, [pc, #568]	@ (800509c <__kernel_rem_pio2+0x640>)
 8004e64:	f7fb fb30 	bl	80004c8 <__aeabi_dmul>
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f7fb f972 	bl	8000158 <__aeabi_dsub>
 8004e74:	f7fb fdc2 	bl	80009fc <__aeabi_d2iz>
 8004e78:	ab0c      	add	r3, sp, #48	@ 0x30
 8004e7a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8004e7e:	f10b 0b01 	add.w	fp, fp, #1
 8004e82:	f10a 0a18 	add.w	sl, sl, #24
 8004e86:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8004e8a:	e733      	b.n	8004cf4 <__kernel_rem_pio2+0x298>
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	4629      	mov	r1, r5
 8004e90:	f7fb fdb4 	bl	80009fc <__aeabi_d2iz>
 8004e94:	ab0c      	add	r3, sp, #48	@ 0x30
 8004e96:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8004e9a:	e72b      	b.n	8004cf4 <__kernel_rem_pio2+0x298>
 8004e9c:	ab0c      	add	r3, sp, #48	@ 0x30
 8004e9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004ea2:	f7fb faa7 	bl	80003f4 <__aeabi_i2d>
 8004ea6:	4632      	mov	r2, r6
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	f7fb fb0d 	bl	80004c8 <__aeabi_dmul>
 8004eae:	464a      	mov	r2, r9
 8004eb0:	e868 0102 	strd	r0, r1, [r8], #-8
 8004eb4:	4653      	mov	r3, sl
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	4639      	mov	r1, r7
 8004eba:	f7fb fb05 	bl	80004c8 <__aeabi_dmul>
 8004ebe:	3d01      	subs	r5, #1
 8004ec0:	4606      	mov	r6, r0
 8004ec2:	460f      	mov	r7, r1
 8004ec4:	e727      	b.n	8004d16 <__kernel_rem_pio2+0x2ba>
 8004ec6:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004eca:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8004ece:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8004ed2:	f8cd c018 	str.w	ip, [sp, #24]
 8004ed6:	f7fb faf7 	bl	80004c8 <__aeabi_dmul>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4648      	mov	r0, r9
 8004ee0:	4651      	mov	r1, sl
 8004ee2:	f7fb f93b 	bl	800015c <__adddf3>
 8004ee6:	4681      	mov	r9, r0
 8004ee8:	468a      	mov	sl, r1
 8004eea:	3701      	adds	r7, #1
 8004eec:	9b02      	ldr	r3, [sp, #8]
 8004eee:	429f      	cmp	r7, r3
 8004ef0:	dc01      	bgt.n	8004ef6 <__kernel_rem_pio2+0x49a>
 8004ef2:	42be      	cmp	r6, r7
 8004ef4:	dae7      	bge.n	8004ec6 <__kernel_rem_pio2+0x46a>
 8004ef6:	ab48      	add	r3, sp, #288	@ 0x120
 8004ef8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004efc:	e9c6 9a00 	strd	r9, sl, [r6]
 8004f00:	3d01      	subs	r5, #1
 8004f02:	e70c      	b.n	8004d1e <__kernel_rem_pio2+0x2c2>
 8004f04:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	dc09      	bgt.n	8004f1e <__kernel_rem_pio2+0x4c2>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	dc2c      	bgt.n	8004f68 <__kernel_rem_pio2+0x50c>
 8004f0e:	d04e      	beq.n	8004fae <__kernel_rem_pio2+0x552>
 8004f10:	9b05      	ldr	r3, [sp, #20]
 8004f12:	f003 0007 	and.w	r0, r3, #7
 8004f16:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d1f5      	bne.n	8004f10 <__kernel_rem_pio2+0x4b4>
 8004f24:	ab48      	add	r3, sp, #288	@ 0x120
 8004f26:	441c      	add	r4, r3
 8004f28:	4625      	mov	r5, r4
 8004f2a:	46da      	mov	sl, fp
 8004f2c:	f1ba 0f00 	cmp.w	sl, #0
 8004f30:	dc63      	bgt.n	8004ffa <__kernel_rem_pio2+0x59e>
 8004f32:	4625      	mov	r5, r4
 8004f34:	46da      	mov	sl, fp
 8004f36:	f1ba 0f01 	cmp.w	sl, #1
 8004f3a:	dc7b      	bgt.n	8005034 <__kernel_rem_pio2+0x5d8>
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	2100      	movs	r1, #0
 8004f40:	f1bb 0f01 	cmp.w	fp, #1
 8004f44:	f300 8093 	bgt.w	800506e <__kernel_rem_pio2+0x612>
 8004f48:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004f4c:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004f50:	9b00      	ldr	r3, [sp, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f040 8092 	bne.w	800507c <__kernel_rem_pio2+0x620>
 8004f58:	9b04      	ldr	r3, [sp, #16]
 8004f5a:	e9c3 7800 	strd	r7, r8, [r3]
 8004f5e:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004f62:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004f66:	e7d3      	b.n	8004f10 <__kernel_rem_pio2+0x4b4>
 8004f68:	465d      	mov	r5, fp
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	ab48      	add	r3, sp, #288	@ 0x120
 8004f70:	441c      	add	r4, r3
 8004f72:	2d00      	cmp	r5, #0
 8004f74:	da32      	bge.n	8004fdc <__kernel_rem_pio2+0x580>
 8004f76:	9b00      	ldr	r3, [sp, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d035      	beq.n	8004fe8 <__kernel_rem_pio2+0x58c>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004f82:	9c04      	ldr	r4, [sp, #16]
 8004f84:	2501      	movs	r5, #1
 8004f86:	e9c4 2300 	strd	r2, r3, [r4]
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004f92:	f7fb f8e1 	bl	8000158 <__aeabi_dsub>
 8004f96:	ac48      	add	r4, sp, #288	@ 0x120
 8004f98:	45ab      	cmp	fp, r5
 8004f9a:	da28      	bge.n	8004fee <__kernel_rem_pio2+0x592>
 8004f9c:	9b00      	ldr	r3, [sp, #0]
 8004f9e:	b113      	cbz	r3, 8004fa6 <__kernel_rem_pio2+0x54a>
 8004fa0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	9b04      	ldr	r3, [sp, #16]
 8004fa8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004fac:	e7b0      	b.n	8004f10 <__kernel_rem_pio2+0x4b4>
 8004fae:	2000      	movs	r0, #0
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	ab48      	add	r3, sp, #288	@ 0x120
 8004fb4:	441c      	add	r4, r3
 8004fb6:	f1bb 0f00 	cmp.w	fp, #0
 8004fba:	da08      	bge.n	8004fce <__kernel_rem_pio2+0x572>
 8004fbc:	9b00      	ldr	r3, [sp, #0]
 8004fbe:	b113      	cbz	r3, 8004fc6 <__kernel_rem_pio2+0x56a>
 8004fc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	9b04      	ldr	r3, [sp, #16]
 8004fc8:	e9c3 0100 	strd	r0, r1, [r3]
 8004fcc:	e7a0      	b.n	8004f10 <__kernel_rem_pio2+0x4b4>
 8004fce:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004fd2:	f7fb f8c3 	bl	800015c <__adddf3>
 8004fd6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004fda:	e7ec      	b.n	8004fb6 <__kernel_rem_pio2+0x55a>
 8004fdc:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004fe0:	f7fb f8bc 	bl	800015c <__adddf3>
 8004fe4:	3d01      	subs	r5, #1
 8004fe6:	e7c4      	b.n	8004f72 <__kernel_rem_pio2+0x516>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	e7c9      	b.n	8004f82 <__kernel_rem_pio2+0x526>
 8004fee:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8004ff2:	f7fb f8b3 	bl	800015c <__adddf3>
 8004ff6:	3501      	adds	r5, #1
 8004ff8:	e7ce      	b.n	8004f98 <__kernel_rem_pio2+0x53c>
 8004ffa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ffe:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8005002:	4640      	mov	r0, r8
 8005004:	4649      	mov	r1, r9
 8005006:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800500a:	f7fb f8a7 	bl	800015c <__adddf3>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4606      	mov	r6, r0
 8005014:	460f      	mov	r7, r1
 8005016:	4640      	mov	r0, r8
 8005018:	4649      	mov	r1, r9
 800501a:	f7fb f89d 	bl	8000158 <__aeabi_dsub>
 800501e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005022:	f7fb f89b 	bl	800015c <__adddf3>
 8005026:	e865 0102 	strd	r0, r1, [r5], #-8
 800502a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800502e:	e9c5 6700 	strd	r6, r7, [r5]
 8005032:	e77b      	b.n	8004f2c <__kernel_rem_pio2+0x4d0>
 8005034:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005038:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800503c:	4640      	mov	r0, r8
 800503e:	4649      	mov	r1, r9
 8005040:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005044:	f7fb f88a 	bl	800015c <__adddf3>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4606      	mov	r6, r0
 800504e:	460f      	mov	r7, r1
 8005050:	4640      	mov	r0, r8
 8005052:	4649      	mov	r1, r9
 8005054:	f7fb f880 	bl	8000158 <__aeabi_dsub>
 8005058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800505c:	f7fb f87e 	bl	800015c <__adddf3>
 8005060:	e865 0102 	strd	r0, r1, [r5], #-8
 8005064:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005068:	e9c5 6700 	strd	r6, r7, [r5]
 800506c:	e763      	b.n	8004f36 <__kernel_rem_pio2+0x4da>
 800506e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005072:	f7fb f873 	bl	800015c <__adddf3>
 8005076:	f10b 3bff 	add.w	fp, fp, #4294967295
 800507a:	e761      	b.n	8004f40 <__kernel_rem_pio2+0x4e4>
 800507c:	9b04      	ldr	r3, [sp, #16]
 800507e:	9a04      	ldr	r2, [sp, #16]
 8005080:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005084:	601f      	str	r7, [r3, #0]
 8005086:	605c      	str	r4, [r3, #4]
 8005088:	609d      	str	r5, [r3, #8]
 800508a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800508e:	60d3      	str	r3, [r2, #12]
 8005090:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005094:	6110      	str	r0, [r2, #16]
 8005096:	6153      	str	r3, [r2, #20]
 8005098:	e73a      	b.n	8004f10 <__kernel_rem_pio2+0x4b4>
 800509a:	bf00      	nop
 800509c:	41700000 	.word	0x41700000
 80050a0:	3e700000 	.word	0x3e700000
 80050a4:	00000000 	.word	0x00000000

080050a8 <scalbn>:
 80050a8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80050ac:	4616      	mov	r6, r2
 80050ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80050b2:	4683      	mov	fp, r0
 80050b4:	468c      	mov	ip, r1
 80050b6:	460b      	mov	r3, r1
 80050b8:	b982      	cbnz	r2, 80050dc <scalbn+0x34>
 80050ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80050be:	4303      	orrs	r3, r0
 80050c0:	d039      	beq.n	8005136 <scalbn+0x8e>
 80050c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005180 <scalbn+0xd8>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	f7fb f9ff 	bl	80004c8 <__aeabi_dmul>
 80050ca:	4b2e      	ldr	r3, [pc, #184]	@ (8005184 <scalbn+0xdc>)
 80050cc:	4683      	mov	fp, r0
 80050ce:	429e      	cmp	r6, r3
 80050d0:	468c      	mov	ip, r1
 80050d2:	da0d      	bge.n	80050f0 <scalbn+0x48>
 80050d4:	a326      	add	r3, pc, #152	@ (adr r3, 8005170 <scalbn+0xc8>)
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	e01b      	b.n	8005114 <scalbn+0x6c>
 80050dc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80050e0:	42ba      	cmp	r2, r7
 80050e2:	d109      	bne.n	80050f8 <scalbn+0x50>
 80050e4:	4602      	mov	r2, r0
 80050e6:	f7fb f839 	bl	800015c <__adddf3>
 80050ea:	4683      	mov	fp, r0
 80050ec:	468c      	mov	ip, r1
 80050ee:	e022      	b.n	8005136 <scalbn+0x8e>
 80050f0:	460b      	mov	r3, r1
 80050f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80050f6:	3a36      	subs	r2, #54	@ 0x36
 80050f8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80050fc:	428e      	cmp	r6, r1
 80050fe:	dd0c      	ble.n	800511a <scalbn+0x72>
 8005100:	a31d      	add	r3, pc, #116	@ (adr r3, 8005178 <scalbn+0xd0>)
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	461c      	mov	r4, r3
 8005108:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800510c:	f361 74df 	bfi	r4, r1, #31, #1
 8005110:	4621      	mov	r1, r4
 8005112:	481d      	ldr	r0, [pc, #116]	@ (8005188 <scalbn+0xe0>)
 8005114:	f7fb f9d8 	bl	80004c8 <__aeabi_dmul>
 8005118:	e7e7      	b.n	80050ea <scalbn+0x42>
 800511a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800511e:	4432      	add	r2, r6
 8005120:	428a      	cmp	r2, r1
 8005122:	dced      	bgt.n	8005100 <scalbn+0x58>
 8005124:	2a00      	cmp	r2, #0
 8005126:	dd0a      	ble.n	800513e <scalbn+0x96>
 8005128:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800512c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005130:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005134:	46ac      	mov	ip, r5
 8005136:	4658      	mov	r0, fp
 8005138:	4661      	mov	r1, ip
 800513a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800513e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005142:	da09      	bge.n	8005158 <scalbn+0xb0>
 8005144:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8005148:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800514c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8005150:	480e      	ldr	r0, [pc, #56]	@ (800518c <scalbn+0xe4>)
 8005152:	f041 011f 	orr.w	r1, r1, #31
 8005156:	e7bd      	b.n	80050d4 <scalbn+0x2c>
 8005158:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800515c:	3236      	adds	r2, #54	@ 0x36
 800515e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005162:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005166:	4658      	mov	r0, fp
 8005168:	4629      	mov	r1, r5
 800516a:	2200      	movs	r2, #0
 800516c:	4b08      	ldr	r3, [pc, #32]	@ (8005190 <scalbn+0xe8>)
 800516e:	e7d1      	b.n	8005114 <scalbn+0x6c>
 8005170:	c2f8f359 	.word	0xc2f8f359
 8005174:	01a56e1f 	.word	0x01a56e1f
 8005178:	8800759c 	.word	0x8800759c
 800517c:	7e37e43c 	.word	0x7e37e43c
 8005180:	43500000 	.word	0x43500000
 8005184:	ffff3cb0 	.word	0xffff3cb0
 8005188:	8800759c 	.word	0x8800759c
 800518c:	c2f8f359 	.word	0xc2f8f359
 8005190:	3c900000 	.word	0x3c900000
 8005194:	00000000 	.word	0x00000000

08005198 <floor>:
 8005198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80051a0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80051a4:	2e13      	cmp	r6, #19
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	460c      	mov	r4, r1
 80051ac:	4605      	mov	r5, r0
 80051ae:	4680      	mov	r8, r0
 80051b0:	dc35      	bgt.n	800521e <floor+0x86>
 80051b2:	2e00      	cmp	r6, #0
 80051b4:	da17      	bge.n	80051e6 <floor+0x4e>
 80051b6:	a334      	add	r3, pc, #208	@ (adr r3, 8005288 <floor+0xf0>)
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f7fa ffce 	bl	800015c <__adddf3>
 80051c0:	2200      	movs	r2, #0
 80051c2:	2300      	movs	r3, #0
 80051c4:	f7fb fc10 	bl	80009e8 <__aeabi_dcmpgt>
 80051c8:	b150      	cbz	r0, 80051e0 <floor+0x48>
 80051ca:	2c00      	cmp	r4, #0
 80051cc:	da57      	bge.n	800527e <floor+0xe6>
 80051ce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80051d2:	432c      	orrs	r4, r5
 80051d4:	2500      	movs	r5, #0
 80051d6:	42ac      	cmp	r4, r5
 80051d8:	4c2d      	ldr	r4, [pc, #180]	@ (8005290 <floor+0xf8>)
 80051da:	bf08      	it	eq
 80051dc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80051e0:	4623      	mov	r3, r4
 80051e2:	462a      	mov	r2, r5
 80051e4:	e024      	b.n	8005230 <floor+0x98>
 80051e6:	4f2b      	ldr	r7, [pc, #172]	@ (8005294 <floor+0xfc>)
 80051e8:	4137      	asrs	r7, r6
 80051ea:	ea01 0c07 	and.w	ip, r1, r7
 80051ee:	ea5c 0c00 	orrs.w	ip, ip, r0
 80051f2:	d01d      	beq.n	8005230 <floor+0x98>
 80051f4:	a324      	add	r3, pc, #144	@ (adr r3, 8005288 <floor+0xf0>)
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	f7fa ffaf 	bl	800015c <__adddf3>
 80051fe:	2200      	movs	r2, #0
 8005200:	2300      	movs	r3, #0
 8005202:	f7fb fbf1 	bl	80009e8 <__aeabi_dcmpgt>
 8005206:	2800      	cmp	r0, #0
 8005208:	d0ea      	beq.n	80051e0 <floor+0x48>
 800520a:	2c00      	cmp	r4, #0
 800520c:	bfbe      	ittt	lt
 800520e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005212:	4133      	asrlt	r3, r6
 8005214:	18e4      	addlt	r4, r4, r3
 8005216:	2500      	movs	r5, #0
 8005218:	ea24 0407 	bic.w	r4, r4, r7
 800521c:	e7e0      	b.n	80051e0 <floor+0x48>
 800521e:	2e33      	cmp	r6, #51	@ 0x33
 8005220:	dd0a      	ble.n	8005238 <floor+0xa0>
 8005222:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005226:	d103      	bne.n	8005230 <floor+0x98>
 8005228:	f7fa ff98 	bl	800015c <__adddf3>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005238:	f04f 3cff 	mov.w	ip, #4294967295
 800523c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8005240:	fa2c f707 	lsr.w	r7, ip, r7
 8005244:	4207      	tst	r7, r0
 8005246:	d0f3      	beq.n	8005230 <floor+0x98>
 8005248:	a30f      	add	r3, pc, #60	@ (adr r3, 8005288 <floor+0xf0>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f7fa ff85 	bl	800015c <__adddf3>
 8005252:	2200      	movs	r2, #0
 8005254:	2300      	movs	r3, #0
 8005256:	f7fb fbc7 	bl	80009e8 <__aeabi_dcmpgt>
 800525a:	2800      	cmp	r0, #0
 800525c:	d0c0      	beq.n	80051e0 <floor+0x48>
 800525e:	2c00      	cmp	r4, #0
 8005260:	da0a      	bge.n	8005278 <floor+0xe0>
 8005262:	2e14      	cmp	r6, #20
 8005264:	d101      	bne.n	800526a <floor+0xd2>
 8005266:	3401      	adds	r4, #1
 8005268:	e006      	b.n	8005278 <floor+0xe0>
 800526a:	2301      	movs	r3, #1
 800526c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005270:	40b3      	lsls	r3, r6
 8005272:	441d      	add	r5, r3
 8005274:	4545      	cmp	r5, r8
 8005276:	d3f6      	bcc.n	8005266 <floor+0xce>
 8005278:	ea25 0507 	bic.w	r5, r5, r7
 800527c:	e7b0      	b.n	80051e0 <floor+0x48>
 800527e:	2500      	movs	r5, #0
 8005280:	462c      	mov	r4, r5
 8005282:	e7ad      	b.n	80051e0 <floor+0x48>
 8005284:	f3af 8000 	nop.w
 8005288:	8800759c 	.word	0x8800759c
 800528c:	7e37e43c 	.word	0x7e37e43c
 8005290:	bff00000 	.word	0xbff00000
 8005294:	000fffff 	.word	0x000fffff

08005298 <_init>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

080052a4 <_fini>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr
